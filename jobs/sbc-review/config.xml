<?xml version='1.1' encoding='UTF-8'?>
<matrix-project plugin="matrix-project@1.14">
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>7</daysToKeep>
        <numToKeep>20</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.27">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <matrixOptions>
        <throttleMatrixBuilds>true</throttleMatrixBuilds>
        <throttleMatrixConfigurations>false</throttleMatrixConfigurations>
      </matrixOptions>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    <EnvInjectJobProperty plugin="envinject@2.1.6">
      <info>
        <propertiesContent>ARTIFACTORY_HOST=artifactory
DEPENDENCIES_FOLDER=TrunkPackRam/TPApp/MPCBin
BRDVERSION=TrunkPackRam/Bsps/Common/Include/BrdVersion.h
PATH=/bin:$PATH</propertiesContent>
        <secureGroovyScript plugin="script-security@1.55">
          <script></script>
          <sandbox>false</sandbox>
        </secureGroovyScript>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
      <on>true</on>
      <keepJenkinsSystemVariables>true</keepJenkinsSystemVariables>
      <keepBuildVariables>true</keepBuildVariables>
      <overrideBuildParameters>false</overrideBuildParameters>
    </EnvInjectJobProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@3.9.3">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <refspec>$GERRIT_REFSPEC +refs/heads/*:refs/remotes/origin/*</refspec>
        <url>ssh://jenkins@test-gerrit:29418/TP/GWApp</url>
        <credentialsId>fef9964a-ddb7-4ce6-a445-a99a9e9802c0</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>$GERRIT_REFSPEC</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.BuildChooserSetting>
        <buildChooser class="com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTriggerBuildChooser" plugin="gerrit-trigger@2.27.5">
          <separator>#</separator>
        </buildChooser>
      </hudson.plugins.git.extensions.impl.BuildChooserSetting>
      <hudson.plugins.git.extensions.impl.CleanBeforeCheckout/>
      <hudson.plugins.git.extensions.impl.CloneOption>
        <shallow>false</shallow>
        <noTags>false</noTags>
        <reference>/gerrit_mnt/TP/GWApp.git</reference>
        <depth>0</depth>
        <honorRefspec>false</honorRefspec>
      </hudson.plugins.git.extensions.impl.CloneOption>
    </extensions>
  </scm>
  <assignedNode>sbc-mc-fathers</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTrigger plugin="gerrit-trigger@2.27.5">
      <spec></spec>
      <gerritProjects>
        <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
          <compareType>PLAIN</compareType>
          <pattern>TP/GWApp</pattern>
          <branches>
            <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
              <compareType>ANT</compareType>
              <pattern>**/NextGenCPE</pattern>
            </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
          </branches>
          <disableStrictForbiddenFileVerification>false</disableStrictForbiddenFileVerification>
        </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
      </gerritProjects>
      <dynamicGerritProjects class="empty-list"/>
      <skipVote>
        <onSuccessful>false</onSuccessful>
        <onFailed>false</onFailed>
        <onUnstable>false</onUnstable>
        <onNotBuilt>false</onNotBuilt>
      </skipVote>
      <silentMode>false</silentMode>
      <notificationLevel></notificationLevel>
      <silentStartMode>false</silentStartMode>
      <escapeQuotes>true</escapeQuotes>
      <nameAndEmailParameterMode>PLAIN</nameAndEmailParameterMode>
      <dependencyJobsNames></dependencyJobsNames>
      <commitMessageParameterMode>PLAIN</commitMessageParameterMode>
      <changeSubjectParameterMode>PLAIN</changeSubjectParameterMode>
      <commentTextParameterMode>PLAIN</commentTextParameterMode>
      <buildStartMessage></buildStartMessage>
      <buildFailureMessage></buildFailureMessage>
      <buildSuccessfulMessage></buildSuccessfulMessage>
      <buildUnstableMessage></buildUnstableMessage>
      <buildNotBuiltMessage></buildNotBuiltMessage>
      <buildUnsuccessfulFilepath></buildUnsuccessfulFilepath>
      <customUrl></customUrl>
      <serverName>test-gerrit</serverName>
      <triggerOnEvents>
        <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.events.PluginPatchsetCreatedEvent>
          <excludeDrafts>false</excludeDrafts>
          <excludeTrivialRebase>false</excludeTrivialRebase>
          <excludeNoCodeChange>true</excludeNoCodeChange>
        </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.events.PluginPatchsetCreatedEvent>
      </triggerOnEvents>
      <dynamicTriggerConfiguration>false</dynamicTriggerConfiguration>
      <triggerConfigURL></triggerConfigURL>
      <triggerInformationAction/>
    </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTrigger>
  </triggers>
  <concurrentBuild>true</concurrentBuild>
  <axes>
    <org.jenkinsci.plugins.yamlaxis.YamlAxis plugin="yaml-axis@0.2.0">
      <name>BOARD</name>
      <values>
        <string>boards2review.yml</string>
      </values>
    </org.jenkinsci.plugins.yamlaxis.YamlAxis>
    <hudson.matrix.LabelAxis>
      <name>label</name>
      <values>
        <string>sbc-linux-build</string>
      </values>
    </hudson.matrix.LabelAxis>
  </axes>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/sh -x

date

artifactory_host=${ARTIFACTORY_HOST}
output_folder=${DEPENDENCIES_FOLDER}
User=&quot;$artifactory_user:$artifactory_password&quot;

# find the board that need to be compiled
BOARDNAME=`echo ${BOARD} | cut -f1 -d &apos; &apos; | cut -f2 -d=`
#TARGET=`echo $GERRIT_REFSPEC | sed &apos;s/[^0-9]*//g&apos;`
TARGET=`echo $GERRIT_REFSPEC | sed &apos;s:refs/changes/../::; s:/:-:g&apos;`
echo TARGET=${TARGET} &gt; generated_sbc_version.properties

#rm -f $output_folder/*external_version_data.h

# Check if the image exist already in the Artifactory - if exist, exit without error
if curl -ks https://$artifactory_host/api/storage/sbc-review/com/ac/sbc/Firmware/${TARGET} | grep -q $BOARDNAME; then
  echo ${GERRIT_BRANCH}/$TARGET/$SHORTAUTOPRD exist already... Abort without error;
  echo EXITFLAG=1 &gt;&gt; generated_sbc_version.properties
  exit 0
fi

sudo chmod -R 755 .
sudo chown -R centos:centos .

rm -f build-error.log
cd TrunkPackRam

# Find if this build should use another Opensorce Images with the same Commit change-ID
#chmod 600 ../id_rsa_gerrit
#change=`echo $GERRIT_REFSPEC | cut -d/ -f4`
#ID=$(ssh -p 29418 -i ../id_rsa_gerrit jenkins@test-gerrit gerrit query $change | grep -m1 id: | cut -d: -f2 | sed &apos;s: ::g&apos;)

ID=${GERRIT_CHANGE_ID}
ISSUE=$(echo $GERRIT_CHANGE_COMMIT_MESSAGE | grep Issue: | sed &apos;s/.*Issue: //g; s/ .*//g&apos;)

ls -l ../id_rsa_gerrit
chmod 600 ../id_rsa_gerrit
ssh -p 29418 -i ../id_rsa_gerrit jenkins@test-gerrit gerrit query --current-patch-set \
     change:$ID branch:$GERRIT_BRANCH status:open | \
     grep -A30 OpenSource | grep &apos;project\|revision&apos; &gt; othersCommits.txt || echo ChangeId not found

# Find if this build should use another commit with the same Issue
if [ ! -z &quot;$ISSUE&quot; ]; then 
    echo Search this Issue: $ISSUE...
    ssh -p 29418 -i ../id_rsa_gerrit jenkins@test-gerrit gerrit query --current-patch-set \
     message:$ISSUE branch:$GERRIT_BRANCH status:open | \
     grep -A30 OpenSource | grep &apos;project\|revision&apos; &gt;&gt; othersCommits.txt || echo ChangeId not found
fi

while IFS= read -r line; do
   if echo $line | grep -q project; then path=$(echo $line | cut -d: -f2 | sed &apos;s:TP/::; s: ::g&apos;);
   elif echo $line | grep -q revision; then
     revision=$(echo $line | cut -d: -f2)
     git ls-files --stage ../$path
     git update-index --cacheinfo 160000 $revision $path
     git ls-files --stage ../$path
   fi
done &lt; othersCommits.txt


if [ -e ../OpenSource/$BOARDNAME.deps ]; then
  if [ ! -e GetImages.sh ]; then  curl -ks https://test-gerrit/static/GetImages.sh --output GetImages.sh; fi
  chmod +x GetImages.sh
  ./GetImages.sh $BOARDNAME $artifactory_host $User
  if [ $? -eq 1 ]; then
    echo EXITFLAG=2 &gt;&gt; ../generated_sbc_version.properties
    exit 2; 
  fi
fi

if [ -f MakeBrdVersion.sh ]; then
  NEWTAG=`./MakeBrdVersion.sh`
else
  [ -f ../Shared/Versioning/Utils/MakeBrdVersion.sh ] &amp;&amp; NEWTAG=`../Shared/Versioning/Utils/MakeBrdVersion.sh ../`
fi

#chmod +x MakeBrdVersion.sh
#NEWTAG=`./MakeBrdVersion.sh`
#head -12 Bsps/Common/Include/BrdVersion.h | tail -3

cd ..
echo NEWTAG=${NEWTAG} &gt;&gt; generated_sbc_version.properties
BOARDNAME=${BOARDNAME}`echo ${BOARD} | sed -rn s/.*--sip=yes.*/_SIP/p`
BOARDNAME=${BOARDNAME}`echo ${BOARD} | sed -rn s/.*--lab=yes.*/_LAB/p`
echo BOARD=${BOARD} &gt;&gt; generated_sbc_version.properties
echo BOARDNAME=${BOARDNAME} &gt;&gt; generated_sbc_version.properties

echo EXITFLAG=0 &gt;&gt; generated_sbc_version.properties

BOARD=`echo ${BOARD} | sed -rn s/--user=no//p`
BOARD=`echo ${BOARD} | sed -rn s/--fast=yes//p`
</command>
      <unstableReturn>2</unstableReturn>
    </hudson.tasks.Shell>
    <EnvInjectBuilder plugin="envinject@2.1.6">
      <info>
        <propertiesFilePath>generated_sbc_version.properties</propertiesFilePath>
      </info>
    </EnvInjectBuilder>
    <hudson.tasks.Shell>
      <command>#****************************************************************************
#************************** Probe system status *****************************
#****************************************************************************
#
#cat &gt; sysprobe.sh &lt;&lt; EOF
#today=\$(date +&quot;%Y/%m/%d&quot;)
#echo \$today
##
#outFile=&quot;sysprobe.csv&quot;
#echo \$outFile
#[ -f \$outFile ] &amp;&amp; rm \$outFile
##
#instType=\$(curl -s http://169.254.169.254/latest/meta-data/instance-type)
#hostName=\$(curl -s http://169.254.169.254/latest/meta-data/hostname)
#memrTotl=\$(free -h | gawk &apos;/Mem/ {print \$2}&apos;)
#diskTotl=\$(df -h | grep -e /\$ | gawk &apos;{print \$2}&apos;)
#procType=\$(sudo cat /proc/cpuinfo | grep -m 1 &quot;model name&quot; | cut -d&apos;:&apos; -f2)
#procType=\$(echo \${procType/ /})
##
#echo &quot;\$today&quot; &gt; \$outFile
#echo &quot;Host Name,Instance Type,Processor Type,Total RAM,Total Disk&quot; &gt;&gt; \$outFile
#echo &quot;\$hostName,\$instType,\$procType,\$memrTotl,\$diskTotl&quot; &gt;&gt; \$outFile
##
##
#echo &quot;Memory %,Disk %,Up Time&quot; &gt;&gt; \$outFile
##
#while true; do
#        memrPcnt=\$(free -w | gawk &apos;/Mem/ {printf(&quot;%.2f&quot;), \$3/\$2*100}&apos;)
#        diskPcnt=\$(df | grep -e /\$ | gawk &apos;{print \$5}&apos; | cut -d&apos;%&apos; -f1)
#        echo &quot;\$memrPcnt,\$diskPcnt,\&quot;\$(uptime -p)\&quot;&quot; &gt;&gt; \$outFile
#        sleep 5
#done
#EOF
#

curl -k -O -u admin:$artifactory_password https://artifactory:443/Devops/Tools/AWS/Linux/sysprobe.sh

chmod +x sysprobe.sh
./sysprobe.sh &amp;

#****************************************************************************
#****************************************************************************
#****************************************************************************


if [ &quot;$EXITFLAG&quot; == 1 ]; then exit 0; fi
if [ &quot;$EXITFLAG&quot; == 2 ]; then exit 2; fi

cd TrunkPackRam
( ./buildAll.sh ${BOARD} --fast=yes --user=no --custom-version=-d${BUILD_NUMBER} 2&gt;&amp;1 1&gt;&amp;3 | tee ../build-error.log; ) 3&gt;&amp;1 1&gt;&amp;2

cd ${WORKSPACE}/CompilationResults/ram${BOARDNAME}/TPApp/MPCBin
mv ram${BOARDNAME}.cmp ${BOARDNAME}.cmp
if [ ! -f ram${BOARDNAME}.map ]; then
  echo map file does not found, exit with error
  exit 1
fi

#****************************************************************************
#************************** Probe system status *****************************
#****************************************************************************

echo &quot;Kill probe process&quot;
kill -9 $(ps | grep sysprobe.sh | gawk &apos;{print $1}&apos;)

echo &quot;Archive probe csv &amp; upload to Artifactory&quot;
tar zcfv ${BOARDNAME}.tar.gz sysprobe.csv &amp;&amp; curl -u admin:$artifactory_password -T  &quot;https://artifactory/Devops/Probes/sbc-review/${BUILD_NUMBER}/${BOARDNAME}.tar.gz&quot;

#****************************************************************************
#****************************************************************************
#****************************************************************************


#rename ram${BOARDNAME} ${BOARDNAME}_$NEWTAG-j${BUILD_NUMBER} ram${BOARDNAME}.*
#zip -r ${BOARDNAME}_$NEWTAG-j${BUILD_NUMBER}.map.zip ${BOARDNAME}_$NEWTAG-j${BUILD_NUMBER}.map
#zip -r ${BOARDNAME}_$NEWTAG-j${BUILD_NUMBER}.elf.zip ${BOARDNAME}_$NEWTAG-j${BUILD_NUMBER}.elf
</command>
      <unstableReturn>2</unstableReturn>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <org.jenkins__ci.plugins.flexible__publish.FlexiblePublisher plugin="flexible-publish@0.15.2">
      <publishers>
        <org.jenkins__ci.plugins.flexible__publish.ConditionalPublisher>
          <condition class="org.jenkins_ci.plugins.run_condition.contributed.ShellCondition" plugin="run-condition@1.0">
            <command>#!/bin/sh -x

change=`echo $GERRIT_REFSPEC | cut -d/ -f4`
ps=`echo $GERRIT_REFSPEC | cut -d/ -f5`

echo Run the condition

chmod 600 id_rsa_gerrit

currentPS=$(ssh -p 29418 -i id_rsa_gerrit jenkins@test-gerrit gerrit query --current-patch-set $change | grep -A3 &apos;currentPatchSet:\|type: Verified&apos; | grep &apos;number\|value&apos; | cut -d: -f2)

score=$(echo $currentPS | awk &apos;{print $2}&apos;)
if [ &quot;$score&quot;  == -1 ]; then exit 1; fi

#Check if they are not a new PS - if yes, check if the code was changed

RunPhases=0
if [[ $(echo $currentPS | awk &apos;{print $1}&apos;) -gt $ps ]]; then 
  RunPhases=1
  checkPS=$ps
  ssh -p 29418 -i id_rsa_gerrit jenkins@test-gerrit gerrit query --patch-sets $change | grep  &apos;kind:\|number:&apos; | tail -n +2 | sed &apos;s/ //g&apos; &gt; $change.txt
  # $field Could be: number or kind
  # $kind could be: REWORK, TRIVIAL_REBASE, MERGE_FIRST_PARENT_UPDATE, NO_CODE_CHANGE or NO_CHANGE
  while IFS=: read -r field value; do   
    if [ $field == number ]; then checkPS=$value;
    else
      echo Check PS $checkPS if big from $ps and the PS kind: $value;
      if [[ $checkPS -gt $ps  &amp;&amp; ! $value =~ NO_.*CHANGE ]]; then
        RunPhases=0
    fi; fi
  done &lt; $change.txt
fi

if [[ $RunPhases -eq 0 ]]; then exit 1; fi
echo change=$change &gt; properties.txt
echo ps=$checkPS &gt;&gt; properties.txt
</command>
          </condition>
          <publisherList>
            <org.jenkinsci.plugins.postbuildscript.PostBuildScript plugin="postbuildscript@2.5.1">
              <config>
                <scriptFiles/>
                <groovyScripts/>
                <buildSteps>
                  <org.jenkinsci.plugins.postbuildscript.model.PostBuildStep>
                    <results>
                      <string>SUCCESS</string>
                    </results>
                    <role>SLAVE</role>
                    <buildSteps>
                      <EnvInjectBuilder plugin="envinject@2.1.6">
                        <info>
                          <propertiesFilePath>properties.txt</propertiesFilePath>
                        </info>
                      </EnvInjectBuilder>
                      <hudson.tasks.Shell>
                        <command># sbc-basic-review or sbc-review is running Already?
allRunning=$(curl -ks &quot;https://test-jenkins/computer/api/json?tree=computer\[executors\[currentExecutable\[url\]\],\
oneOffExecutors\[currentExecutable\[url\]\]\]&quot; | \
sed -e &apos;s/&quot;url&quot;:&quot;/\n/g&apos; | sed &apos;s/&quot;}}.*//g&apos; | tail -n +2 | grep sbc-simulator || echo Not found)
if [ &quot;$allRunning&quot; != &quot;Not found&quot; ]; then
  for job in $(echo $allRunning | sed &apos;s: :\n:g&apos; | grep sbc-simulator); do
    if curl -ks &quot;${job}api/json?tree=actions\[parameters\[value\]\]&quot; | grep -q $GERRIT_REFSPEC; then
      echo &quot;sbc-simulator is running, job $job, exit without giving Verified=+1&quot;; 
      exit 0
    fi
  done
fi


echo give grade verified +1

echo Send OK message to Gerrit - $change,$ps
ssh -p 29418  -i id_rsa_gerrit jenkins@test-gerrit gerrit review \
--message  &quot;&apos;Built successfully - $BUILD_URL&apos;&quot; \
--notify NONE --label Verified=1 \
--tag autogenerated:build:sbc-basic-review \
$change,$ps
</command>
                      </hudson.tasks.Shell>
                    </buildSteps>
                  </org.jenkinsci.plugins.postbuildscript.model.PostBuildStep>
                  <org.jenkinsci.plugins.postbuildscript.model.PostBuildStep>
                    <results>
                      <string>FAILURE</string>
                    </results>
                    <role>MASTER</role>
                    <buildSteps>
                      <EnvInjectBuilder plugin="envinject@2.1.6">
                        <info>
                          <propertiesFilePath>properties.txt</propertiesFilePath>
                        </info>
                      </EnvInjectBuilder>
                      <hudson.tasks.Shell>
                        <command>echo give grade verified -1

echo Send OK message to Gerrit - $change,$ps
ssh -p 29418  -i id_rsa_gerrit jenkins@test-gerrit gerrit review \
--message  &quot;&apos;Built failed - $BUILD_URL&apos;&quot; \
--notify OWNER --label Verified=-1 \
--tag autogenerated:build:sbc-basic-review \
$change,$ps
</command>
                      </hudson.tasks.Shell>
                    </buildSteps>
                  </org.jenkinsci.plugins.postbuildscript.model.PostBuildStep>
                </buildSteps>
                <markBuildUnstable>false</markBuildUnstable>
              </config>
            </org.jenkinsci.plugins.postbuildscript.PostBuildScript>
          </publisherList>
          <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$DontRun" plugin="run-condition@1.0"/>
          <executionStrategy class="org.jenkins_ci.plugins.flexible_publish.strategy.FailAtEndExecutionStrategy"/>
        </org.jenkins__ci.plugins.flexible__publish.ConditionalPublisher>
      </publishers>
    </org.jenkins__ci.plugins.flexible__publish.FlexiblePublisher>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>sysprobe.scv</artifacts>
      <allowEmptyArchive>true</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
    <com.chikli.hudson.plugin.naginator.NaginatorPublisher plugin="naginator@1.17.2">
      <regexpForRerun>.*(Need to wait for dependent artifact|JNLP4-connect connection).*</regexpForRerun>
      <rerunIfUnstable>true</rerunIfUnstable>
      <rerunMatrixPart>true</rerunMatrixPart>
      <checkRegexp>true</checkRegexp>
      <regexpForMatrixStrategy>TestChildrenRetriggerMatched</regexpForMatrixStrategy>
      <noChildStrategy>DontRun</noChildStrategy>
      <delay class="com.chikli.hudson.plugin.naginator.FixedDelay">
        <delay>600</delay>
      </delay>
      <maxSchedule>3</maxSchedule>
    </com.chikli.hudson.plugin.naginator.NaginatorPublisher>
  </publishers>
  <buildWrappers>
    <com.michelin.cio.hudson.plugins.copytoslave.CopyToSlaveBuildWrapper plugin="copy-to-slave@1.4.4">
      <includes>id_rsa_gerrit</includes>
      <excludes></excludes>
      <flatten>false</flatten>
      <includeAntExcludes>false</includeAntExcludes>
      <hudsonHomeRelative>false</hudsonHomeRelative>
      <relativeTo>userContent</relativeTo>
    </com.michelin.cio.hudson.plugins.copytoslave.CopyToSlaveBuildWrapper>
    <org.jfrog.hudson.generic.ArtifactoryGenericConfigurator plugin="artifactory@3.1.0">
      <deployerDetails>
        <artifactoryName>artifactory2-pro</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <deployReleaseRepository>
          <keyFromText></keyFromText>
          <keyFromSelect>sbc-review</keyFromSelect>
          <dynamicMode>false</dynamicMode>
        </deployReleaseRepository>
        <stagingPlugin/>
      </deployerDetails>
      <resolverDetails>
        <artifactoryName>artifactory2-pro</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <stagingPlugin/>
      </resolverDetails>
      <deployerCredentialsConfig>
        <credentials>
          <username></username>
          <password></password>
        </credentials>
        <credentialsId></credentialsId>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </deployerCredentialsConfig>
      <resolverCredentialsConfig>
        <credentials>
          <username></username>
          <password></password>
        </credentials>
        <credentialsId></credentialsId>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </resolverCredentialsConfig>
      <useSpecs>false</useSpecs>
      <uploadSpec>
        <spec></spec>
      </uploadSpec>
      <downloadSpec>
        <spec></spec>
      </downloadSpec>
      <deployPattern>${WORKSPACE}/CompilationResults/ram$BOARDNAME/TPApp/MPCBin/${BOARDNAME}.cmp=&gt;com/ac/sbc/Firmware/${TARGET}</deployPattern>
      <resolvePattern></resolvePattern>
      <deploymentProperties></deploymentProperties>
      <deployBuildInfo>true</deployBuildInfo>
      <includeEnvVars>false</includeEnvVars>
      <envVarsPatterns>
        <includePatterns></includePatterns>
        <excludePatterns>*password*,*secret*,*key*</excludePatterns>
      </envVarsPatterns>
      <discardOldBuilds>false</discardOldBuilds>
      <discardBuildArtifacts>true</discardBuildArtifacts>
      <asyncBuildRetention>false</asyncBuildRetention>
      <artifactoryCombinationFilter>label==&quot;sbc-linux-build&quot;</artifactoryCombinationFilter>
      <multiConfProject>true</multiConfProject>
      <customBuildName></customBuildName>
      <overrideBuildName>false</overrideBuildName>
    </org.jfrog.hudson.generic.ArtifactoryGenericConfigurator>
    <EnvInjectBuildWrapper plugin="envinject@2.1.6">
      <info>
        <propertiesContent>artifactory_user=admin</propertiesContent>
        <secureGroovyScript plugin="script-security@1.55">
          <script></script>
          <sandbox>false</sandbox>
        </secureGroovyScript>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
    </EnvInjectBuildWrapper>
    <EnvInjectPasswordWrapper plugin="envinject@2.1.6">
      <injectGlobalPasswords>false</injectGlobalPasswords>
      <maskPasswordParameters>true</maskPasswordParameters>
      <passwordEntries>
        <EnvInjectPasswordEntry>
          <name>artifactory_password</name>
          <value>{AQAAABAAAAAQC9Q9eeTsh0/7+AtlIDNhOldFHEwRntJsY/b1oiztPUQ=}</value>
        </EnvInjectPasswordEntry>
      </passwordEntries>
    </EnvInjectPasswordWrapper>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@1.6.9">
      <template>#${BUILD_NUMBER} ${GERRIT_REFSPEC}</template>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
  <executionStrategy class="hudson.matrix.DefaultMatrixExecutionStrategyImpl">
    <runSequentially>false</runSequentially>
  </executionStrategy>
  <childCustomWorkspace>/home/centos/jenkinsslave/workspace/TP_GWApp</childCustomWorkspace>
</matrix-project>