<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@2.38">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.6.0"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.6.0">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>pmIP</string>
        <string>NEW_TAG</string>
        <string>DeployISO</string>
        <string>OLD_TAG</string>
        <string>mgmtIP</string>
        <string>sanityType</string>
        <string>vqmIP</string>
      </parameters>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description/>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.0.10"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>30</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableResumeJobProperty/>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.27">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>NEW_TAG</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>OLD_TAG</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>DeployISO</name>
          <description/>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>official_iso</string>
              <string>latest_iso</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>mgmtIP</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>vqmIP</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>pmIP</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>sanityType</name>
          <description/>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>full</string>
              <string>short</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit/>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    <EnvInjectJobProperty plugin="envinject@2.3.0">
      <info>
        <scriptContent>cat &lt;&lt;-EOD &gt; /home/centos/.aws/credentials
[default]
aws_access_key_id = ${jenkinsAWSkey}
aws_secret_access_key = ${jenkinsAWSsecret}
EOD

cat /home/centos/.aws/credentials</scriptContent>
        <secureGroovyScript plugin="script-security@1.71">
          <script/>
          <sandbox>false</sandbox>
        </secureGroovyScript>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
      <on>true</on>
      <keepJenkinsSystemVariables>true</keepJenkinsSystemVariables>
      <keepBuildVariables>true</keepBuildVariables>
      <overrideBuildParameters>false</overrideBuildParameters>
    </EnvInjectJobProperty>
    
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.78">
    <script>pipeline {
    agent {
        node {
            label 'test-Sanjer'
            customWorkspace '/jenkins/workspace'
        }
    }
    parameters {
        string(name: 'NEW_TAG', defaultValue: '', description: '')
        string(name: 'OLD_TAG', defaultValue: '', description: '')
        choice(name: 'DeployISO', choices: ['official_iso', 'latest_iso'], description: '')
        string(name: 'mgmtIP', defaultValue: '', description: '')
        string(name: 'vqmIP', defaultValue: '', description: '')
        string(name: 'pmIP', defaultValue: '', description: '')
        choice(name: 'sanityType', choices: ['full', 'short'], description: '')
    }
    stages {
        stage('Install Nodes'){
            failFast true
            parallel {
                stage('Install management') {
                    steps {
                        runInstance('management')
                        build job: 'OVOC-Cluster-DVD-Install', parameters: [
                            string(name: 'TAG', value: "${params.OLD_TAG}"),
                            string(name: 'ServerRole', value: 'management'),
                            string(name: 'ServerIP', value: "${params.mgmtIP}"),
                            string(name: 'DeployISO', value: "${params.DeployISO}")
                        ]
                        build job: 'OVOC-Cluster-DVD-Install', parameters: [
                            string(name: 'TAG', value: "${params.NEW_TAG}"),
                            string(name: 'ServerRole', value: 'management'),
                            string(name: 'ServerIP', value: "${params.mgmtIP}"),
                            string(name: 'DeployISO', value: "${params.DeployISO}")
                        ]
                    }
                }
                stage('Install vqm') {
                    steps {
                        runInstance('vqm')
                        build job: 'OVOC-Cluster-DVD-Install', parameters: [
                            string(name: 'TAG', value: "${params.OLD_TAG}"),
                            string(name: 'ServerRole', value: 'vqm'),
                            string(name: 'ServerIP', value: "${params.vqmIP}"),
                            string(name: 'DeployISO', value: "${params.DeployISO}")
                        ]
                        build job: 'OVOC-Cluster-DVD-Install', parameters: [
                            string(name: 'TAG', value: "${params.NEW_TAG}"),
                            string(name: 'ServerRole', value: 'vqm'),
                            string(name: 'ServerIP', value: "${params.vqmIP}"),
                            string(name: 'DeployISO', value: "${params.DeployISO}")
                        ]
                    }
                }
                stage('Install pm') {
                    steps {
                        runInstance('pm')
                        build job: 'OVOC-Cluster-DVD-Install', parameters: [
                            string(name: 'TAG', value: "${params.OLD_TAG}"),
                            string(name: 'ServerRole', value: 'pm'),
                            string(name: 'ServerIP', value: "${params.pmIP}"),
                            string(name: 'DeployISO', value: "${params.DeployISO}")
                        ]
                        build job: 'OVOC-Cluster-DVD-Install', parameters: [
                            string(name: 'TAG', value: "${params.NEW_TAG}"),
                            string(name: 'ServerRole', value: 'pm'),
                            string(name: 'ServerIP', value: "${params.pmIP}"),
                            string(name: 'DeployISO', value: "${params.DeployISO}")
                        ]
                    }
                }
            }
        }
        stage('Configure and Sanity'){
            steps{
                build job: 'OVOC-Cluster-Config-and-Sanity', parameters: [
                    string(name: 'TAG', value: "${params.NEW_TAG}"),
                    string(name: 'mgmtIP', value: "${params.mgmtIP}"),
                    string(name: 'vqmIP', value: "${params.vqmIP}"),
                    string(name: 'pmIP', value: "${params.pmIP}"),
                    string(name: 'sanityType', value: "${params.sanityType}"),
                    string(name: 'installType', value: 'upgradeCluster')
                ]
            }
        }
    }
}


import groovy.json.JsonSlurper;

def jsonSlurper = new JsonSlurper();

def mgmtIP = ""
def mgmtId = ""
def vqmIP = ""
def vqmId = ""
def pmIP = ""
def pmId = ""


def runInstance(role) {

    println(role)

    def ec2SGId = "sg-77bce41e"
    def ec2SNId = "subnet-35295a5c"
    def ec2iTyp = "t2.2xlarge"
    def ec2Key = "AudioCodes-CICD-Apps"
    def instId = ""
    def ipAddr = ""
    def imageId = ""

	switch(role) {
		case "management":
			imageId = "ami-097a30155f82688fb";
            break;
		case "vqm":
            imageId = "ami-005e7916df1f0ea46";
            break;
		case "pm":
			imageId = "ami-005e7916df1f0ea46";
            break;
	}

    println(imageId)
	
    def jsonSlurper = new JsonSlurper();

    sh 'aws ec2 run-instances --image-id ' + imageId + ' --instance-type ' + ec2iTyp + ' --count 1 --security-group-ids ' + ec2SGId + ' --subnet-id ' + ec2SNId + ' --key-name ' + ec2Key + ' &gt; run-inst.json'

    def runJsonFile = new File("run-inst.json");
    def runJsonObj = jsonSlurper.parse(runJsonFile);
    instId = (runJsonObj['Instances']['InstanceId']).toString().replaceAll("\\[|\\]", "")

    sh 'aws ec2 create-tags --resources ' + instId + ' --tags Key=Name,Value=OVOC_Elst_' + role + '_Sanity'
    sh 'aws ec2 wait instance-status-ok --instance-ids ' + instId
    sh 'aws ec2 describe-instances --instance-ids ' + instId + ' &gt; instance.json'

    def instJsonFile = new File("instance.json");
    def instJsonObj = jsonSlurper.parse(instJsonFile);
    ipAddr = (instJsonObj['Reservations']['Instances']['NetworkInterfaces']['PrivateIpAddress']).toString().replaceAll("\\[|\\]", "")

    switch(role) {
        case "management":
            mgmtId = instId;
            mgmtIP = ipAddr;
            break;
        case "vqm":
            vqmId = instId;
            vqmIP = ipAddr;
            break;
        case "pm":
            pmId = instId;
            pmIP = ipAddr;
            break;
    }
}


</script>
    <sandbox>false</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>