<?xml version="1.1" encoding="UTF-8" standalone="no"?><project>
  <actions/>
  <description>trigger by VoiceAI-review&#13;
&#13;
add version number to UI and to Session-manager (and to MongoDB)&#13;
git archive 3 folders and upload to artifactory under tag folder</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.0.10"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>60</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.27">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit/>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    <EnvInjectJobProperty plugin="envinject@2.3.0">
      <info>
        <secureGroovyScript plugin="script-security@1.71">
          <script/>
          <sandbox>false</sandbox>
        </secureGroovyScript>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
      <on>true</on>
      <keepJenkinsSystemVariables>true</keepJenkinsSystemVariables>
      <keepBuildVariables>true</keepBuildVariables>
      <overrideBuildParameters>false</overrideBuildParameters>
    </EnvInjectJobProperty>
    
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@4.2.2">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <refspec>${GERRIT_REFSPEC}</refspec>
        <url>ssh://jenkins@test-gerrit:29418/TP/Tools/VoiceAIConnector</url>
        <credentialsId>fef9964a-ddb7-4ce6-a445-a99a9e9802c0</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>${GERRIT_REFSPEC}</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.CleanBeforeCheckout>
        <deleteUntrackedNestedRepositories>false</deleteUntrackedNestedRepositories>
      </hudson.plugins.git.extensions.impl.CleanBeforeCheckout>
      <hudson.plugins.git.extensions.impl.BuildChooserSetting>
        <buildChooser class="com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTriggerBuildChooser" plugin="gerrit-trigger@2.30.5">
          <separator>#</separator>
        </buildChooser>
      </hudson.plugins.git.extensions.impl.BuildChooserSetting>
    </extensions>
  </scm>
  <assignedNode>VoiceAI-build</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTrigger plugin="gerrit-trigger@2.30.5">
      <spec/>
      <gerritProjects>
        <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
          <compareType>PLAIN</compareType>
          <pattern>TP/Tools/VoiceAIConnector</pattern>
          <branches>
            <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
              <compareType>ANT</compareType>
              <pattern>**</pattern>
            </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
          </branches>
          <disableStrictForbiddenFileVerification>false</disableStrictForbiddenFileVerification>
        </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
      </gerritProjects>
      <dynamicGerritProjects class="empty-list"/>
      <skipVote>
        <onSuccessful>false</onSuccessful>
        <onFailed>false</onFailed>
        <onUnstable>false</onUnstable>
        <onNotBuilt>false</onNotBuilt>
      </skipVote>
      <silentMode>false</silentMode>
      <notificationLevel>NONE</notificationLevel>
      <silentStartMode>false</silentStartMode>
      <escapeQuotes>true</escapeQuotes>
      <nameAndEmailParameterMode>PLAIN</nameAndEmailParameterMode>
      <dependencyJobsNames/>
      <commitMessageParameterMode>BASE64</commitMessageParameterMode>
      <changeSubjectParameterMode>PLAIN</changeSubjectParameterMode>
      <commentTextParameterMode>BASE64</commentTextParameterMode>
      <buildStartMessage/>
      <buildFailureMessage/>
      <buildSuccessfulMessage/>
      <buildUnstableMessage/>
      <buildNotBuiltMessage/>
      <buildUnsuccessfulFilepath/>
      <customUrl/>
      <serverName>test-gerrit</serverName>
      <triggerOnEvents>
        <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.events.PluginPatchsetCreatedEvent>
          <excludeDrafts>false</excludeDrafts>
          <excludeTrivialRebase>false</excludeTrivialRebase>
          <excludeNoCodeChange>false</excludeNoCodeChange>
          <excludePrivateState>false</excludePrivateState>
          <excludeWipState>false</excludeWipState>
        </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.events.PluginPatchsetCreatedEvent>
        <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.events.PluginDraftPublishedEvent/>
      </triggerOnEvents>
      <dynamicTriggerConfiguration>false</dynamicTriggerConfiguration>
      <triggerConfigURL/>
      <triggerInformationAction/>
    </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTrigger>
  </triggers>
  <concurrentBuild>true</concurrentBuild>
  <customWorkspace>/home/centos/jenkinsslave/workspace/VoiceAI</customWorkspace>
  <builders>
    <hudson.tasks.Shell>
      <command>##
### Add AudioCodes Public certificate to local machine
echo "*** Verify AUDC certificate ***"
curl --version &amp;&gt;/dev/null || (sudo apt update &amp;&amp; sudo apt -y install curl)
if ! curl -s -o /dev/null https://artifactory; then
  echo "Installing AudioCodes CA certificate."
  dist=$(cat /etc/*release* | grep -e "^ID=" | cut -d'=' -f2)
  if [[ "$dist" == "ubuntu" ]]; then
    cert=/usr/local/share/ca-certificates/audc2016.crt
    updtCAcmd="update-ca-certificates"
  elif [[ "$dist" =~ "centos" ]]; then
    cert=/etc/pki/ca-trust/source/anchors/audc2016.crt
    updtCAcmd="update-ca-trust"
  fi
  sudo rm -f $cert
  cat &lt;&lt;-EOL | sudo tee $cert &gt; /dev/null
-----BEGIN CERTIFICATE-----
MIIFuDCCA6CgAwIBAgIQG5DSb8NKUYJK1U6xTLTlRTANBgkqhkiG9w0BAQ0FADBk
MRMwEQYKCZImiZPyLGQBGRYDY29tMRowGAYKCZImiZPyLGQBGRYKYXVkaW9jb2Rl
czEUMBIGCgmSJomT8ixkARkWBGNvcnAxGzAZBgNVBAMTEkF1ZGlvQ29kZXMgQ0Eg
MjAxNjAeFw0xNjA3MTgxNTE3MDdaFw0yNjA3MTgxNTI3MDNaMGQxEzARBgoJkiaJ
k/IsZAEZFgNjb20xGjAYBgoJkiaJk/IsZAEZFgphdWRpb2NvZGVzMRQwEgYKCZIm
iZPyLGQBGRYEY29ycDEbMBkGA1UEAxMSQXVkaW9Db2RlcyBDQSAyMDE2MIICIjAN
BgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAsRwzw6ZL5bHw91zCtH5pV3izRNRZ
15BZQsKD7YHu0nuAzhicr6OcFdJQxVqKmNv67WieawwYzTtGpxBml4SBscmMVqoV
8zVlPrvXkXXOOPRcS5iVt7XkP/euh5pbkB8LBY1XNmqf4vl3LlQPVQ5XIC4zZBzC
HIzteCFX9IS5cx2b0dsoJDu/b4ey7NJhoRwmYsQWr5qJjXtqDfE83+pQEre/KBRR
NEhK8rRBmuhBIQGn5j42YxUjGXXXSU6buSwYMulSN8PjBkhIkhquvEo2XNwwF34g
A1vTLLbsCYLOjsQxbeJigkHWPQeJh7Z0CD7B1SoX5BPrvDigVYlljQuNelY0Pzw0
eY0EKY0Mo7ErM+sIoZMrEnKzGmwYMAndYPMhfq16+49Xx7UPHuduf5/f8FzOkVF4
NAeP2Lcx71V0iZR/urWFBZsLEtiUVv7CtPXUeBXluf3H/G8GVP1PyFe1tBFjxGOQ
K+DXmgeSPg87bTRgMz4qoURNmsPKzpkvw+CEuCITCIqq0f0il13cW00el86vTdUx
8auIK89Nb0gLvnGoXpMGiMRiD8SKA+8KsU+HTv8NsCxtQVGoicRCFBUNTIG4KkwH
EfetYu6Nf4+gctCNPFHEX1Lju2lcJkTrhZvPCRkTRyPeQ0Ey2d8vBfmNJOMqPyqy
IySNJgz4SCT5ricCAwEAAaNmMGQwEwYJKwYBBAGCNxQCBAYeBABDAEEwCwYDVR0P
BAQDAgGGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFMDsJiUHoatHWLX6wXLC
7SGIno0RMBAGCSsGAQQBgjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAb/gMv
PPmZD9Tmx8ktwEPMgiWOU77vjCnlNyhKk+tqXTj4mEXuFyFuy7ZxR4fmGBfe2BZE
Yihw087NUCwftb+fEDlk1VEp0rCk1R07LBL5vjoJaoicUqcj83Junj5JVvjIN2ny
ZCCXwt2sDJovHSJSdbhoo5h0kxLrqKZNnz18UWUDYG9/ZX8wfJLS9vW/Z+PfehgQ
h0BsRwIRrSor6ifjtAXEMN4q+MwDzMYgXRXo5+TVVcLQ0DfQy8qWWGjHMIziaIv6
ZDUrnr+9R+e6KWL5gzSlNENteK7QtvTi6EyB4+wO5OgTu5X2GkZGxTkXrX7zIie7
IKqqO/OwLOXqZA+DwsiDdoAxmh7XrN1HX92we8ZIZyp53Ve/AWBfhXWcV1x6uTGP
6c7V188fOxh9c8w1NZnCG9ZY6BB4A612CxPOVloyx5asNA1hnxzIFUNVaEmN5uHt
8zToCQ/OiWjrIBdnjR3uFWKn4JMPIs7Mok8TYyFL4ys3WjIScjcY2wdBIkNRvcIR
vOq50OLigP9cF14t9xac12YzfqYEJ2CSdCNgD784+sBgsbf0711jmrTrwVXIwjk3
peitA/lOlYGE3DAptUoSpBpHOsB1BJEJ4Hz7MYO7tA8kH00WzuEx5Kw93voG76JY
TlFgcDc2WETWYgFeiv5Yx4AQsmbJtegjBcQJ6w==
-----END CERTIFICATE-----
EOL
  sudo ${updtCAcmd}
  sleep 3
  sudo systemctl restart docker
else
  echo "Skipped installing AudioCodes CA certificate."
fi

## Create .netrc
[[ -f ~/.netrc ]] &amp;&amp; rm ~/.netrc
echo "machine docker-voice-ai.artifactory.corp.audiocodes.com" &gt;&gt; ~/.netrc
echo "login jenkins" &gt;&gt; ~/.netrc
echo "password ${jenkinsPass}" &gt;&gt; ~/.netrc
echo "machine docker-voice-ai.test-artifactory.corp.audiocodes.com" &gt;&gt; ~/.netrc
echo "login jenkins" &gt;&gt; ~/.netrc
echo "password ${jenkinsPass}" &gt;&gt; ~/.netrc

## Install &amp; configure mutt
sudo yum -y install mutt

cat &lt;&lt;EOF &gt; ~/.muttrc
# About Me
set from = "jenkins@audiocodes.com"
set realname = "Jenkins DevOps"
set smtp_url = "smtp://aclmail.corp.audiocodes.com/"

# Where to put the stuff
set header_cache = "~/.mutt/cache/headers"
set message_cachedir = "~/.mutt/cache/bodies"
set certificate_file = "~/.mutt/certificates"
EOF

mutt -s "TEST 1" yuvaly@audiocodes.com</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>## Runtime vars
#BRANCH=`git branch --no-color -r --contains HEAD | grep -v -e '-&gt;' | head -1 | awk -F'/' '{print $NF}'`
#OLDTAG=`git describe --first-parent --tags --abbrev=0 HEAD^`
#NEWTAG=`echo ${commit_ID} | awk -F/ '{print $NF}'`

AuthorCommitter=`git log --first-parent --pretty=format:"%aN%n%cN" $OLDTAG..HEAD | sort -u | sed s/$/\;/g`
description=$(git describe)

echo "export description=${description}" &gt; env.properties

## change in some files some parameters to build number
cd ${WORKSPACE}
echo "{\"version\": \"${NEWTAG}\"}" &gt; version.json
#sed -i -- "s/%version%/${BUILD_NUMBER}/g" ${WORKSPACE}/session-manager/config.ts
#sed -i -- "s/%version%/${BUILD_NUMBER}/g" ${WORKSPACE}/ui/config.ts

### Build the project
## Set docker vars
DOCKER_URL="docker-voice-ai.artifactory.corp.audiocodes.com"
DOCKER_REG="${DOCKER_URL}"
# Used in build.sh
export DOCKER_REG_PREFIX="${DOCKER_URL}/"
export GIT_BRANCH=${GERRIT_BRANCH}

## Login to docker registry on Artifactory
echo ${jenkinsPass} | docker login -u jenkins --password-stdin ${DOCKER_REG}

## Pull latest images from Artifactory &amp; get their hashes
echo "Pull latest images from Artifactory (those that are tagged with \${GERRIT_BRANCH})."
remoteImgs=$(curl -u jenkins:${jenkinsPass} -k https://${DOCKER_URL}/v2/_catalog | jq -r '.[][]')
echo $remoteImgs

## If there is no BRANCH tag yet on artifactory - use previous branch
LATESTTAG=$(curl -k -u jenkins:${jenkinsPass} https://docker-voice-ai.artifactory.corp.audiocodes.com/v2/vag-version/tags/list | jq -r '.tags[]' | egrep ^[[:digit:]]+\.[[:digit:]]+$ | sort | tail -n 1)

if [[ ( "${GERRIT_BRANCH}" &gt; "${LATESTTAG}" ) ]]; then
    PULLBRANCH="${LATESTTAG}"
else
    PULLBRANCH="${GERRIT_BRANCH}"
fi

HASHES=""

for ri in ${remoteImgs}; do
    docker pull ${DOCKER_REG}/${ri}:${PULLBRANCH}
    docker tag ${DOCKER_REG}/${ri}:${PULLBRANCH} ${ri}:${GERRIT_BRANCH}

    hash=$(docker images ${ri}:${GERRIT_BRANCH} --format "{{.ID}}")
    HASHES="${HASHES}${hash} "
done

## Run build script
echo "***** Steart build *****"
cd ${WORKSPACE}
sh build.sh
ret_value=$?

echo "script Return Value: $ret_value"

if [[ "$ret_value" -ne "0" ]]
then
	exit 1
fi

### Pushing docker images to Artifactory
echo "Pushing Docker images to Artifactory."

## Login to docker registry
echo "*** Step 1 - Login to docker registry."
echo ${jenkinsPass} | docker login -u jenkins --password-stdin ${DOCKER_URL}

## Tagging &amp; pushing images to Artifactory
echo "*** Step 2 - Tagging &amp; pushing images to Artifactory."
for outcomeImage in $(docker images vag-* --format "{{.Repository}}:{{.Tag}}:{{.ID}}" | grep "${BRANCH}" | grep -v "vag-common"); do
    imageName=$(echo $outcomeImage | gawk -F: '{print $1}')
    imageID=$(echo $outcomeImage | gawk -F: '{print $3}')
    echo "***************************************************"
    
    if [[ ! $(echo $HASHES | grep ${imageID}) ]]; then
        docker tag ${imageID} ${DOCKER_REG}/${imageName}:${description}
        docker push ${DOCKER_REG}/${imageName}:${description}
    else
        echo "*** No change in docker image \"${imageName}\". Image not pushed to repository. ***"
    fi
done

echo "Finished docker push to Artifactory."
</command>
    </hudson.tasks.Shell>
    <EnvInjectBuilder plugin="envinject@2.3.0">
      <info>
        <propertiesFilePath>env.properties</propertiesFilePath>
      </info>
    </EnvInjectBuilder>
  </builders>
  <publishers>
    <hudson.plugins.postbuildtask.PostbuildTask plugin="postbuild-task@1.8">
      <tasks>
        <hudson.plugins.postbuildtask.TaskProperties>
          <logTexts>
            <hudson.plugins.postbuildtask.LogProperties>
              <logText>received unexpected HTTP status: 500 Internal Server Error</logText>
              <operator>AND</operator>
            </hudson.plugins.postbuildtask.LogProperties>
          </logTexts>
          <EscalateStatus>false</EscalateStatus>
          <RunIfJobSuccessful>false</RunIfJobSuccessful>
          <script>#sudo yum -y install mutt&#13;
#mutt -s "docker push failed ${BUILD_URL}" #shukyr@audiocodes.com,yuvaly@audiocodes.com</script>
        </hudson.plugins.postbuildtask.TaskProperties>
      </tasks>
    </hudson.plugins.postbuildtask.PostbuildTask>
    <hudson.plugins.emailext.ExtendedEmailPublisher plugin="email-ext@2.61">
      <recipientList>$DEFAULT_RECIPIENTS</recipientList>
      <configuredTriggers>
        <hudson.plugins.emailext.plugins.trigger.FailureTrigger>
          <email>
            <subject>$PROJECT_DEFAULT_SUBJECT</subject>
            <body>$PROJECT_DEFAULT_CONTENT</body>
            <recipientProviders>
              <hudson.plugins.emailext.plugins.recipients.DevelopersRecipientProvider/>
            </recipientProviders>
            <attachmentsPattern/>
            <attachBuildLog>false</attachBuildLog>
            <compressBuildLog>false</compressBuildLog>
            <replyTo>$PROJECT_DEFAULT_REPLYTO</replyTo>
            <contentType>project</contentType>
          </email>
        </hudson.plugins.emailext.plugins.trigger.FailureTrigger>
      </configuredTriggers>
      <contentType>default</contentType>
      <defaultSubject>$DEFAULT_SUBJECT</defaultSubject>
      <defaultContent>$DEFAULT_CONTENT</defaultContent>
      <attachmentsPattern/>
      <presendScript>$DEFAULT_PRESEND_SCRIPT</presendScript>
      <postsendScript>$DEFAULT_POSTSEND_SCRIPT</postsendScript>
      <attachBuildLog>false</attachBuildLog>
      <compressBuildLog>false</compressBuildLog>
      <replyTo>$DEFAULT_REPLYTO</replyTo>
      <saveOutput>false</saveOutput>
      <disabled>false</disabled>
    </hudson.plugins.emailext.ExtendedEmailPublisher>
    <hudson.tasks.Mailer plugin="mailer@1.32">
      <recipients>yuvaly</recipients>
      <dontNotifyEveryUnstableBuild>true</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
  </publishers>
  <buildWrappers>
    <org.jenkinsci.plugins.credentialsbinding.impl.SecretBuildWrapper plugin="credentials-binding@1.22">
      <bindings>
        <org.jenkinsci.plugins.credentialsbinding.impl.UsernamePasswordMultiBinding>
          <credentialsId>centos</credentialsId>
          <usernameVariable/>
          <passwordVariable/>
        </org.jenkinsci.plugins.credentialsbinding.impl.UsernamePasswordMultiBinding>
      </bindings>
    </org.jenkinsci.plugins.credentialsbinding.impl.SecretBuildWrapper>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.9"/>
    <hudson.plugins.ansicolor.AnsiColorBuildWrapper plugin="ansicolor@0.6.2">
      <colorMapName>xterm</colorMapName>
    </hudson.plugins.ansicolor.AnsiColorBuildWrapper>
    <org.jfrog.hudson.generic.ArtifactoryGenericConfigurator plugin="artifactory@3.6.1">
      <deployerDetails>
        <artifactoryName>artifactory2-pro</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <stagingPlugin/>
      </deployerDetails>
      <resolverDetails>
        <artifactoryName>artifactory2-pro</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <stagingPlugin/>
      </resolverDetails>
      <deployerCredentialsConfig>
        <credentialsId/>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </deployerCredentialsConfig>
      <resolverCredentialsConfig>
        <credentialsId/>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </resolverCredentialsConfig>
      <useSpecs>true</useSpecs>
      <uploadSpec>
        <spec>{
    "files": [
        {
            "pattern": "docker-compose-vag-*-g*.yml",
            "target": "docker-voice-ai-files/review/${GERRIT_CHANGE_NUMBER}-${GERRIT_PATCHSET_NUMBER}/"
        }
    ]
}
</spec>
      </uploadSpec>
      <downloadSpec>
        <spec/>
      </downloadSpec>
      <deployPattern>${WORKSPACE}/docker-compose-*.yml=&gt;review

</deployPattern>
      <resolvePattern/>
      <deploymentProperties/>
      <deployBuildInfo>true</deployBuildInfo>
      <includeEnvVars>false</includeEnvVars>
      <envVarsPatterns>
        <includePatterns/>
        <excludePatterns>*password*,*secret*,*key*</excludePatterns>
      </envVarsPatterns>
      <discardOldBuilds>false</discardOldBuilds>
      <discardBuildArtifacts>true</discardBuildArtifacts>
      <asyncBuildRetention>false</asyncBuildRetention>
      <multiConfProject>false</multiConfProject>
      <customBuildName/>
      <overrideBuildName>false</overrideBuildName>
    </org.jfrog.hudson.generic.ArtifactoryGenericConfigurator>
    <EnvInjectPasswordWrapper plugin="envinject@2.3.0">
      <injectGlobalPasswords>true</injectGlobalPasswords>
      <maskPasswordParameters>true</maskPasswordParameters>
      <passwordEntries>
        <EnvInjectPasswordEntry>
          <name>jenkinsPass</name>
          <value>{AQAAABAAAAAQOeD+AbXDOo0B0GhQbwBlinW2va2qC7PNuTqkFLsoh0w=}</value>
        </EnvInjectPasswordEntry>
      </passwordEntries>
    </EnvInjectPasswordWrapper>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@2.0.3">
      <template>#${BUILD_NUMBER}__${description}__change:${GERRIT_CHANGE_NUMBER}</template>
      <descriptionTemplate/>
      <runAtStart>false</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>