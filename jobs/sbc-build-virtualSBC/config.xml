<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.27">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>Tag</name>
          <description>Could be any desired TAG (without the &apos;F&apos; prefix) or branch name
e.g.:7.20A.252.001</description>
          <defaultValue>7.20A.</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>Environment</name>
          <description></description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>kvm</string>
              <string>azure</string>
              <string>aws</string>
              <string>hyperv</string>
              <string>vmware</string>
              <string>google</string>
              <string>all</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@3.9.3">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>ssh://jenkins@test-gerrit:29418/Utils</url>
        <credentialsId>fef9964a-ddb7-4ce6-a445-a99a9e9802c0</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>*/master</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.CleanBeforeCheckout/>
    </extensions>
  </scm>
  <assignedNode>sbc-VirtualSSBC</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#get Gerrit BRANCH
cd ${WORKSPACE}/..
cd GWApp
git -c http.sslverify=false fetch || true
git checkout ${Tag} || true
Branch=`git branch --no-color -r --contains HEAD | grep -v -e &apos;-&gt;&apos; | head -1 | awk -F&apos;/&apos; &apos;{print $NF}&apos;`
cd ${WORKSPACE}
arti_user=admin
user=${arti_user}:${arti_password}
#copy all scripts related files from  sub directory MediantVEBuild to WORKSPACE
cp -R MediantVEBuild/* ${WORKSPACE}

artifactory_host=artifactory
artifactory_url=https://$artifactory_host/sbc-release/com/ac/sbc/ISO
curlHasFailed=&quot;False&quot;
JENKINS_URL=&apos;https://test-jenkins&apos;
JOB_NAME=&apos;job/sbc-iso&apos;
JOB_TOKEN=&apos;sbcCreateISO&apos;
mkdir artifacts
#get the relevant ISO FILE
curl -k -u ${user} --insecure -fO &quot;${artifactory_url}/${Branch}/${Tag}/sbc-F${Tag}.iso&quot; || curlHasFailed=&quot;True&quot;
if [[ &quot;$curlHasFailed&quot; == &quot;True&quot; ]]
then 
	echo &quot;sbc-F${Tag}.iso not Exists in Artifactory&quot;
    echo &quot;****************Create a new ISO*******************&quot;
	#trigger sbc-iso job to create ISO
	curl --insecure -v -X POST $JENKINS_URL/$JOB_NAME/buildWithParameters?token=${JOB_TOKEN} --data &quot;Tag=${Tag}&quot; &gt;output 2&gt;&amp;1

    cat output
	#check if job is in queue
	queueURL=$(cat output | grep Location | cut -d&apos; &apos; -f3)
    queueURL=$(echo $queueURL | tr -d &apos;\r\n&apos;)
    echo $queueURL
	#failed to start the build
	if [[ $queueURL == &quot;&quot; ]]
	then
		echo &quot;Failed to start the build remotely Exiting the build&quot;
		exit 1
	fi
    #if not find ERROR 404 or EXECUTABLE (BUILD NUMBER) DONT FAIL THE BUILD
    set +e
	inQueue=$(curl --insecure -X GET ${queueURL}api/json | grep &quot;executable&quot;) 
	ERROR=$(curl --insecure -X GET ${queueURL}api/json | grep &quot;Error 404&quot;)
	queueJson=$(curl --insecure -X GET ${queueURL}api/json?pretty=true)
	while [[ &quot;$inQueue&quot; == &quot;&quot; &amp;&amp; $ERROR == &quot;&quot; ]]
	do
    	echo &quot;************BUILD STILL IN QUEUE**************************&quot;
		sleep 20
		buildNumber=$(curl --insecure -X GET ${queueURL}api/json?pretty=true | grep number)
		inQueue=$(curl --insecure -X GET ${queueURL}api/json | grep &quot;executable&quot;)
        echo $inQueue
		ERROR=$(curl --insecure -X GET ${queueURL}api/json | grep &quot;Error 404&quot;)
        echo $ERROR
	done
    set -e
	if [[ $ERROR != &quot;&quot; ]]
	then
		echo &quot;Failed to start the job after been in queue... Exit the build&quot;
		exit 1
	fi
	buildNumber=$(echo $buildNumber | cut -d&apos;:&apos; -f2 |sed s&apos;/[,&quot; ]//g&apos;)
    echo $buildNumber
	#check if job is running
	JOB_URL=$JENKINS_URL/$JOB_NAME/$buildNumber/api/json
	curl --insecure --silent $JOB_URL | grep result\&quot;:null &gt; /dev/null
	GREP_RETURN_CODE=$?
	# Poll every thirty seconds until the build is finished (if result is 0 its &quot;IN PROGRESS&quot; if result is 1 the job FINISHED running	
    set +e
	while [ $GREP_RETURN_CODE -eq 0 ]
	do
    	echo &quot;************BUILD IS RUNNING**************************&quot;
    	sleep 240
    	# Grep will return 0 while the build is running
    	curl --insecure --silent $JOB_URL | grep result\&quot;:null &gt; /dev/null
    	GREP_RETURN_CODE=$?
	done
    set -e
    #check JOB STATUS IF PASSED OR FAILED
	JOB_STATUS=$(curl --insecure -X GET $JENKINS_URL/$JOB_NAME/$buildNumber/api/json?pretty=true | grep result | cut -d&apos;:&apos; -f2 | sed &apos;s/[&quot;, ]//g&apos;)
    echo $JOB_STATUS
	if [[ &quot;$JOB_STATUS&quot; == &quot;FAULURE&quot; ]]
	then
		echo &quot;Failed to create ISO in job sbc-iso build number $buildNumber&quot;
        exit 1
	fi
    echo &quot;****************Finish Creating a new ISO*******************&quot;
    #get the relevant ISO FILE
    curlHasFailed=&quot;False&quot;
	curl -k -u ${user} --insecure -fO &quot;${artifactory_url}/${Branch}/${Tag}/sbc-F${Tag}.iso&quot; || curlHasFailed=&quot;True&quot;
	if [[ &quot;$curlHasFailed&quot; == &quot;True&quot; ]]
	then 
		echo &quot;sbc-F${Tag}.iso not Exists in Artifactory&quot;
        exit 1
   fi
    
fi
EnvironmentList=(&quot;kvm&quot; &quot;azure&quot; &quot;aws&quot; &quot;hyperv&quot; &quot;vmware&quot; &quot;google&quot;)
# if Environment = all then run all environments
if [[ &quot;$Environment&quot; == &quot;all&quot; ]]
then
	for FLAVOR in ${EnvironmentList[@]}
	do
  		cd ${WORKSPACE}
		./build_sbc.sh --flavor=${FLAVOR} --iso=${WORKSPACE}/sbc-F${Tag}.iso --baseline=${Tag} --outputdir=${WORKSPACE}/artifacts
	done
else
# run the Environment that the user choosed
./build_sbc.sh --flavor=${Environment} --iso=${WORKSPACE}/sbc-F${Tag}.iso --baseline=${Tag} --outputdir=${WORKSPACE}/artifacts
fi




echo &quot;Branch=${Branch}&quot; &gt; properties

</command>
    </hudson.tasks.Shell>
    <EnvInjectBuilder plugin="envinject@2.1.6">
      <info>
        <propertiesFilePath>properties</propertiesFilePath>
      </info>
    </EnvInjectBuilder>
  </builders>
  <publishers>
    <hudson.tasks.Mailer plugin="mailer@1.20">
      <recipients>ben.magriso shuky.riechard</recipients>
      <dontNotifyEveryUnstableBuild>false</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
    <hudson.plugins.emailext.ExtendedEmailPublisher plugin="email-ext@2.61">
      <recipientList>cc:ben.magriso@audiocodes.com</recipientList>
      <configuredTriggers>
        <hudson.plugins.emailext.plugins.trigger.SuccessTrigger>
          <email>
            <subject>$PROJECT_DEFAULT_SUBJECT</subject>
            <body>$PROJECT_DEFAULT_CONTENT</body>
            <recipientProviders>
              <hudson.plugins.emailext.plugins.recipients.RequesterRecipientProvider/>
              <hudson.plugins.emailext.plugins.recipients.ListRecipientProvider/>
            </recipientProviders>
            <attachmentsPattern></attachmentsPattern>
            <attachBuildLog>false</attachBuildLog>
            <compressBuildLog>false</compressBuildLog>
            <replyTo>$PROJECT_DEFAULT_REPLYTO</replyTo>
            <contentType>project</contentType>
          </email>
        </hudson.plugins.emailext.plugins.trigger.SuccessTrigger>
      </configuredTriggers>
      <contentType>default</contentType>
      <defaultSubject>Build Virtual SBC for ${TAG} was created successfully</defaultSubject>
      <defaultContent>${TAG} virtual SBC artifacts:
https://artifactory/sbc-release/com/ac/sbc/VSSBC/${Branch}/${TAG}</defaultContent>
      <attachmentsPattern></attachmentsPattern>
      <presendScript>$DEFAULT_PRESEND_SCRIPT</presendScript>
      <postsendScript>$DEFAULT_POSTSEND_SCRIPT</postsendScript>
      <attachBuildLog>false</attachBuildLog>
      <compressBuildLog>false</compressBuildLog>
      <replyTo>$DEFAULT_REPLYTO</replyTo>
      <saveOutput>false</saveOutput>
      <disabled>false</disabled>
    </hudson.plugins.emailext.ExtendedEmailPublisher>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.34">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
    <org.jfrog.hudson.generic.ArtifactoryGenericConfigurator plugin="artifactory@3.1.0">
      <deployerDetails>
        <artifactoryName>artifactory2-pro</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <deployReleaseRepository>
          <keyFromText></keyFromText>
          <keyFromSelect>sbc-release</keyFromSelect>
          <dynamicMode>false</dynamicMode>
        </deployReleaseRepository>
        <stagingPlugin/>
      </deployerDetails>
      <resolverDetails>
        <artifactoryName>artifactory2-pro</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <stagingPlugin/>
      </resolverDetails>
      <deployerCredentialsConfig>
        <credentials>
          <username></username>
          <password></password>
        </credentials>
        <credentialsId></credentialsId>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </deployerCredentialsConfig>
      <resolverCredentialsConfig>
        <credentials>
          <username></username>
          <password></password>
        </credentials>
        <credentialsId></credentialsId>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </resolverCredentialsConfig>
      <useSpecs>false</useSpecs>
      <uploadSpec>
        <spec></spec>
      </uploadSpec>
      <downloadSpec>
        <spec></spec>
      </downloadSpec>
      <deployPattern>${WORKSPACE}/artifacts/*=&gt;com/ac/sbc/VSSBC/${Branch}/${TAG}</deployPattern>
      <resolvePattern></resolvePattern>
      <deploymentProperties></deploymentProperties>
      <deployBuildInfo>false</deployBuildInfo>
      <includeEnvVars>false</includeEnvVars>
      <envVarsPatterns>
        <includePatterns></includePatterns>
        <excludePatterns>*password*,*secret*,*key*</excludePatterns>
      </envVarsPatterns>
      <discardOldBuilds>false</discardOldBuilds>
      <discardBuildArtifacts>true</discardBuildArtifacts>
      <asyncBuildRetention>false</asyncBuildRetention>
      <multiConfProject>false</multiConfProject>
      <customBuildName></customBuildName>
      <overrideBuildName>false</overrideBuildName>
    </org.jfrog.hudson.generic.ArtifactoryGenericConfigurator>
    <EnvInjectPasswordWrapper plugin="envinject@2.1.6">
      <injectGlobalPasswords>false</injectGlobalPasswords>
      <maskPasswordParameters>true</maskPasswordParameters>
      <passwordEntries>
        <EnvInjectPasswordEntry>
          <name>arti_password</name>
          <value>{AQAAABAAAAAQdM/vO50Iix/WCB62sm15uBlgZZ6ecaFzaeaeNkdwOck=}</value>
        </EnvInjectPasswordEntry>
      </passwordEntries>
    </EnvInjectPasswordWrapper>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@1.6.9">
      <template>#${BUILD_NUMBER}_${Tag}_${Environment}</template>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>