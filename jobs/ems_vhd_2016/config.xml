<?xml version="1.1" encoding="UTF-8" standalone="no"?><project>
  <actions/>
  <description>Create Hyper-V VM for ovoc server official release</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.0.10"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.27">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>TAG</name>
          <description/>
          <defaultValue/>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>BaseVM</name>
          <description/>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>ovoc-7.6-base</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>Brand</name>
          <description>Branded ISO</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>AudioCodes</string>
              <string>Nuera</string>
              <string>NEC</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>RunSanity</name>
          <description>Run sanity tests</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit/>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@4.2.2">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>ssh://jenkins@test-gerrit:29418/EMS/ovoc_server.git</url>
        <credentialsId>fef9964a-ddb7-4ce6-a445-a99a9e9802c0</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>refs/tags/server_${TAG}</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <browser class="hudson.plugins.git.browser.GitBlitRepositoryBrowser">
      <url/>
      <projectName/>
    </browser>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.CleanBeforeCheckout>
        <deleteUntrackedNestedRepositories>false</deleteUntrackedNestedRepositories>
      </hudson.plugins.git.extensions.impl.CleanBeforeCheckout>
      <hudson.plugins.git.extensions.impl.CloneOption>
        <shallow>true</shallow>
        <noTags>false</noTags>
        <reference/>
        <timeout>30</timeout>
        <depth>10</depth>
        <honorRefspec>false</honorRefspec>
      </hudson.plugins.git.extensions.impl.CloneOption>
    </extensions>
  </scm>
  <assignedNode>ems_ova</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>##################### Fixing Sanity scripts to fit Hyper-V build ######################
cd ${WORKSPACE}

sed -i 's/Waiting 300/Waiting 500/g' EMS/VersionRelease/SanityReboot.py
sed -i 's/time.sleep(300)/time.sleep(500)/g' EMS/VersionRelease/SanityReboot.py
#######################################################################################


#######################################################################################
#######################################################################################
# NOTE: It is impossible to pass local vars to the powershell command inside
# the ssh command.
#    The solution is to create a variable that holds the full ssh command -
#    (When using Windows path, the back-slashes must be escaped with a back-slash
#    SSHCMD="powershell -c 'Some-PScommand ${local_var} C:\\windows\\path\\${local_var}"
#    echo $SSHCMD | ssh centos@${HostIP}
#######################################################################################
#######################################################################################

# Set the following values to fit your need
vmHostIP="10.7.10.117"
netMask="16"
DefaultGW="10.7.0.1"
vmip="10.7.10.171"
HyperV="2016"
FullTesting="0"

## Get current branch
# Get the build from the TAG
BLD=`echo $TAG | cut -d. -f3`
# Calculate the branch
if [[ ${#BLD} == 3 ]]; then
	BRANCH=${TAG:0:3}
else
	# Build is 4 digits. We set the branch according to the most significant digit (thousends) - MSD
	MSD=${TAG:4:1}
    BRANCH="${TAG:0:3}.${MSD}XXX"
fi

rm  -f /tmp/noDest.err || true
if [[ ! -d /home/centos/data/output/ISO_Files/OVOC_${BRANCH}/DVD5_Virtual ]]; then
    echo "***********************************************************************"
    echo "***********************************************************************"
    echo "***********************************************************************"
    echo "$(date) : No destination folder for branch ${BRANCH} on NetApp !!!" &gt; /tmp/noDest.err
    echo "***********************************************************************"
    echo "***********************************************************************"
    echo "***********************************************************************"
    exit 1
fi

## Check that TAG matches BaseVM version
BaseVM_VER=`echo $BaseVM | cut -d'-' -f2 | gawk -v FS=. '{ print $1"."$2 }'`
#if [[ "${TAG:0:3}" != "$BaseVM_VER" ]]; then
#	exit -1
#fi

cd ${WORKSPACE}

# Create a new log file
now=`date +"%Y%m%d-%H%M%S"`
logfile="${WORKSPACE}/ems_ovoc_ova_$now.log"
[[ -f $logfile  ]] &amp;&amp; rm $logfile
touch $logfile


echo "$(date) : *****************  START  ******************"
echo
echo
echo "$(date) : Check if this version exists on NetApp"
if [[ -f /home/centos/data/output/ISO_Files/OVOC_${BRANCH}/DVD5_Virtual/${TAG}/OVOC_HyperV-${HyperV}_${TAG}.7z ]]; then
	echo "$(date) : Archived Hyper-V VM already exists on NetApp"
    exit -1
fi

###################################################################################################
# Check &amp; delete old ovoc servers

# check and delete old ovoc server vm`s
SSHCMD="powershell -c 'Get-VM -VMName \"*ovoc*\" | %{Stop-VM \$_}'"
echo $SSHCMD | ssh centos@${vmHostIP}
SSHCMD="powershell -c 'Get-VM -VMName \"*ovoc*\" | %{Remove-VM -f \$_}'"
echo $SSHCMD | ssh centos@${vmHostIP}

# Delete old remnants from hypervisor host
SSHCMD="powershell -c 'Remove-Item -Force -Recurse V:\\HVWORKSPACE\\*'"
echo $SSHCMD | ssh centos@${vmHostIP}
SSHCMD="powershell -c 'Remove-Item -Force -Recurse V:\\Exports\\*'"
echo $SSHCMD | ssh centos@${vmHostIP}
SSHCMD="powershell -c 'Remove-Item -Force -Recurse V:\\Versions\\*'"
echo $SSHCMD | ssh centos@${vmHostIP}

###################################################################################################
# Prepare basic ovoc server (DVD 1 &amp; 2)VM from BaseVM

# UnZip archived base vm
SSHCMD="powershell -c 'Expand-7zip -ArchiveFileName V:\\baseVMs\\$BaseVM.7z -TargetPath V:\\HVWORKSPACE\\${TAG}'"
echo $SSHCMD | ssh centos@${vmHostIP}

# create a new VM from $BaseVM (VM files are under v:\base (/cygdrive/v/base))
echo "$(date) : creating new base ovoc server VM from $BaseVM"
SSHCMD="powershell -c 'Get-ChildItem -Recurse V:\\HVWORKSPACE\\${TAG} -Filter *.vmcx | Select -ExpandProperty FullName | Import-VM -Register'"
echo $SSHCMD | ssh centos@${vmHostIP}
SSHCMD="powershell -c 'Get-VM -VMName \"*ovoc*\" | Set-VMMemory -DynamicMemoryEnabled \$false'"
echo $SSHCMD | ssh centos@${vmHostIP}
SSHCMD="powershell -c 'Get-VM -VMName \"*ovoc*\" | Start-VM'"
echo $SSHCMD | ssh centos@${vmHostIP}


if [ $? -ne 0 ]; then
    echo "$(date) : Deploy new VM has failed - check ems_ovoc_vm_log.out"
    exit
fi

# Wait for ovoc server power on
#isUp $vmHostIP $vmid || exit
echo "$(date) : sleep 5 min."
sleep 300


# Update ovoc server /etc/hosts file with DevOps servers
sshpass -p "$ems_pass" ssh -o StrictHostKeyChecking=no acems@${vmip} su - &lt;&lt; EOF
$su_pass
#cp /etc/hosts /etc/hosts.keep
#echo -e "172.16.133.170\tartifactory\n172.16.143.99\ttest-artifactory\n172.16.146.146\tjenkins\n172.16.143.181\ttest-jenkins" &gt;&gt; /etc/hosts
echo -e "search corp.audiocodes.com\nnameserver 10.1.1.10\nnameserver 10.1.1.6" &gt; /etc/resolv.conf
EOF

###################################################################################################
# Install DVD 3 on basic vovoc server

# if branch is 7.4 then we dont run this step
# in branch is higher than 7.4 then we need to arrange the directory EMS/target
# so it will contain only the 5 jar files we copied from build-ovoc job archive
# and all executables
cd ${WORKSPACE}/EMS
[[ ! -f target ]] &amp;&amp; mkdir target
chmod 0775 target
cd target
rm -rf *
cp ${WORKSPACE}/ovaPreRequisites/* .
chmod 0775 *
cd ${WORKSPACE}

# Set Network
echo "$(date) : Applying DVD 3"
cd EMS/VersionRelease

# setNetwork.py for version 7.6 and later calculate netmask by itself
(python2.7 setNetwork.py $vmip sanity) || (echo "$(date) : Failed network setting" &amp;&amp; exit -1)

cd ${WORKSPACE}

# ovoc server was rebooted, so -
# Wait for ovoc server power on
#isUp ${vmHostIP} $vmid || exit -2
echo "$(date) : sleep 5 min."
sleep 300


## Sanity Install DVD-3
#fetch DVD3 iso
case "$Brand" in
    AudioCodes)
        iso_dir="official_iso"
        Brand=""
        ;;
    Nuera|NEC)
        iso_dir="branded_iso/$Brand"
        Brand="$Brand"_
        ;;
    *)
        echo "Unknown iso brand $Brand!"
        exit 1
esac


# Sanity Install DVD-3
cd EMS/VersionRelease
(python2.7 SanityInstall.py ${TAG} $vmip ${iso_dir}) || (echo "$(date) : Failed sanity install" &amp;&amp; exit -1)
cd ${WORKSPACE}
echo "$(date) : Sleep 30"
sleep 30
echo "###################################################################################################"
echo "###################################################################################################"
echo "###################################################################################################"
echo "$(date) : Done applying DVD 3"
echo "###################################################################################################"
echo "###################################################################################################"
echo "###################################################################################################"

# ovoc server was rebooted during DVD 3 installation, so -
# Wait for ovoc server power on
#isUp ${vmHostIP} $vmid || exit -2
echo "$(date) : sleep 5 min."
sleep 300

###################################################################################################
# clean before export to BaseVM
echo "$(date) : ssh to clean installetion files"

sshpass -p "$ems_pass" ssh -o StrictHostKeyChecking=no acems@${vmip} su - &lt;&lt; EOF
$su_pass
echo "" &gt; /etc/resolv.conf
EOF

cd EMS/VersionRelease
(python2.7 cleanBeforeOva.py $vmip) || (echo "$(date) : Failed cleaning installation files" &amp;&amp; exit -1)
cd ${WORKSPACE}
echo "$(date) : Sleep 30"
sleep 30

###################################################################################################
# graceful shutdouwn this new full ovoc server VM and rename with TAG
echo "$(date) : shutdown new VM"
SSHCMD="powershell -c 'Get-VM -VMName \"*ovoc*\" | Stop-VM'"
echo $SSHCMD | ssh centos@${vmHostIP}
SSHCMD="powershell -c 'Get-VM -VMName \"*ovoc*\" | Rename-VM -NewName ovoc-${TAG}'"
echo $SSHCMD | ssh centos@${vmHostIP}
echo "$(date) : Sleep 30"
sleep 30

###################################################################################################
# export the new VM and compress
echo "$(date) : Verify no version ${TAG} exists"
SSHCMD="powershell -c 'if (Test-Path V:\\Exports\\${TAG}) {Remove-Item -Recurse V:\\Exports\\${TAG}\\*} else {New-Item -ItemType Directory V:\\Exports\\${TAG}}' "
echo $SSHCMD | ssh centos@${vmHostIP}
SSHCMD="powershell -c 'if (Test-Path V:\\Versions\\${TAG}) {Remove-Item -Recurse V:\\Versions\\${TAG}\\*} else {New-Item -ItemType Directory V:\\Versions\\${TAG}}' "
echo $SSHCMD | ssh centos@${vmHostIP}

echo "$(date) : export new VM"
SSHCMD="powershell -c 'Get-VM -VMName \"*ovoc*\" | Export-VM -Path V:\\Exports\\${TAG}'"
echo $SSHCMD | ssh centos@${vmHostIP}

echo "$(date) : Compress exported VM"
SSHCMD="powershell -c 'Compress-7Zip -ArchiveFileName V:\\Versions\\${TAG}\\OVOC_HyperV-${HyperV}_${Brand}${TAG}.7z -Path V:\\Exports\\${TAG}\\ovoc-${TAG}'"
echo $SSHCMD | ssh centos@${vmHostIP}

echo "$(date) : Calculate md5"
SSHCMD="powershell -c 'Get-FileHash -Algorithm md5 V:\\Versions\\${TAG}\\OVOC_HyperV-${HyperV}_${Brand}${TAG}.7z | select -ExpandProperty Hash &gt; V:\\Versions\\${TAG}\\OVOC_HyperV-${HyperV}_${Brand}${TAG}.md5'"
echo $SSHCMD | ssh centos@${vmHostIP}

#[[ ! -f /cygdrive/v/Exports/OVOC_HyperV-${HyperV}_${TAG}.7z ]] &amp;&amp; exit

echo "###################################################################################################"
echo "###################################################################################################"
echo "###################################################################################################"
echo "$(date) : Done export new VM"
echo "###################################################################################################"
echo "###################################################################################################"
echo "###################################################################################################"

###################################################################################################
# Run Sanity Tests
if [[ "${RunSanity}" == "true" ]]; then
    echo "$(date) : Running sanity tests on ovoc server"
    ###################################################################################################
    # Restart ovoc-server
    echo "$(date) : Starting ovoc server"
    SSHCMD="powershell -c 'Start-VM -Name ovoc-${TAG}'"
    echo $SSHCMD | ssh centos@${vmHostIP}
    echo "$(date) : Sleep 300"
    sleep 300
    
# Update ovoc server /etc/hosts file with DevOps servers (Here document must not be indented)
sshpass -p "$ems_pass" ssh -o StrictHostKeyChecking=no acems@${vmip} su - &lt;&lt; EOF
$su_pass
echo -e "search corp.audiocodes.com\nnameserver 10.1.1.10\nnameserver 10.1.1.6" &gt; /etc/resolv.conf
EOF
    
    ###################################################################################################
    # Generate and install FK
    echo "$(date) : Generate FK"
    cd EMS/VersionRelease
    (python2.7 SanityFK.py $vmip $TAG) || (echo "$(date) : Failed FK" &amp;&amp; exit -1)
    cd ${WORKSPACE}
    
    ###################################################################################################
    # Reboot &amp; Verify services on ovoc_server after FK installation
    echo "$(date) : Reboot &amp; Verify services on ovoc_server after FK installation"
    cd EMS/VersionRelease
    (python2.7 SanityReboot.py $vmip) || (echo "$(date) : Failed reboot after FK installation" &amp;&amp; exit -1)
    cd ${WORKSPACE}
    echo "$(date) : Sleep 300"
    sleep 300
    
    ###################################################################################################
    # Run sanity tests on ovoc server
    echo "$(date) : Run sanity tests on ovoc server"
    cd EMS/VersionRelease
    FullTesting="1"
    python2.7 SanityTest.py ${TAG} $vmip $FullTesting || echo "$(date) : Failed to execute SanityTest"
    python2.7 SanityCopyLogs.py ${TAG} $vmip || (echo "$(date) : Failed to copy logs" &amp;&amp; exit -1)
    
    cd ${WORKSPACE}
      
    echo "###################################################################################################"
    echo "###################################################################################################"
    echo "###################################################################################################"
    echo "${date} : Done Sanity Tests"
    echo "###################################################################################################"
    echo "###################################################################################################"
    echo "###################################################################################################"
else
    echo "$(date) : NOT running sanity tests on ovoc server"
fi


###################################################################################################
# Stop and Delete ovoc server vm
SSHCMD="powershell -c 'Get-VM -VMName \"*ovoc*\" | %{Stop-VM \$_}'"
echo $SSHCMD | ssh centos@${vmHostIP}
SSHCMD="powershell -c 'Get-VM -VMName \"*ovoc*\" | %{Remove-VM -f \$_}'"
echo $SSHCMD | ssh centos@${vmHostIP}

# Delete old remanents from hypervisor host
SSHCMD="powershell -c 'Remove-Item -Force -Recurse V:\\HVWORKSPACE\\*'"
echo $SSHCMD | ssh centos@${vmHostIP}

# Prepare variables for export
cd ${WORKSPACE}
echo "export BR_DIR='OVOC_${TAG%???}XXX'" &gt; buildVars
echo "export BRANCH=${BRANCH}" &gt;&gt; buildVars
echo "export HVM_NAME=OVOC_HyperV-${HyperV}_${Brand}${TAG}" &gt;&gt; buildVars
echo "export RESULT=${RESULT}" &gt;&gt; buildVars
echo "export BRANCH=${BRANCH}" &gt;&gt; buildVars


echo "$(date) : FINISH!!!"
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>EMS/VersionRelease/logs/**/*</artifacts>
      <allowEmptyArchive>true</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>false</defaultExcludes>
      <caseSensitive>false</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
    <hudson.plugins.postbuildtask.PostbuildTask plugin="postbuild-task@1.8">
      <tasks>
        <hudson.plugins.postbuildtask.TaskProperties>
          <logTexts>
            <hudson.plugins.postbuildtask.LogProperties>
              <logText>Done export new VM</logText>
              <operator>AND</operator>
            </hudson.plugins.postbuildtask.LogProperties>
          </logTexts>
          <EscalateStatus>true</EscalateStatus>
          <RunIfJobSuccessful>false</RunIfJobSuccessful>
          <script>. ${WORKSPACE}/buildVars&#13;
&#13;
# Move output to Netapp&#13;
echo "Manipulated $TAG to directory name $BR_DIR"&#13;
&#13;
cd /home/centos/data/output/ISO_Files/$BR_DIR/DVD5_Virtual&#13;
&#13;
if [[ -d ${TAG} ]]; then&#13;
    cd ${TAG}&#13;
    if [[ -f "${HVM_NAME}".7z ]]; then&#13;
        last_mod=`date -r "${HVM_NAME}".7z +%Y-%m-%d--%H-%M`&#13;
        find . -name "${HVM_NAME}".* -exec mv {} {}.${last_mod} \;&#13;
    fi&#13;
else&#13;
    mkdir ${TAG}&#13;
fi&#13;
&#13;
scp -r centos@10.7.10.117:/cygdrive/v/Versions/* /home/centos/data/output/ISO_Files/$BR_DIR/DVD5_Virtual/</script>
        </hudson.plugins.postbuildtask.TaskProperties>
      </tasks>
    </hudson.plugins.postbuildtask.PostbuildTask>
    <hudson.tasks.Mailer plugin="mailer@1.32">
      <recipients>Shuky.Riechard@audiocodes.com yuvaly@audiocodes.com,ben.magriso@audiocodes.com</recipients>
      <dontNotifyEveryUnstableBuild>false</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
    <hudson.plugins.emailext.ExtendedEmailPublisher plugin="email-ext@2.61">
      <recipientList>cc:shuky.riechard, gal.erez, Gennady.Tsiporkin, marina.Risher, cc:yuval.yosha , cc:ben.magriso</recipientList>
      <configuredTriggers>
        <hudson.plugins.emailext.plugins.trigger.SuccessTrigger>
          <email>
            <subject>$PROJECT_DEFAULT_SUBJECT</subject>
            <body>$PROJECT_DEFAULT_CONTENT</body>
            <recipientProviders>
              <hudson.plugins.emailext.plugins.recipients.ListRecipientProvider/>
            </recipientProviders>
            <attachmentsPattern/>
            <attachBuildLog>false</attachBuildLog>
            <compressBuildLog>false</compressBuildLog>
            <replyTo>$PROJECT_DEFAULT_REPLYTO</replyTo>
            <contentType>project</contentType>
          </email>
        </hudson.plugins.emailext.plugins.trigger.SuccessTrigger>
      </configuredTriggers>
      <contentType>text/html</contentType>
      <defaultSubject>OVOC Hyper-V 2016 image is ready</defaultSubject>
      <defaultContent>OVOC ${TAG} Hyper-V 2016 image is here:
\\netapp01\EMS\Versions\ISO_Files\OVOC_${BRANCH}\DVD5_Virtual\${TAG}\OVOC_HyperV-${HyperV}_${Brand}${TAG}.7z</defaultContent>
      <attachmentsPattern/>
      <presendScript>$DEFAULT_PRESEND_SCRIPT

if [[ -f /tmp/noDest.err ]]; then
    MSG=$(cat /tmp/noDest.err)
else
    . ${WORKSPACE}/buildVars

    cat ${JENKINS_HOME}/jobs/${JOB_NAME}/builds/${BUILD_NUMBER}/log &gt; /tmp/log
    RESULT=${grep -A9 "Sanity Test Result:" /tmp/log}

    MSG=$(echo -e 'OVOC for Hyper-V 2016 completed.\n\nFiles can be found on Netapp: \n\\\\netapp01\\\ems\\Versions\\ISO_Files \n\nTests results: \n'${RESULTS})
fi</presendScript>
      <postsendScript>$DEFAULT_POSTSEND_SCRIPT</postsendScript>
      <attachBuildLog>false</attachBuildLog>
      <compressBuildLog>false</compressBuildLog>
      <replyTo>$DEFAULT_REPLYTO</replyTo>
      <saveOutput>false</saveOutput>
      <disabled>false</disabled>
    </hudson.plugins.emailext.ExtendedEmailPublisher>
  </publishers>
  <buildWrappers>
    <org.jfrog.hudson.generic.ArtifactoryGenericConfigurator plugin="artifactory@3.6.1">
      <deployerDetails>
        <artifactoryName>artifactory2-pro</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <stagingPlugin/>
      </deployerDetails>
      <resolverDetails>
        <artifactoryName>artifactory2-pro</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <stagingPlugin/>
      </resolverDetails>
      <deployerCredentialsConfig>
        <credentialsId/>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </deployerCredentialsConfig>
      <resolverCredentialsConfig>
        <credentialsId/>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </resolverCredentialsConfig>
      <useSpecs>true</useSpecs>
      <uploadSpec>
        <spec/>
      </uploadSpec>
      <downloadSpec>
        <spec>{
    "files": [
        {
            "pattern": "ems-release/com/ac/ems/ovoc_server/Sanity_preReq/${TAG}/*.*",
            "target": "${WORKSPACE}/ovaPreRequisites/",
            "flat": "true"
        }
    ]
}</spec>
      </downloadSpec>
      <deployPattern/>
      <resolvePattern>ems-release:com/ac/ems/ovoc_server/Sanity_preReq/${TAG}/*.*=&gt;${workspace}/ovaPreRequisites</resolvePattern>
      <deploymentProperties/>
      <deployBuildInfo>true</deployBuildInfo>
      <includeEnvVars>false</includeEnvVars>
      <envVarsPatterns>
        <includePatterns/>
        <excludePatterns>*password*,*secret*,*key*</excludePatterns>
      </envVarsPatterns>
      <discardOldBuilds>false</discardOldBuilds>
      <discardBuildArtifacts>true</discardBuildArtifacts>
      <asyncBuildRetention>false</asyncBuildRetention>
      <multiConfProject>false</multiConfProject>
      <customBuildName/>
      <overrideBuildName>false</overrideBuildName>
    </org.jfrog.hudson.generic.ArtifactoryGenericConfigurator>
    <EnvInjectBuildWrapper plugin="envinject@2.3.0">
      <info>
        <propertiesContent>vmHostIP="10.7.10.117"
HyperV="2016"</propertiesContent>
        <secureGroovyScript plugin="script-security@1.71">
          <script/>
          <sandbox>false</sandbox>
        </secureGroovyScript>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
    </EnvInjectBuildWrapper>
    <EnvInjectPasswordWrapper plugin="envinject@2.3.0">
      <injectGlobalPasswords>false</injectGlobalPasswords>
      <maskPasswordParameters>true</maskPasswordParameters>
      <passwordEntries>
        <EnvInjectPasswordEntry>
          <name>su_pass</name>
          <value>{AQAAABAAAAAQLg0rHurHSBy8FQslFUHrXAI/3mHiod3DExIp9eCeQmc=}</value>
        </EnvInjectPasswordEntry>
        <EnvInjectPasswordEntry>
          <name>ems_pass</name>
          <value>{AQAAABAAAAAQ1kMK+2b3iHleqbTZqMwMx/Co/k6NghZ6fThuzuCZNoU=}</value>
        </EnvInjectPasswordEntry>
      </passwordEntries>
    </EnvInjectPasswordWrapper>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@2.0.3">
      <template>#${BUILD_NUMBER}__${TAG}_${Brand}</template>
      <descriptionTemplate/>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>