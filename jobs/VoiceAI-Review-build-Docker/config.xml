<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>trigger by VoiceAI-review&#xd;
&#xd;
add version number to UI and to Session-manager (and to MongoDB)&#xd;
git archive 3 folders and upload to artifactory under tag folder</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.0.10"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>60</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty plugin="gitlab-plugin@1.5.13">
      <gitLabConnection></gitLabConnection>
    </com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.27">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>BRANCH</name>
          <description></description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>description</name>
          <description></description>
          <defaultValue></defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>GERRIT_PATCHSET_REVISION</name>
          <description>GERRIT_PATCHSET_REVISION from triggering job (VoiceAI-Review)</description>
          <defaultValue></defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>GERRIT_PATCHSET_NUMBER</name>
          <description>GERRIT_PATCHSET_NUMBER from triggering job (VoiceAI-Review)</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>GERRIT_CHANGE_NUMBER</name>
          <description>GERRIT_CHANGE_NUMBER from triggering job (VoiceAI-Review)</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    <EnvInjectJobProperty plugin="envinject@2.1.6">
      <info>
        <secureGroovyScript plugin="script-security@1.68">
          <script></script>
          <sandbox>false</sandbox>
        </secureGroovyScript>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
      <on>true</on>
      <keepJenkinsSystemVariables>true</keepJenkinsSystemVariables>
      <keepBuildVariables>true</keepBuildVariables>
      <overrideBuildParameters>false</overrideBuildParameters>
    </EnvInjectJobProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@4.0.0">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <refspec>${GERRIT_PATCHSET_REVISION}</refspec>
        <url>ssh://jenkins@test-gerrit:29418/TP/Tools/VoiceAIConnector</url>
        <credentialsId>fef9964a-ddb7-4ce6-a445-a99a9e9802c0</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>${GERRIT_PATCHSET_REVISION}</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.CleanBeforeCheckout/>
    </extensions>
  </scm>
  <assignedNode>VoiceAI-build</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <customWorkspace>/home/centos/jenkinsslave/workspace/VoiceAI</customWorkspace>
  <builders>
    <hudson.tasks.Shell>
      <command>## Create .netrc
[[ -f ~/.netrc ]] &amp;&amp; rm ~/.netrc
echo &quot;machine docker-voice-ai.artifactory.corp.audiocodes.com&quot; &gt;&gt; ~/.netrc
echo &quot;login jenkins&quot; &gt;&gt; ~/.netrc
echo &quot;password ${jenkinsPass}&quot; &gt;&gt; ~/.netrc
echo &quot;machine docker-voice-ai.test-artifactory.corp.audiocodes.com&quot; &gt;&gt; ~/.netrc
echo &quot;login jenkins&quot; &gt;&gt; ~/.netrc
echo &quot;password ${jenkinsPass}&quot; &gt;&gt; ~/.netrc
</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>## Runtime vars
#BRANCH=`git branch --no-color -r --contains HEAD | grep -v -e &apos;-&gt;&apos; | head -1 | awk -F&apos;/&apos; &apos;{print $NF}&apos;`
#OLDTAG=`git describe --first-parent --tags --abbrev=0 HEAD^`
#NEWTAG=`echo ${commit_ID} | awk -F/ &apos;{print $NF}&apos;`

AuthorCommitter=`git log --first-parent --pretty=format:&quot;%aN%n%cN&quot; $OLDTAG..HEAD | sort -u | sed s/$/\;/g`

## change in some files some parameters to build number
cd ${WORKSPACE}
echo &quot;{\&quot;version\&quot;: \&quot;${NEWTAG}\&quot;}&quot; &gt; version.json
#sed -i -- &quot;s/%version%/${BUILD_NUMBER}/g&quot; ${WORKSPACE}/session-manager/config.ts
#sed -i -- &quot;s/%version%/${BUILD_NUMBER}/g&quot; ${WORKSPACE}/ui/config.ts

### Build the project
## Set docker vars
DOCKER_URL=&quot;docker-voice-ai.artifactory.corp.audiocodes.com&quot;
DOCKER_REG=&quot;${DOCKER_URL}&quot;
# Used in build.sh
export DOCKER_REG_PREFIX=&quot;${DOCKER_URL}/&quot;
export GIT_BRANCH=$BRANCH

## Login to docker registry on Artifactory
echo ${jenkinsPass} | docker login -u jenkins --password-stdin ${DOCKER_REG}

## Pull latest images from Artifactory &amp; get their hashes
echo &quot;Pull latest images from Artifactory (those that are tagged with \${BRANCH}).&quot;
remoteImgs=$(curl -u jenkins:${jenkinsPass} -k https://${DOCKER_URL}/v2/_catalog | jq -r &apos;.[][]&apos;)
echo $remoteImgs

## If there is no BRANCH tag yet on artifactory - use previous branch
LATESTTAG=$(curl -k -u jenkins:${jenkinsPass} https://docker-voice-ai.artifactory.corp.audiocodes.com/v2/vag-version/tags/list | jq -r &apos;.tags[]&apos; | sort | tail -n 1)

if [[ ( &quot;${BRANCH}&quot; != &quot;${LATESTTAG}&quot; ) ]]; then
    PULLBRANCH=&quot;${LATESTTAG}&quot;
else
    PULLBRANCH=&quot;${BRANCH}&quot;
fi

HASHES=&quot;&quot;

for ri in ${remoteImgs}; do
    docker pull ${DOCKER_REG}/${ri}:${PULLBRANCH}
    docker tag ${DOCKER_REG}/${ri}:${PULLBRANCH} ${ri}:${BRANCH}

    hash=$(docker images ${ri}:${BRANCH} --format &quot;{{.ID}}&quot;)
    HASHES=&quot;${HASHES}${hash} &quot;
done

## Run build script
echo &quot;***** Steart build *****&quot;
cd ${WORKSPACE}
sh build.sh
ret_value=$?

echo &quot;script Return Value: $ret_value&quot;

if [[ &quot;$ret_value&quot; -ne &quot;0&quot; ]]
then
	exit 1
fi

### Pushing docker images to Artifactory
echo &quot;Pushing Docker images to Artifactory.&quot;

## Login to docker registry
echo &quot;*** Step 1 - Login to docker registry.&quot;
echo ${jenkinsPass} | docker login -u jenkins --password-stdin ${DOCKER_URL}

## Tagging &amp; pushing images to Artifactory
echo &quot;*** Step 2 - Tagging &amp; pushing images to Artifactory.&quot;
for outcomeImage in $(docker images vag-* --format &quot;{{.Repository}}&quot; | grep -v vag-common); do
    dockerImage=$(echo $outcomeImage | sed &apos;s/^.*_//&apos;)
    imageID=$(docker images vag-* | grep &quot;$dockerImage&quot; | gawk &apos;{print $3}&apos;)
    
    if [[ ! $(echo $HASHES | grep ${imageID}) ]]; then
        docker tag ${imageID} ${DOCKER_REG}/${dockerImage}:${description}
        docker push ${DOCKER_REG}/${dockerImage}:${description}
    else
        echo &quot;*** No change in docker image \&quot;${dockerImage}\&quot;. Image not pushed to repository. ***&quot;
    fi
done

echo &quot;Finished docker push to Artifactory.&quot;
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.Mailer plugin="mailer@1.30">
      <recipients>yuvaly</recipients>
      <dontNotifyEveryUnstableBuild>false</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
  </publishers>
  <buildWrappers>
    <org.jenkinsci.plugins.credentialsbinding.impl.SecretBuildWrapper plugin="credentials-binding@1.16">
      <bindings>
        <org.jenkinsci.plugins.credentialsbinding.impl.UsernamePasswordMultiBinding>
          <credentialsId>centos</credentialsId>
          <usernameVariable></usernameVariable>
          <passwordVariable></passwordVariable>
        </org.jenkinsci.plugins.credentialsbinding.impl.UsernamePasswordMultiBinding>
      </bindings>
    </org.jenkinsci.plugins.credentialsbinding.impl.SecretBuildWrapper>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.9"/>
    <hudson.plugins.ansicolor.AnsiColorBuildWrapper plugin="ansicolor@0.6.2">
      <colorMapName>xterm</colorMapName>
    </hudson.plugins.ansicolor.AnsiColorBuildWrapper>
    <org.jfrog.hudson.generic.ArtifactoryGenericConfigurator plugin="artifactory@3.5.0">
      <deployerDetails>
        <artifactoryName>artifactory2-pro</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <stagingPlugin/>
      </deployerDetails>
      <resolverDetails>
        <artifactoryName>artifactory2-pro</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <stagingPlugin/>
      </resolverDetails>
      <deployerCredentialsConfig>
        <credentialsId></credentialsId>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </deployerCredentialsConfig>
      <resolverCredentialsConfig>
        <credentialsId></credentialsId>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </resolverCredentialsConfig>
      <useSpecs>true</useSpecs>
      <uploadSpec>
        <spec>{
    &quot;files&quot;: [
        {
            &quot;pattern&quot;: &quot;docker-compose-vag-*-g???????.yml&quot;,
            &quot;target&quot;: &quot;docker-voice-ai-files/review/${GERRIT_CHANGE_NUMBER}-${GERRIT_PATCHSET_NUMBER}/&quot;
        }
    ]
}
</spec>
      </uploadSpec>
      <downloadSpec>
        <spec></spec>
      </downloadSpec>
      <deployPattern>${WORKSPACE}/docker-compose-*.yml=&gt;review

</deployPattern>
      <resolvePattern></resolvePattern>
      <deploymentProperties></deploymentProperties>
      <deployBuildInfo>true</deployBuildInfo>
      <includeEnvVars>false</includeEnvVars>
      <envVarsPatterns>
        <includePatterns></includePatterns>
        <excludePatterns>*password*,*secret*,*key*</excludePatterns>
      </envVarsPatterns>
      <discardOldBuilds>false</discardOldBuilds>
      <discardBuildArtifacts>true</discardBuildArtifacts>
      <asyncBuildRetention>false</asyncBuildRetention>
      <multiConfProject>false</multiConfProject>
      <customBuildName></customBuildName>
      <overrideBuildName>false</overrideBuildName>
    </org.jfrog.hudson.generic.ArtifactoryGenericConfigurator>
    <EnvInjectPasswordWrapper plugin="envinject@2.1.6">
      <injectGlobalPasswords>true</injectGlobalPasswords>
      <maskPasswordParameters>true</maskPasswordParameters>
      <passwordEntries>
        <EnvInjectPasswordEntry>
          <name>jenkinsPass</name>
          <value>{AQAAABAAAAAQOeD+AbXDOo0B0GhQbwBlinW2va2qC7PNuTqkFLsoh0w=}</value>
        </EnvInjectPasswordEntry>
      </passwordEntries>
    </EnvInjectPasswordWrapper>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@2.0.3">
      <template>#${BUILD_NUMBER}__${description}</template>
      <descriptionTemplate></descriptionTemplate>
      <runAtStart>false</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>