<?xml version="1.1" encoding="UTF-8" standalone="no"?><project>
  <actions/>
  <description>This job pulls VoiceAI docker images from the Artifactory repository and pushes them to ECR.&#13;
Fill in the tags for each image.&#13;
Images without tags will not be processed.</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.0.10"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.27">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>GERRIT_CHANGE_NUMBER</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>GERRIT_PATCHSET_NUMBER</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit/>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>VoiceAI-build</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <customWorkspace>/home/centos/jenkinsslave/workspace/VoiceAI</customWorkspace>
  <builders>
    <hudson.tasks.Shell>
      <command>##

set +x

### Add AudioCodes Public certificate to local machine
echo "*** Verify AUDC certificate ***"
curl --version &amp;&gt;/dev/null || (sudo apt update &amp;&amp; sudo apt -y install curl)
if ! curl -s -o /dev/null https://artifactory; then
  echo "Installing AudioCodes CA certificate."
  dist=$(cat /etc/*release* | grep -e "^ID=" | cut -d'=' -f2)
  if [[ "$dist" == "ubuntu" ]]; then
    cert=/usr/local/share/ca-certificates/audc2016.crt
    updtCAcmd="update-ca-certificates"
  elif [[ "$dist" =~ "centos" ]]; then
    cert=/etc/pki/ca-trust/source/anchors/audc2016.crt
    updtCAcmd="update-ca-trust"
  fi
  sudo rm -f $cert
  cat &lt;&lt;-EOL | sudo tee $cert &gt; /dev/null
-----BEGIN CERTIFICATE-----
MIIFuDCCA6CgAwIBAgIQG5DSb8NKUYJK1U6xTLTlRTANBgkqhkiG9w0BAQ0FADBk
MRMwEQYKCZImiZPyLGQBGRYDY29tMRowGAYKCZImiZPyLGQBGRYKYXVkaW9jb2Rl
czEUMBIGCgmSJomT8ixkARkWBGNvcnAxGzAZBgNVBAMTEkF1ZGlvQ29kZXMgQ0Eg
MjAxNjAeFw0xNjA3MTgxNTE3MDdaFw0yNjA3MTgxNTI3MDNaMGQxEzARBgoJkiaJ
k/IsZAEZFgNjb20xGjAYBgoJkiaJk/IsZAEZFgphdWRpb2NvZGVzMRQwEgYKCZIm
iZPyLGQBGRYEY29ycDEbMBkGA1UEAxMSQXVkaW9Db2RlcyBDQSAyMDE2MIICIjAN
BgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAsRwzw6ZL5bHw91zCtH5pV3izRNRZ
15BZQsKD7YHu0nuAzhicr6OcFdJQxVqKmNv67WieawwYzTtGpxBml4SBscmMVqoV
8zVlPrvXkXXOOPRcS5iVt7XkP/euh5pbkB8LBY1XNmqf4vl3LlQPVQ5XIC4zZBzC
HIzteCFX9IS5cx2b0dsoJDu/b4ey7NJhoRwmYsQWr5qJjXtqDfE83+pQEre/KBRR
NEhK8rRBmuhBIQGn5j42YxUjGXXXSU6buSwYMulSN8PjBkhIkhquvEo2XNwwF34g
A1vTLLbsCYLOjsQxbeJigkHWPQeJh7Z0CD7B1SoX5BPrvDigVYlljQuNelY0Pzw0
eY0EKY0Mo7ErM+sIoZMrEnKzGmwYMAndYPMhfq16+49Xx7UPHuduf5/f8FzOkVF4
NAeP2Lcx71V0iZR/urWFBZsLEtiUVv7CtPXUeBXluf3H/G8GVP1PyFe1tBFjxGOQ
K+DXmgeSPg87bTRgMz4qoURNmsPKzpkvw+CEuCITCIqq0f0il13cW00el86vTdUx
8auIK89Nb0gLvnGoXpMGiMRiD8SKA+8KsU+HTv8NsCxtQVGoicRCFBUNTIG4KkwH
EfetYu6Nf4+gctCNPFHEX1Lju2lcJkTrhZvPCRkTRyPeQ0Ey2d8vBfmNJOMqPyqy
IySNJgz4SCT5ricCAwEAAaNmMGQwEwYJKwYBBAGCNxQCBAYeBABDAEEwCwYDVR0P
BAQDAgGGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFMDsJiUHoatHWLX6wXLC
7SGIno0RMBAGCSsGAQQBgjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAb/gMv
PPmZD9Tmx8ktwEPMgiWOU77vjCnlNyhKk+tqXTj4mEXuFyFuy7ZxR4fmGBfe2BZE
Yihw087NUCwftb+fEDlk1VEp0rCk1R07LBL5vjoJaoicUqcj83Junj5JVvjIN2ny
ZCCXwt2sDJovHSJSdbhoo5h0kxLrqKZNnz18UWUDYG9/ZX8wfJLS9vW/Z+PfehgQ
h0BsRwIRrSor6ifjtAXEMN4q+MwDzMYgXRXo5+TVVcLQ0DfQy8qWWGjHMIziaIv6
ZDUrnr+9R+e6KWL5gzSlNENteK7QtvTi6EyB4+wO5OgTu5X2GkZGxTkXrX7zIie7
IKqqO/OwLOXqZA+DwsiDdoAxmh7XrN1HX92we8ZIZyp53Ve/AWBfhXWcV1x6uTGP
6c7V188fOxh9c8w1NZnCG9ZY6BB4A612CxPOVloyx5asNA1hnxzIFUNVaEmN5uHt
8zToCQ/OiWjrIBdnjR3uFWKn4JMPIs7Mok8TYyFL4ys3WjIScjcY2wdBIkNRvcIR
vOq50OLigP9cF14t9xac12YzfqYEJ2CSdCNgD784+sBgsbf0711jmrTrwVXIwjk3
peitA/lOlYGE3DAptUoSpBpHOsB1BJEJ4Hz7MYO7tA8kH00WzuEx5Kw93voG76JY
TlFgcDc2WETWYgFeiv5Yx4AQsmbJtegjBcQJ6w==
-----END CERTIFICATE-----
EOL
  sudo ${updtCAcmd}
  sleep 3
  sudo systemctl restart docker
else
  echo "Skipped installing AudioCodes CA certificate."
fi

## Create .netrc
[[ -f ~/.netrc ]] &amp;&amp; rm ~/.netrc
echo "machine docker-voice-ai.artifactory.corp.audiocodes.com" &gt;&gt; ~/.netrc
echo "login jenkins" &gt;&gt; ~/.netrc
echo "password ${jenkinsPass}" &gt;&gt; ~/.netrc
echo "machine docker-voice-ai.test-artifactory.corp.audiocodes.com" &gt;&gt; ~/.netrc
echo "login jenkins" &gt;&gt; ~/.netrc
echo "password ${jenkinsPass}" &gt;&gt; ~/.netrc

## Create AWS files
[[ ! -d /home/centos/.aws ]] &amp;&amp; mkdir -p /home/centos/.aws
cat &lt;&lt;-EOD &gt; /home/centos/.aws/config
[default]
region = eu-central-1
EOD

cat /home/centos/.aws/config

cat &lt;&lt;-EOD &gt; /home/centos/.aws/credentials
[default]
aws_access_key_id = ${jenkinsAWSkey}
aws_secret_access_key = ${jenkinsAWSsecret}
EOD

cat /home/centos/.aws/credentials

# Add private key for jenkins to loggin to test-gerrit
ls -l "$testGerritKey"
mv $testGerritKey /var/lib/jenkins/.ssh/id_rsa_test-gerrit
chmod 600 /var/lib/jenkins/.ssh/id_rsa_test-gerrit

</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>### Install yq - this is temporary solution, should be installed in AMI!!!
#curl -sL -o https://github.com/mikefarah/yq/releases/download/2.4.1/yq_linux_amd64 &amp;&amp; \
#         sudo mv yq_linux_amd64 /usr/local/bin/yq &amp;&amp; \
#         sudo chmod +x /usr/local/bin/yq

ymlFile=$(ls docker-compose-vag*.yml | grep -v central | grep -v sm)
version=${GERRIT_CHANGE_NUMBER}-${GERRIT_PATCHSET_NUMBER}
TAG=$(echo $ymlFile | sed 's:docker-compose-vag-::' | sed 's:-.*::')

## Set branch by $version
case $TAG in
	1.1*|1.2*)
    	BRANCH="1.2"
        ;;
    1.3*|1.4*)
    	BRANCH="1.4"
        ;;
    1.5*|1.6*)
        BRANCH="1.6"
        ;;
    1.7*|1.8*)
        BRANCH="1.8"
        ;;
    *)
    	echo "Could not resolve TAG from yml file!!"
        exit 1
        ;;
esac

### Build the project
## Set docker vars
ART_DOCKER_REG="docker-voice-ai.artifactory.corp.audiocodes.com"
ECR_DOCKER_REG="858367874798.dkr.ecr.eu-central-1.amazonaws.com"
ECR_DOCKER_PREFIX="voice-ai"

## Login to docker registry on Artifactory
echo ${jenkinsPass} | docker login -u jenkins --password-stdin ${ART_DOCKER_REG}

## Login to ECR
$(aws ecr get-login --no-include-email --region eu-central-1) || exit 1

## Get images from yml file
images=$(grep "image: docker-voice-ai" $ymlFile | cut -d/ -f2)

## Pull images from Artifactory, tag for ECR &amp; push to ECR
for img in ${images}; do
    image=$(echo $img | cut -d: -f1)
    tag=$(echo $img | cut -d: -f2)
    
    ## Create remote repository if not exist
    awsCommand="aws ecr describe-repositories --repository-name ${ECR_DOCKER_PREFIX}/${image}"
    if [[ ! $($awsCommand) ]]; then
        echo "*** Creating remote repository ${ECR_DOCKER_PREFIX}/${image}"
        aws ecr create-repository --repository-name "${ECR_DOCKER_PREFIX}/${image}"
    fi
    
    ## Pull, tag and push image to remote repository
    #  Image is pushed to ECR once with the tag it was pulled from Artifactory
    #  and once with YAML version tag
    docker pull ${ART_DOCKER_REG}/"${image}:${tag}"
    docker tag ${ART_DOCKER_REG}/"${image}:${tag}" ${ECR_DOCKER_REG}/${ECR_DOCKER_PREFIX}/"${image}:${tag}"
    docker tag ${ART_DOCKER_REG}/"${image}:${tag}" ${ECR_DOCKER_REG}/${ECR_DOCKER_PREFIX}/"${image}:${version}"
    echo ${ECR_DOCKER_REG}/${ECR_DOCKER_PREFIX}/"${image}:${tag}"
    echo ${ECR_DOCKER_REG}/${ECR_DOCKER_PREFIX}/"${image}:${version}"
    #docker push ${ECR_DOCKER_REG}/${ECR_DOCKER_PREFIX}/"${image}:${tag}"
    #docker push ${ECR_DOCKER_REG}/${ECR_DOCKER_PREFIX}/"${image}:${version}"
done

## Create YAMLs for ECR
#Basicaly this script does the following:
#1. Create an empty `ecr` directory
#2. Replace URI `docker-voice-ai.artifactory.corp.audiocodes.com`
#          with `858367874798.dkr.ecr.eu-central-1.amazonaws.com/voice-ai`
#3. Remove `ports` section from mongo &amp; influxdb images on the combined yaml.
#4. Put the new file in `ecr` directory. 
#
cd ${WORKSPACE}

changeDir=${GERRIT_CHANGE_NUMBER: -2}/${GERRIT_CHANGE_NUMBER}/${GERRIT_PATCHSET_NUMBER}
git -i id_rsa_test-gerrit fetch "ssh://$testGerritUser@test-gerrit:29418/TP/Tools/VoiceAIConnector" refs/changes/$changeDir &amp;&amp; git checkout FETCH_HEAD
. common/ECR-yaml-manipulation.sh
#
## Copy YAML files to S3
aws #s3 sync "ecr" s3://voice-ai/docker-compose/${version}
ll ecr

## Properties to export to environment
echo VERSION=$version &gt; VAG.properties
echo IMAGES=${images} &gt;&gt; VAG.properties
cat VAG.properties
</command>
    </hudson.tasks.Shell>
    <EnvInjectBuilder plugin="envinject@2.3.0">
      <info>
        <propertiesFilePath>VAG.properties</propertiesFilePath>
      </info>
    </EnvInjectBuilder>
  </builders>
  <publishers>
    <hudson.plugins.emailext.ExtendedEmailPublisher plugin="email-ext@2.61">
      <recipientList>Shmulik.Yudkovich@audiocodes.com, shuky.riechard@audiocodes.com</recipientList>
      <configuredTriggers>
        <hudson.plugins.emailext.plugins.trigger.FailureTrigger>
          <email>
            <subject>Failed to push docker images to ECR</subject>
            <body>FAIL!!

version: ${version}</body>
            <recipientProviders>
              <hudson.plugins.emailext.plugins.recipients.RequesterRecipientProvider/>
            </recipientProviders>
            <attachmentsPattern/>
            <attachBuildLog>false</attachBuildLog>
            <compressBuildLog>false</compressBuildLog>
            <replyTo>$PROJECT_DEFAULT_REPLYTO</replyTo>
            <contentType>project</contentType>
          </email>
        </hudson.plugins.emailext.plugins.trigger.FailureTrigger>
        <hudson.plugins.emailext.plugins.trigger.SuccessTrigger>
          <email>
            <recipientList>Shmulik.Yudkovich@audiocodes.com</recipientList>
            <subject>$PROJECT_DEFAULT_SUBJECT</subject>
            <body>$PROJECT_DEFAULT_CONTENT</body>
            <recipientProviders>
              <hudson.plugins.emailext.plugins.recipients.RequesterRecipientProvider/>
              <hudson.plugins.emailext.plugins.recipients.ListRecipientProvider/>
            </recipientProviders>
            <attachmentsPattern/>
            <attachBuildLog>false</attachBuildLog>
            <compressBuildLog>false</compressBuildLog>
            <replyTo>$PROJECT_DEFAULT_REPLYTO</replyTo>
            <contentType>project</contentType>
          </email>
        </hudson.plugins.emailext.plugins.trigger.SuccessTrigger>
      </configuredTriggers>
      <contentType>default</contentType>
      <defaultSubject>VoiceAI ${VERSION} - docker images pushed to ECR successfully</defaultSubject>
      <defaultContent>Pushed docker images $IMAGES to ECR.

Deployed -
&gt; docker-compose-vag-ecr-$VERSION.yml
&gt; docker-compose-vag-ecr-$VERSION-sm.yml
&gt; docker-compose-vag-ecr-$VERSION-central.yml
&gt; docker-compose-vag-$VERSION-azure-mock.yml
to Artifactory &amp; S3

On Artifactory
https://artifactory:443/docker-voice-ai-files/

On AWS s3:
https://voice-ai.s3.eu-central-1.amazonaws.com/docker-compose/$VERSION/docker-compose-vag-ecr-$VERSION.yml
https://voice-ai.s3.eu-central-1.amazonaws.com/docker-compose/$VERSION/docker-compose-vag-ecr-$VERSION-sm.yml
https://voice-ai.s3.eu-central-1.amazonaws.com/docker-compose/$VERSION/docker-compose-vag-ecr-$VERSION-central.yml


BUILD URL:
$BUILD_URL

Regards,
DevOps Team</defaultContent>
      <attachmentsPattern/>
      <presendScript>$DEFAULT_PRESEND_SCRIPT</presendScript>
      <postsendScript>$DEFAULT_POSTSEND_SCRIPT</postsendScript>
      <attachBuildLog>false</attachBuildLog>
      <compressBuildLog>false</compressBuildLog>
      <replyTo>$DEFAULT_REPLYTO</replyTo>
      <saveOutput>false</saveOutput>
      <disabled>true</disabled>
    </hudson.plugins.emailext.ExtendedEmailPublisher>
    <hudson.tasks.Mailer plugin="mailer@1.32">
      <recipients>shukyr yuvaly</recipients>
      <dontNotifyEveryUnstableBuild>false</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
  </publishers>
  <buildWrappers>
    <org.jenkinsci.plugins.credentialsbinding.impl.SecretBuildWrapper plugin="credentials-binding@1.22">
      <bindings>
        <org.jenkinsci.plugins.credentialsbinding.impl.SSHUserPrivateKeyBinding>
          <credentialsId>fef9964a-ddb7-4ce6-a445-a99a9e9802c0</credentialsId>
          <keyFileVariable>testGerritKey</keyFileVariable>
          <usernameVariable>testGerritUser</usernameVariable>
          <passphraseVariable/>
        </org.jenkinsci.plugins.credentialsbinding.impl.SSHUserPrivateKeyBinding>
      </bindings>
    </org.jenkinsci.plugins.credentialsbinding.impl.SecretBuildWrapper>
    <org.jfrog.hudson.generic.ArtifactoryGenericConfigurator plugin="artifactory@3.6.1">
      <deployerDetails>
        <artifactoryName>artifactory2-pro</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <stagingPlugin/>
      </deployerDetails>
      <resolverDetails>
        <artifactoryName>artifactory2-pro</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <stagingPlugin/>
      </resolverDetails>
      <deployerCredentialsConfig>
        <credentialsId/>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </deployerCredentialsConfig>
      <resolverCredentialsConfig>
        <credentialsId/>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </resolverCredentialsConfig>
      <useSpecs>true</useSpecs>
      <uploadSpec>
        <spec/>
      </uploadSpec>
      <downloadSpec>
        <spec>{
    "files": [
        {
            "pattern": "docker-voice-ai-files/review/${GERRIT_CHANGE_NUMBER}-${GERRIT_PATCHSET_NUMBER}/docker-compose-vag-*.yml"
        }
    ]
}

</spec>
      </downloadSpec>
      <deployPattern/>
      <resolvePattern/>
      <deploymentProperties/>
      <deployBuildInfo>true</deployBuildInfo>
      <includeEnvVars>false</includeEnvVars>
      <envVarsPatterns>
        <includePatterns/>
        <excludePatterns>*password*,*secret*,*key*</excludePatterns>
      </envVarsPatterns>
      <discardOldBuilds>false</discardOldBuilds>
      <discardBuildArtifacts>true</discardBuildArtifacts>
      <asyncBuildRetention>false</asyncBuildRetention>
      <multiConfProject>false</multiConfProject>
      <customBuildName/>
      <overrideBuildName>false</overrideBuildName>
    </org.jfrog.hudson.generic.ArtifactoryGenericConfigurator>
    <EnvInjectBuildWrapper plugin="envinject@2.3.0">
      <info>
        <propertiesContent>PATH=/usr/local/bin:$PATH</propertiesContent>
        <secureGroovyScript plugin="script-security@1.71">
          <script/>
          <sandbox>false</sandbox>
        </secureGroovyScript>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
    </EnvInjectBuildWrapper>
    <EnvInjectPasswordWrapper plugin="envinject@2.3.0">
      <injectGlobalPasswords>true</injectGlobalPasswords>
      <maskPasswordParameters>true</maskPasswordParameters>
      <passwordEntries>
        <EnvInjectPasswordEntry>
          <name>jenkinsPass</name>
          <value>{AQAAABAAAAAQ6rtTtv8r70ltBj28MYVLbLVTeS4ml43orT+2gD6O9VI=}</value>
        </EnvInjectPasswordEntry>
        <EnvInjectPasswordEntry>
          <name>jenkinsAWSkey</name>
          <value>{AQAAABAAAAAgOHQ+FnGTnqCzo91JmbX91fV9w7bxM6ZojzmYWnyWgZUs86edpekeCBwi3NkXaA6f}</value>
        </EnvInjectPasswordEntry>
        <EnvInjectPasswordEntry>
          <name>jenkinsAWSsecret</name>
          <value>{AQAAABAAAAAwX2f2p41z6F9Up89quZKSI9m8FOW+SnJZdxYaSkXXfIRHJtN3fwYIbDf4gNGcPqzQaGRc3CA+EMKfdJEuVlMzvw==}</value>
        </EnvInjectPasswordEntry>
      </passwordEntries>
    </EnvInjectPasswordWrapper>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@2.0.3">
      <template>#${BUILD_NUMBER}_${GERRIT_CHANGE_NUMBER}-${GERRIT_PATCHSET_NUMBER}</template>
      <descriptionTemplate/>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>