<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.27">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>GERRIT_BRANCH</name>
          <description></description>
          <defaultValue>7.2.170</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    <EnvInjectJobProperty plugin="envinject@2.1.5">
      <info>
        <propertiesContent>PATH=C:/Program Files/bin:$PATH</propertiesContent>
        <secureGroovyScript plugin="script-security@1.42">
          <script></script>
          <sandbox>false</sandbox>
        </secureGroovyScript>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
      <on>true</on>
      <keepJenkinsSystemVariables>true</keepJenkinsSystemVariables>
      <keepBuildVariables>true</keepBuildVariables>
      <overrideBuildParameters>false</overrideBuildParameters>
    </EnvInjectJobProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@3.8.0">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>ssh://jenkins@test-gerrit:29418/TP/TrunkPackLib</url>
        <credentialsId>fef9964a-ddb7-4ce6-a445-a99a9e9802c0</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>$GERRIT_BRANCH</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.CleanBeforeCheckout/>
    </extensions>
  </scm>
  <assignedNode>TrunkPackLib</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTrigger plugin="gerrit-trigger@2.27.5">
      <spec></spec>
      <gerritProjects>
        <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
          <compareType>PLAIN</compareType>
          <pattern>TP/TrunkPackLib</pattern>
          <branches>
            <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
              <compareType>ANT</compareType>
              <pattern>refs/tags/L7.20A.1*</pattern>
            </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
          </branches>
          <disableStrictForbiddenFileVerification>false</disableStrictForbiddenFileVerification>
        </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
      </gerritProjects>
      <dynamicGerritProjects class="empty-list"/>
      <skipVote>
        <onSuccessful>false</onSuccessful>
        <onFailed>false</onFailed>
        <onUnstable>false</onUnstable>
        <onNotBuilt>false</onNotBuilt>
      </skipVote>
      <silentMode>false</silentMode>
      <notificationLevel></notificationLevel>
      <silentStartMode>false</silentStartMode>
      <escapeQuotes>true</escapeQuotes>
      <nameAndEmailParameterMode>PLAIN</nameAndEmailParameterMode>
      <dependencyJobsNames></dependencyJobsNames>
      <commitMessageParameterMode>BASE64</commitMessageParameterMode>
      <changeSubjectParameterMode>PLAIN</changeSubjectParameterMode>
      <commentTextParameterMode>BASE64</commentTextParameterMode>
      <buildStartMessage></buildStartMessage>
      <buildFailureMessage></buildFailureMessage>
      <buildSuccessfulMessage></buildSuccessfulMessage>
      <buildUnstableMessage></buildUnstableMessage>
      <buildNotBuiltMessage></buildNotBuiltMessage>
      <buildUnsuccessfulFilepath></buildUnsuccessfulFilepath>
      <customUrl></customUrl>
      <serverName>test-gerrit</serverName>
      <triggerOnEvents>
        <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.events.PluginRefUpdatedEvent/>
      </triggerOnEvents>
      <dynamicTriggerConfiguration>false</dynamicTriggerConfiguration>
      <triggerConfigURL></triggerConfigURL>
      <triggerInformationAction/>
    </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.BatchFile>
      <command>set PATH=%PATH%;C:\Program Files\Git\bin;C:\cygwin\bin;C:\Program Files\WinZip&#xd;
cd ..&#xd;
IF NOT EXIST .git (&#xd;
  git -c http.sslverify=false clone -n https://test-gerrit/TP/GWApp GWApp&#xd;
  mkdir .git&#xd;
  FOR /d %%i IN (GWApp\.git\*) DO move %%i .git&#xd;
  move GWApp\.git\* .git&#xd;
  rmdir /S /Q GWApp&#xd;
)&#xd;
&#xd;
git checkout -f origin/7.2.170 -- TrunkPackRam/PSTN/PSTN_Interface&#xd;
git checkout -f origin/7.2.170 -- TrunkPackRam/Transmission/TransmInterface&#xd;
git checkout -f origin/7.2.170 -- TrunkPackRam/TPApp/Common/Include&#xd;
git checkout -f origin/7.2.170 -- TrunkPackRam/TPApp/Common/Source&#xd;
git checkout -f origin/7.2.170 -- TrunkPackRam/TPApp/PerformanceMonitoring/Include/PerformanceMonitoringDef.h&#xd;
git checkout -f origin/7.2.170 -- TrunkPackRam/ControlProtocols/CommonResources/Include&#xd;
git checkout -f origin/7.2.170 -- TrunkPackRam/TPApp/HA/Include/HAProtectedDef.h&#xd;
cd %WORKSPACE%&#xd;
</command>
    </hudson.tasks.BatchFile>
    <hudson.tasks.BatchFile>
      <command>IF NOT exist &quot;CopyLinks.sh&quot; (&#xd;
  echo Error: CopyLinks.sh doesn&apos;t exist&#xd;
  exit 1;&#xd;
)&#xd;
&#xd;
copy CopyLinks.sh c:\temp&#xd;
C:\cygwin\bin\bash --login -i -c &quot;c:/temp/CopyLinks.sh %WORKSPACE:\=/%&quot;&#xd;
&#xd;
set PATH=%PATH%;C:\Program Files\Git\bin;C:\cygwin\bin;C:\Program Files\WinZip&#xd;
git describe --tags &gt; tpncp-ver.txt&#xd;
&#xd;
echo cd %WORKSPACE:\=/%/voplibtcl/voplibext/wireShark &gt;&gt; c:\temp\tpncp-dat-execute.sh&#xd;
echo cp -fp C:/cygwin/usr/local/bin/new/*.exe C:/cygwin/usr/local/bin &gt;&gt; c:\temp\tpncp-dat-execute.sh&#xd;
echo ./wireShark.tcl &gt;&gt; c:\temp\tpncp-dat-execute.sh&#xd;
echo cp -fp C:/cygwin/usr/local/bin/old/*.exe C:/cygwin/usr/local/bin &gt;&gt; c:\temp\tpncp-dat-execute.sh&#xd;
C:\cygwin\bin\bash --login -i -c c:/temp/tpncp-dat-execute.sh&#xd;
&#xd;
cd voplibtcl\voplibext\wireShark&#xd;
set maxbytesize=300000&#xd;
FOR /F &quot;usebackq&quot; %%A IN (&apos;tpncp.dat&apos;) DO set size=%%~zA&#xd;
if %size% LSS %maxbytesize% (&#xd;
  echo &quot;Error: WireShark TPNTP dat PlugIn was failed, Image too small.. exit with error&quot;&#xd;
  set errorlevel=1&#xd;
) ELSE (&#xd;
  net use z: /DELETE&#xd;
  net use z: \\netapp1\cm\CompilationResults\WireShark&#xd;
  copy /Y tpncp.dat z:\_Latest\plugins&#xd;
  copy /Y tpncp.dat z:\_Latest\Plugins_x64&#xd;
  copy /Y ..\..\..\tpncp-ver.txt z:\_Latest\plugins&#xd;
  copy /Y ..\..\..\tpncp-ver.txt z:\_Latest\Plugins_x64&#xd;
  copy /Y tpncp.dat z:\_Latest_2.0.6\plugins&#xd;
  copy /Y tpncp.dat z:\_Latest_2.0.6\Plugins_x64&#xd;
  copy /Y ..\..\..\tpncp-ver.txt z:\_Latest_2.0.6\plugins&#xd;
  copy /Y ..\..\..\tpncp-ver.txt z:\_Latest_2.0.6\Plugins_x64&#xd;
  cd /D z:\_Latest&#xd;
  del /F acWireShark.zip&#xd;
  WZZIP -rpu acWireShark.zip&#xd;
  cd /D z:\_Latest_2.0.6&#xd;
  del /F acWireShark.zip&#xd;
  WZZIP -rpu acWireShark.zip&#xd;
)&#xd;
</command>
    </hudson.tasks.BatchFile>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>