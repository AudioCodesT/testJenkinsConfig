<?xml version="1.1" encoding="UTF-8" standalone="no"?><project>
  <actions/>
  <description/>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.0.10"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>10</daysToKeep>
        <numToKeep>20</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.27">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit/>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    <EnvInjectJobProperty plugin="envinject@2.3.0">
      <info>
        <secureGroovyScript plugin="script-security@1.71">
          <script/>
          <sandbox>false</sandbox>
        </secureGroovyScript>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
      <on>true</on>
      <keepJenkinsSystemVariables>true</keepJenkinsSystemVariables>
      <keepBuildVariables>true</keepBuildVariables>
      <overrideBuildParameters>false</overrideBuildParameters>
    </EnvInjectJobProperty>
    
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@4.2.2">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <refspec>$GERRIT_REFSPEC</refspec>
        <url>ssh://jenkins@test-gerrit:29418/TP/OpenSource/OpenRG-UGW</url>
        <credentialsId>fef9964a-ddb7-4ce6-a445-a99a9e9802c0</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>$GERRIT_REFSPEC</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.BuildChooserSetting>
        <buildChooser class="com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTriggerBuildChooser" plugin="gerrit-trigger@2.30.5">
          <separator>#</separator>
        </buildChooser>
      </hudson.plugins.git.extensions.impl.BuildChooserSetting>
      <hudson.plugins.git.extensions.impl.CleanBeforeCheckout>
        <deleteUntrackedNestedRepositories>false</deleteUntrackedNestedRepositories>
      </hudson.plugins.git.extensions.impl.CleanBeforeCheckout>
    </extensions>
  </scm>
  <assignedNode>sbc-linux-build</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTrigger plugin="gerrit-trigger@2.30.5">
      <spec/>
      <gerritProjects>
        <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
          <compareType>ANT</compareType>
          <pattern>TP/OpenSource/OpenRG-UGW</pattern>
          <branches>
            <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
              <compareType>ANT</compareType>
              <pattern>**</pattern>
            </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
          </branches>
          <disableStrictForbiddenFileVerification>false</disableStrictForbiddenFileVerification>
        </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
      </gerritProjects>
      <dynamicGerritProjects class="empty-list"/>
      <skipVote>
        <onSuccessful>false</onSuccessful>
        <onFailed>false</onFailed>
        <onUnstable>true</onUnstable>
        <onNotBuilt>false</onNotBuilt>
      </skipVote>
      <silentMode>false</silentMode>
      <notificationLevel/>
      <silentStartMode>false</silentStartMode>
      <escapeQuotes>true</escapeQuotes>
      <nameAndEmailParameterMode>PLAIN</nameAndEmailParameterMode>
      <dependencyJobsNames/>
      <commitMessageParameterMode>PLAIN</commitMessageParameterMode>
      <changeSubjectParameterMode>PLAIN</changeSubjectParameterMode>
      <commentTextParameterMode>PLAIN</commentTextParameterMode>
      <buildStartMessage>gerrit review &lt;CHANGE&gt;,&lt;PATCHSET&gt; --message 'Build Started &lt;BUILDS_STATS&gt;' --notify=NONE</buildStartMessage>
      <buildFailureMessage/>
      <buildSuccessfulMessage/>
      <buildUnstableMessage/>
      <buildNotBuiltMessage/>
      <buildUnsuccessfulFilepath/>
      <customUrl/>
      <serverName>test-gerrit</serverName>
      <triggerOnEvents>
        <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.events.PluginPatchsetCreatedEvent>
          <excludeDrafts>false</excludeDrafts>
          <excludeTrivialRebase>false</excludeTrivialRebase>
          <excludeNoCodeChange>true</excludeNoCodeChange>
          <excludePrivateState>false</excludePrivateState>
          <excludeWipState>false</excludeWipState>
        </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.events.PluginPatchsetCreatedEvent>
        <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.events.PluginDraftPublishedEvent/>
      </triggerOnEvents>
      <dynamicTriggerConfiguration>false</dynamicTriggerConfiguration>
      <triggerConfigURL/>
      <triggerInformationAction/>
    </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <customWorkspace>workspace/sbc-OpenRG-UGW-review/OpenSource/OpenRG-UGW</customWorkspace>
  <builders>
    <hudson.tasks.Shell>
      <command>BL=`git describe --tags --first-parent | sed s/-/_/g`
echo BL ver is: ${BL}
echo COMP_VER=${BL} &gt; generated_version.properties

echo "#define EXTERNAL_VERSION \"$BL\"" &gt; $WORKSPACE/include/external_version_data.h
</command>
    </hudson.tasks.Shell>
    <EnvInjectBuilder plugin="envinject@2.3.0">
      <info>
        <propertiesFilePath>generated_version.properties</propertiesFilePath>
      </info>
    </EnvInjectBuilder>
    <hudson.tasks.Shell>
      <command>User="jenkins:$artifactory_password"
refs=""

sudo chmod -R 755 .
sudo chown -R centos:centos .

function findOthersCommit() {
  project=$1 
  refs=$(ssh -p 29418 -i id_rsa_gerrit jenkins@test-gerrit gerrit query \
     --current-patch-set change:$ID status:open \
     branch:$GERRIT_BRANCH project:$project | \
     grep ref: | cut -d: -f2) || echo ChangeId not found
  echo foundChange: $refs
  # If no commit was found with the same change-id:
  # Find if this build should use another commit with the same Issue
  if [[ -z "$refs" &amp;&amp; ! -z "$ISSUE" ]]; then 
    echo Search this Issue: $ISSUE...
    foundChanges=$(ssh -p 29418 -i id_rsa_gerrit jenkins@test-gerrit gerrit query \
    --current-patch-set message:$ISSUE status:open \
    branch:$GERRIT_BRANCH project:$project | \
    grep ref: | cut -d: -f2) || echo ChangeId not found
    # find the oldest commit with this issue
    lastChange=0
    for ref in $foundChanges; do
      change=$(echo $ref | cut -d/ -f4);
      echo Check if it the newer change, we need to use the newest in case of some changes
      if [ "$change" -gt "$lastChange" ]; then 
        lastChange=$change
        refs=$ref
        echo Set to $refs
      fi 
    done
    echo foundChange: $refs
  fi
}


# Find if this build should use another Opensorce Images with the same Commit change-ID
chmod 600 id_rsa_gerrit
change=`echo $GERRIT_REFSPEC | cut -d/ -f4`
ID=${GERRIT_CHANGE_ID}
ISSUE=$(echo $GERRIT_CHANGE_COMMIT_MESSAGE | grep Issue: | sed 's/.*Issue: //g; s/ .*//g')

# Which MP5XXNG.kernel-headers.gz bring from Artifactory?
echo Search of exist commits in TP/OpenSource/acLinuxUGW and use the oldest
findOthersCommit TP/OpenSource/acLinuxUGW
echo acLinuxChange: $refs

# If found, find the revision instead of the refspec
if [ ! -z "$refs" ]; then
  rev=$(ssh -p 29418 -i id_rsa_gerrit jenkins@test-gerrit gerrit query \
     --current-patch-set $(echo $refs | cut -d/ -f4) | \
     grep revision: | head -1 | cut -d: -f2 | sed 's: ::g') || echo ChangeId not found
  echo acLinuxChange: $rev
fi

# File deleted in f45bff72c3ce8ea2b6d296e5357c1581edbed826. Remove once all pending changes are rebased on top of it.
if [ -f tunnels/gre/mgt/if_tunnel.h ]; then

cd ..
if [ ! -d acLinuxUGW ]; then
  git -c http.sslverify=false clone --depth 10 -n -b $GERRIT_BRANCH https://test-gerrit/TP/OpenSource/acLinuxUGW acLinuxUGW
fi

# from acLinuxUGW bring the file that is specified in the link in OpenRG-UGW: 'tunnels/gre/mgt/if_tunnel.h'
cd acLinuxUGW
git fetch origin $GERRIT_BRANCH
git checkout -f origin/$GERRIT_BRANCH -- kernel/linux/include/uapi/linux/if_tunnel.h
cd $WORKSPACE

fi # if_tunnel.h
 
# Bring the MCA files from TP/GWApp
echo Search of exist commits in TP/GWApp and use the oldest
findOthersCommit TP/GWApp
echo tpChange: $refs

cd ../..
if [ ! -d .git ]; then
  git -c http.sslverify=false clone --depth 10 -n -b $GERRIT_BRANCH https://test-gerrit/TP/GWApp GWApp
  mv GWApp/.git .
  rm -rf GWApp
else
  git fetch origin $GERRIT_BRANCH
fi

if [ ! -z "$refs" ]; then
  git fetch origin $refs
else
  git fetch origin $GERRIT_BRANCH
fi

git checkout -f FETCH_HEAD -- TrunkPackRam/acInfrastructure/MCA \
    TrunkPackRam/acInfrastructure/MCA-UGW \
    TrunkPackRam/Bsps/BspOcteon/Include/bspWanPortDef.h \
    OpenSource/pkgs
    
git checkout -f FETCH_HEAD -- Shared || true

#In case you don't find the revision from another commit, take it from the last submitted commit
if [ -z "$rev" ]; then rev=$(git ls-tree FETCH_HEAD -- OpenSource/acLinuxUGW | awk '{print $3}'); fi

cd $WORKSPACE

if [ -d ../../Shared ]; then
  sudo chmod -R 755 ../../Shared
  sudo chown -R centos:centos ../../Shared
  [ -f ../../Shared/Versioning/Utils/MakeBrdVersion.sh ] &amp;&amp; sh ../../Shared/Versioning/Utils/MakeBrdVersion.sh ../../ &gt; /dev/null
  if [ $? != 0 ]; then
    echo "MakeBrdVersion failed !!!"
    exit 1
  fi
  echo "MakeBrdVersion Succeesful"
fi

#Bring 'MP5XXNG.kernel-headers.gz' the needed acLinuxUGW output for this compilation
uri=$(curl -ks -u $User "https://artifactory/api/search/prop?vcs.revision=$rev&amp;repos=sbc-repo" | grep uri | cut -d'"' -f4 | grep kernel | head -1)
if [ "$uri" == "" ]; then
  echo Need waiting to kernel package...
  if [ "$NAGINATOR_COUNT" == 2 ]; then
    echo Give vote to Gerrit
    exit 1
  else
    echo Skip vote and try again by the Naginator
    exit 2
  fi
fi

downloadUri=$(curl -ks -u $User $uri | grep "downloadUri" | cut -d'"' -f4)
rm -f MP5XXNG.kernel-headers.gz
curl -ks -u $User $downloadUri --output MP5XXNG.kernel-headers.gz

./build_openrg_ugw.sh --board=MP5XXNG

cp  $WORKSPACE/include/external_version_data.h $WORKSPACE/OpenRG-UGW_external_version_data.h

if [ ! -f MP5XXNG.OpenRG.img.gz ]; then
  echo "MP5XXNG.OpenRG.img.gz does not exist.. exit with error"
  exit -1
fi

if (( `du MP5XXNG.OpenRG.img.gz | cut -f1` &lt; 1500 )); then
  echo "MP5XXNG.OpenRG.img.gz Image is too small.. exit with error"
  exit -1
fi
</command>
      <unstableReturn>2</unstableReturn>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <com.chikli.hudson.plugin.naginator.NaginatorPublisher plugin="naginator@1.17.2">
      <regexpForRerun>.*(Need waiting to kernel package|ClosedChannel|no workspace from node|Workspace is not accessible|node is offline|Error fetching remote|JNLP4-connect connection).*</regexpForRerun>
      <rerunIfUnstable>true</rerunIfUnstable>
      <rerunMatrixPart>false</rerunMatrixPart>
      <checkRegexp>true</checkRegexp>
      <regexpForMatrixStrategy>TestParent</regexpForMatrixStrategy>
      <delay class="com.chikli.hudson.plugin.naginator.FixedDelay">
        <delay>300</delay>
      </delay>
      <maxSchedule>2</maxSchedule>
    </com.chikli.hudson.plugin.naginator.NaginatorPublisher>
  </publishers>
  <buildWrappers>
    <com.michelin.cio.hudson.plugins.copytoslave.CopyToSlaveBuildWrapper plugin="copy-to-slave@1.4.4">
      <includes>id_rsa_gerrit</includes>
      <excludes/>
      <flatten>false</flatten>
      <includeAntExcludes>false</includeAntExcludes>
      <hudsonHomeRelative>false</hudsonHomeRelative>
      <relativeTo>userContent</relativeTo>
    </com.michelin.cio.hudson.plugins.copytoslave.CopyToSlaveBuildWrapper>
    <org.jfrog.hudson.generic.ArtifactoryGenericConfigurator plugin="artifactory@3.6.1">
      <deployerDetails>
        <artifactoryName>artifactory2-pro</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <deployReleaseRepository>
          <keyFromText/>
          <keyFromSelect>sbc-review</keyFromSelect>
          <dynamicMode>false</dynamicMode>
        </deployReleaseRepository>
        <stagingPlugin/>
      </deployerDetails>
      <resolverDetails>
        <artifactoryName>artifactory2-pro</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <stagingPlugin/>
      </resolverDetails>
      <deployerCredentialsConfig>
        <credentialsId/>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </deployerCredentialsConfig>
      <resolverCredentialsConfig>
        <credentialsId/>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </resolverCredentialsConfig>
      <useSpecs>false</useSpecs>
      <uploadSpec>
        <spec/>
      </uploadSpec>
      <downloadSpec>
        <spec/>
      </downloadSpec>
      <deployPattern>${WORKSPACE}/MP5XXNG.OpenRG.img.gz=&gt;com/ac/sbc/OpenRG-UGW/${COMP_VER}
$WORKSPACE/OpenRG-UGW_external_version_data.h=&gt;com/ac/sbc/OpenRG-UGW/${COMP_VER}</deployPattern>
      <resolvePattern/>
      <deploymentProperties/>
      <deployBuildInfo>true</deployBuildInfo>
      <includeEnvVars>true</includeEnvVars>
      <envVarsPatterns>
        <includePatterns/>
        <excludePatterns>*password*,*secret*,*key*</excludePatterns>
      </envVarsPatterns>
      <discardOldBuilds>false</discardOldBuilds>
      <discardBuildArtifacts>true</discardBuildArtifacts>
      <asyncBuildRetention>false</asyncBuildRetention>
      <multiConfProject>false</multiConfProject>
      <customBuildName/>
      <overrideBuildName>false</overrideBuildName>
    </org.jfrog.hudson.generic.ArtifactoryGenericConfigurator>
    <EnvInjectPasswordWrapper plugin="envinject@2.3.0">
      <injectGlobalPasswords>false</injectGlobalPasswords>
      <maskPasswordParameters>true</maskPasswordParameters>
      <passwordEntries>
        <EnvInjectPasswordEntry>
          <name>artifactory_password</name>
          <value>{AQAAABAAAAAQam7VM+scBggCgy58TaocuU3+zIi2rquTeTX+tMPEE60=}</value>
        </EnvInjectPasswordEntry>
      </passwordEntries>
    </EnvInjectPasswordWrapper>
  </buildWrappers>
</project>