<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>############ This is work in progress  ################&#xd;
############## Do NOT run this job #################&#xd;
&#xd;
This job accept the following parameters:&#xd;
* New tag&#xd;
* ISO to deploy&#xd;
* OVOC server IP&#xd;
* Server role (Master, VQ, PM)&#xd;
* Test mode&#xd;
&#xd;
And does the following:&#xd;
1. Connect to OVOC server by its IP address.&#xd;
2. Install DVD3 according to given parameters.&#xd;
&#xd;
</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.0.10"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>30</daysToKeep>
        <numToKeep>-1</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.27">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>TAG</name>
          <description>The tag to install</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>DeployISO</name>
          <description></description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>latest_iso</string>
              <string>official_iso</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ServerIP</name>
          <description></description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>ServerRole</name>
          <description></description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>Master</string>
              <string>VQ</string>
              <string>PM</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>FullTests</name>
          <description>this param is inherited from ovoc build</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>1</string>
              <string>0</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>ems-build</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>true</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>###### Echo parameters for testing
echo -e &quot;TAG:\t${TAG}&quot;
echo -e &quot;ISO:\t${DeployISO}&quot;
echo -e &quot;IP:\t${ServerIP}&quot;
echo -e &quot;Role:\t${ServerRole}&quot;


############################### Begin old Code ##########################
if false; then
# DO NOT RUN ANY OF THIS OLD CODE

## Get prerequisites for current branch
BRANCH=`git branch --no-color -r --contains HEAD | grep -v -e &apos;-&gt;&apos; | head -1 | awk -F&apos;/&apos; &apos;{print $NF}&apos;`

d ${WORKSPACE}/EMS
[[ -d target ]] &amp;&amp; rm -rf target
mkdir target
cd target
for f in common-${BRANCH}-SNAPSHOT.jar \
	server-${BRANCH}-SNAPSHOT.jar \
	rest-core-${BRANCH}-SNAPSHOT.jar \
	oracle_trigger-${BRANCH}-SNAPSHOT.jar \
	database-${BRANCH}-SNAPSHOT.jar
do curl -O -k --user admin:$artiPass https://artifactory/ems-release/com/ac/ems/ovoc_server/Sanity_preReq/$TAG/$f; done


# Copy FKGenerator.ini &amp; Change prerequisite files permissions
cd ${WORKSPACE}/EMS
chmod 0755 target
cp FKGenerator.ini target
chmod -R 0755 target
cd ${WORKSPACE}


# define a default GW - we need it to configure network of tested machine in case version in 7.4.3000 or older
DefaultGateway=&quot;172.16.132.1&quot;
netMask=&quot;24&quot;


#1. create a tested VM: launch new instance from sanity AMI and get its IP address
if [[ &quot;$DeployISO&quot; == &quot;official_iso&quot; ]]
then
	AMI_ID=ami-03b07cb67f9a8730b # &lt;-- without ENA support
    #AMI_ID=ami-0264e23c55ba36c29 # &lt;-- with ENA support
else
	AMI_ID=ami-097a30155f82688fb # &lt;-- without ENA support
    #AMI_ID=ami-035a9df9f78df3db1 # &lt;-- with ENA support
fi

# Luanch instanc from given AMI. First try to use spot, else use on-demand.
emsTestedVM=&quot;$(aws ec2 run-instances --image-id ${AMI_ID} --instance-market-options MarketType=spot --count 1 --instance-type m4.2xlarge --key-name &quot;Jenkins &amp; App subnets machines key pair&quot; --security-group-ids sg-77bce41e --subnet-id subnet-35295a5c || aws ec2 run-instances --image-id ${AMI_ID} --count 1 --instance-type m4.2xlarge --key-name &quot;Jenkins &amp; App subnets machines key pair&quot; --security-group-ids sg-77bce41e --subnet-id subnet-35295a5c)&quot;


#keep instance ID
INSTANCE_ID=&quot;$(echo &quot;${emsTestedVM}&quot; |grep InstanceId |cut -d &apos;&quot;&apos; -f 4)&quot;

#wait for aws instance to get to `running` status
aws ec2 wait instance-running --instance-ids ${INSTANCE_ID}

#add tag to this instans:  &quot;emsSanity&quot;
aws ec2 create-tags --resources ${INSTANCE_ID} --tags Key=Name,Value=emsSanityInstall
#add tag to this instans:  &quot;Spotinst&quot;
aws ec2 create-tags --resources ${INSTANCE_ID} --tags Key=Creator,Value=Spotinst
#set to its delete volume when instance will be terminated
aws ec2 modify-instance-attribute --instance-id ${INSTANCE_ID} --block-device-mappings &quot;{    \&quot;DeviceName\&quot;: \&quot;/dev/sda1\&quot;,    \&quot;Ebs\&quot;: {      \&quot;DeleteOnTermination\&quot;: true    }  } &quot;
#keep ip address into &quot;vmIP&quot;
vmIP=$(aws ec2 describe-instances --instance-id $INSTANCE_ID --output text --query &apos;Reservations[*].Instances[*].PrivateIpAddress&apos;)
#find what is the current branch
BRANCH=`git branch --no-color -r --contains HEAD | grep -v -e &apos;-&gt;&apos; | head -1 | awk -F&apos;/&apos; &apos;{print $NF}&apos;`
if [ $BRANCH == master ]; then BRANCH=&quot;7.4&quot;; fi

echo &quot;INSTANCE_ID=${INSTANCE_ID}&quot; &gt; sanity.properties
echo &quot;vmIP=${vmIP}&quot; &gt;&gt; sanity.properties
#Wait for the instance to startup
echo &quot;Wait until the instance is up&quot;
OLD_STATE=&quot;&quot;
while true; do
    sleep 10
    STATE=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --output text --query &quot;Reservations[0].Instances[0].State.Name&quot;)
    if [[ $STATE != $OLD_STATE ]]; then
        echo $STATE
        OLD_STATE=$STATE
    fi
    if [[ $STATE == &quot;running&quot; ]]; then
        break
    fi
done
echo &quot;Wait until instance is fully loaded&quot;
sleep 100

# if this is a build for QA then configure the tested machine with &quot;ami&quot; - means we set TimeZone London (GMT+0)
# but if this is a regular build then configure the tested machine with &quot;sanity&quot; - means we set TimeZone Israel
if [[ &quot;$DeployISO&quot; == &quot;official_iso&quot; ]]
then
	sanityOrAmi=ami
else
	sanityOrAmi=sanity
fi

#2. run python scripts: set network , install
cd EMS/VersionRelease
# from 7.6 and up we dont send default gateway because the script knows that this is AWS env and learn IP addresses from the machine
python2.7 setNetwork.py $vmIP $sanityOrAmi

echo &quot;Finish SetNetwork Configuration&quot;

#run sanityInstall and if sanity install fails then copy logs and exit with error
echo &quot;Running single script for install&quot;
python2.7 SanityInstall.py $TAG $vmIP $DeployISO || { python2.7 SanityCopyLogs.py $TAG $vmIP ; exit 1; }
echo &quot;Finish SanityInstall&quot;

## Create AMI
if [[ &quot;$DeployISO&quot; == &quot;official_iso&quot; ]]; then
	#check if the ami already exists
	checkIfAmiExists=$(aws ec2 describe-images --filters Name=name,Values=ovocAMI_${TAG} --output text --query &quot;Images[0].State&quot;)
	if [[ &quot;$checkIfAmiExists&quot; == &quot;available&quot; ]]; then
    	echo &quot;Deleting existing AMI of ovocAMI_${TAG}&quot;
        #get AmiId to delete it
        AmiIDToDelete=$(aws ec2 describe-images --filters Name=name,Values=ovocAMI_${TAG} --output text --query &quot;Images[0].ImageId&quot;)
        
        #get Snapshot id - delete the Snapshot
        snapshotIdToDelete=$(aws ec2 describe-images --image-ids $AmiIDToDelete --output text --query Images[*].BlockDeviceMappings[*].Ebs.SnapshotId)
        
        #delete AMI and Snopshot ID
        aws ec2 deregister-image --image-id ${AmiIDToDelete}
        aws ec2 delete-snapshot --snapshot-id ${snapshotIdToDelete}
        sleep 60
	fi
    
	echo &quot;Creating New Ovoc Ami&quot;
	#create a new AMI After installation and keep ImageID value
	AmiId=$(aws ec2 create-image --instance-id ${INSTANCE_ID} --name &quot;ovocAMI_${TAG}&quot; --description &quot;ovoc AMI ${TAG}&quot; --output text --query &quot;ImageId&quot;)
	
    #check if image available
    OLD_STATE=&quot;&quot;
    while true; do
    	sleep 100
        STATE=$(aws ec2 describe-images --image-ids $AmiId --output text --query &quot;Images[0].State&quot;)
        
        if [[ $STATE != $OLD_STATE ]]; then
        	echo $STATE
            OLD_STATE=$STATE
        fi
        
        if [[ $STATE == &quot;available&quot; ]]; then
        	break
        fi
    done
            
	#get Snapshot id -  we need it in order to tag the snapshot as well
	snapshotId=$(aws ec2 describe-images --image-ids $AmiId --output text --query Images[*].BlockDeviceMappings[*].Ebs.SnapshotId)
	
	#give name to the AMI 
	aws ec2 create-tags --resources $AmiId --tags Key=Name,Value=OvocAMI_${TAG}
	#give name to the snapshot 
	aws ec2 create-tags --resources $snapshotId --tags Key=Name,Value=OvocAMI_${TAG}
	#give Branch name to the AMI 
	aws ec2 create-tags --resources $AmiId --tags Key=Branch,Value=$BRANCH
	
	## share the new created AMI with dev and QA teams:
	echo &quot;Sharing the new created AMI with Dev and QA teams:&quot;
	qaAccount=191324562914
	devAccount=952166219867
	#give permissions to ovoc QA Account to the AMI
	aws ec2 modify-image-attribute --image-id $AmiId --launch-permission &quot;{\&quot;Add\&quot;:[{\&quot;UserId\&quot;:\&quot;$qaAccount\&quot;}]}&quot;
	#give permissions to ovoc DEV Account to the Ami
	aws ec2 modify-image-attribute --image-id $AmiId --launch-permission &quot;{\&quot;Add\&quot;:[{\&quot;UserId\&quot;:\&quot;$devAccount\&quot;}]}&quot;
	
	#give permissions to ovoc QA Account to the SnapShot
	aws ec2 modify-snapshot-attribute --snapshot-id $snapshotId --attribute createVolumePermission --operation-type add --user-ids $qaAccount
	#give permissions to ovoc DEV Account to the SnapShot
	aws ec2 modify-snapshot-attribute --snapshot-id $snapshotId --attribute createVolumePermission --operation-type add --user-ids $devAccount
	
	#check if shared
	#checkImagePermissions=$(aws ec2 describe-image-attribute --image-id $AmiId --attribute launchPermission --output text --query &quot;LaunchPermissions[*]&quot;)
	#ImagePermissionsInArray=($checkImagePermissions)
	#if [ ! { [&quot;${ImagePermissionsInArray[1]}&quot; == &quot;$qaAccount&quot;] &amp;&amp; [&quot;${ImagePermissionsInArray[0]}&quot; == &quot;$devAccount&quot;]; } ]; then
	#    echo &quot;**************************************************************************&quot;
	#    echo &quot;give Permissions Failed&quot;
	#    echo &quot;**************************************************************************&quot;
	#fi
fi

fi
############################### End old Code ##########################


</command>
    </hudson.tasks.Shell>
    <EnvInjectBuilder plugin="envinject@2.1.6">
      <info>
        <propertiesFilePath>sanity.properties</propertiesFilePath>
      </info>
    </EnvInjectBuilder>
  </builders>
  <publishers>
    <org.jenkinsci.plugins.postbuildscript.PostBuildScript plugin="postbuildscript@2.5.1">
      <config>
        <scriptFiles/>
        <groovyScripts/>
        <buildSteps>
          <org.jenkinsci.plugins.postbuildscript.model.PostBuildStep>
            <results>
              <string>SUCCESS</string>
              <string>NOT_BUILT</string>
              <string>ABORTED</string>
              <string>FAILURE</string>
              <string>UNSTABLE</string>
            </results>
            <role>SLAVE</role>
            <buildSteps>
              <hudson.tasks.Shell>
                <command>if [[ -d  ${WORKSPACE}/EMS/VersionRelease/logs/ems/tester/rest/PMTemplateTest ]]; then
    cd ${WORKSPACE}/EMS/VersionRelease/logs/ems/tester/rest
    tar zcfv PMTemplateTest.tgz PMTemplateTest &amp;&amp; rm -rf PMTemplateTest
fi</command>
              </hudson.tasks.Shell>
            </buildSteps>
          </org.jenkinsci.plugins.postbuildscript.model.PostBuildStep>
          <org.jenkinsci.plugins.postbuildscript.model.PostBuildStep>
            <results>
              <string>NOT_BUILT</string>
              <string>ABORTED</string>
              <string>FAILURE</string>
              <string>UNSTABLE</string>
            </results>
            <role>SLAVE</role>
            <buildSteps>
              <hudson.tasks.Shell>
                <command>#get all instance id and vm ip
set -a
source ${WORKSPACE}/sanity.properties
set +a

cd ${WORKSPACE}/EMS/VersionRelease
#run copy logs
if [[ &quot;$BRANCH&quot; == &quot;7.4&quot; || &quot;$BRANCH&quot; == &quot;7.4.1000&quot; || &quot;$BRANCH&quot; == &quot;7.4.2000&quot; ]]
then 
	echo &quot;dont run copyLogs&quot;
else
	python2.7 SanityCopyLogs.py $TAG $vmIP
fi

aws ec2 terminate-instances --instance-ids ${INSTANCE_ID}</command>
              </hudson.tasks.Shell>
            </buildSteps>
          </org.jenkinsci.plugins.postbuildscript.model.PostBuildStep>
        </buildSteps>
        <markBuildUnstable>false</markBuildUnstable>
      </config>
    </org.jenkinsci.plugins.postbuildscript.PostBuildScript>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>EMS/VersionRelease/logs/**/*</artifacts>
      <allowEmptyArchive>true</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>false</defaultExcludes>
      <caseSensitive>false</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
    <hudson.tasks.Mailer plugin="mailer@1.30">
      <recipients>shuky.riechard, hadas.attal, gal.erez, Gennady.Tsiporkin, yuval.yosha, ben.magriso,Aliya.Peretz</recipients>
      <dontNotifyEveryUnstableBuild>false</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
  </publishers>
  <buildWrappers>
    <EnvInjectPasswordWrapper plugin="envinject@2.1.6">
      <injectGlobalPasswords>false</injectGlobalPasswords>
      <maskPasswordParameters>true</maskPasswordParameters>
      <passwordEntries>
        <EnvInjectPasswordEntry>
          <name>artiPass</name>
          <value>{AQAAABAAAAAQT0A5kGH1euKydYIrJF5K0a/ovUyKPCPsOeyQ4h01qC0=}</value>
        </EnvInjectPasswordEntry>
      </passwordEntries>
    </EnvInjectPasswordWrapper>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@2.0.3">
      <template>#${BUILD_NUMBER}_${TAG}_${ServerRole}</template>
      <descriptionTemplate></descriptionTemplate>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>