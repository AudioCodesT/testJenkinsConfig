<?xml version="1.1" encoding="UTF-8" standalone="no"?><project>
  <actions/>
  <description/>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.0.10"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.27">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>version</name>
          <description/>
          <defaultValue/>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>repository</name>
          <description/>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>Artifactory</string>
              <string>ECR</string>
              <string>Jfrog</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit/>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>VoiceAI-build</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>## Set docker vars
ART_DOCKER_REG="docker-voice-ai.artifactory.corp.audiocodes.com"
JFROG_DOCKER_REG="Audiocodes-voice-ai.jfrog.io"
ECR_DOCKER_REG="858367874798.dkr.ecr.eu-central-1.amazonaws.com"

## Login to registry &amp; fetch yaml file
case "$repository" in
	"Artifactory")
    	echo ${artiPass} | docker login -u ${artiUser} --password-stdin ${ART_DOCKER_REG}
    	curl -u ${artiUser}:${artiPass} -O https://artifactory:443/docker-voice-ai-files/docker-compose-vag-$version.yml
    	;;
    "ECR")
    	## Create AWS files
		[[ ! -d /home/centos/.aws ]] &amp;&amp; mkdir -p /home/centos/.aws
		cat &lt;&lt;-EOD &gt; /home/centos/.aws/config
		[default]
		region = eu-central-1
		EOD
		cat &lt;&lt;-EOD &gt; /home/centos/.aws/credentials
		[default]
		aws_access_key_id = ${AWS_ACCESS_KEY_ID}
		aws_secret_access_key = ${AWS_SECRET_ACCESS_KEY}
		EOD
        #
    	$(aws ecr get-login --no-include-email --region eu-central-1)
    	curl -O https://voice-ai.s3.eu-central-1.amazonaws.com/docker-compose/$version/docker-compose-vag-ecr-$version.yml
        cp docker-compose-vag-ecr-$version.yml docker-compose-vag-$version.yml
    	;;
    "Jfrog")
    	echo ${jfrogPass} | docker login -u ${jfrogUser} --password-stdin ${JFROG_DOCKER_REG}
    	curl -u ${jfrogUser}:${jfrogPass} -O https://audiocodes.jfrog.io/artifactory/voice-ai-files/docker-compose-vag-$version.yml
    	;;
esac

docker system prune --all --volumes --force

echo "*****************"
cat docker-compose-vag-$version.yml

docker-compose -f docker-compose-vag-${version}.yml pull

docker images

## snyk
echo "***** Start Snyk"
export NODE_TLS_REJECT_UNAUTHORIZED=0
export SNYK_TOKEN=f09d7e87-3cb1-4973-8131-b6e2534e5d2e
#snyk config set disableSuggestions=true
rm snyk.log
for i in $(docker images --format '{{.Repository}}:{{.Tag}}' | grep vag); do snyk test --docker $i &gt;&gt; snyk.log; done
echo "***** End Snyk"
## trivy
echo "***** Start Trivy"
for i in $(docker images --format '{{.Repository}}:{{.Tag}}' | grep vag); do trivy image $i; done &gt; trivy.log
echo "***** End Trivy"</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>*.log</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
  </publishers>
  <buildWrappers>
    <org.jenkinsci.plugins.credentialsbinding.impl.SecretBuildWrapper plugin="credentials-binding@1.22">
      <bindings>
        <org.jenkinsci.plugins.credentialsbinding.impl.UsernamePasswordMultiBinding>
          <credentialsId>e7c58828-5cf7-40cb-9acd-00d9c7419212</credentialsId>
          <usernameVariable>artiUser</usernameVariable>
          <passwordVariable>artiPass</passwordVariable>
        </org.jenkinsci.plugins.credentialsbinding.impl.UsernamePasswordMultiBinding>
        <org.jenkinsci.plugins.credentialsbinding.impl.UsernamePasswordMultiBinding>
          <credentialsId>jenkins-for-jfrog-cloud-artifactory</credentialsId>
          <usernameVariable>jfrogUser</usernameVariable>
          <passwordVariable>jfrogPass</passwordVariable>
        </org.jenkinsci.plugins.credentialsbinding.impl.UsernamePasswordMultiBinding>
        <com.cloudbees.jenkins.plugins.awscredentials.AmazonWebServicesCredentialsBinding plugin="aws-credentials@1.28">
          <credentialsId>e26ebef3-9d54-4910-8686-9989f959e8db</credentialsId>
          <accessKeyVariable>AWS_ACCESS_KEY_ID</accessKeyVariable>
          <secretKeyVariable>AWS_SECRET_ACCESS_KEY</secretKeyVariable>
        </com.cloudbees.jenkins.plugins.awscredentials.AmazonWebServicesCredentialsBinding>
      </bindings>
    </org.jenkinsci.plugins.credentialsbinding.impl.SecretBuildWrapper>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@2.0.3">
      <template>#${BUILD_NUMBER}_${version}_${repository}</template>
      <descriptionTemplate/>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>