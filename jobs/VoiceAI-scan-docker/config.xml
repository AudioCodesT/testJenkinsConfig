<?xml version="1.1" encoding="UTF-8" standalone="no"?><project>
  <actions/>
  <description/>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.0.10"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>30</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.27">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>version</name>
          <description/>
          <defaultValue/>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit/>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>VoiceAI-build</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>
set +e

## Set docker vars
ART_DOCKER_REG="docker-voice-ai.artifactory.corp.audiocodes.com"
JFROG_DOCKER_REG="Audiocodes-voice-ai.jfrog.io"
ECR_DOCKER_REG="858367874798.dkr.ecr.eu-central-1.amazonaws.com"

## Login to registry &amp; fetch yaml file
#case "$repository" in
#	"Artifactory")
#    	echo ${artiPass} | docker login -u ${artiUser} --password-stdin ${ART_DOCKER_REG}
#    	curl -u ${artiUser}:${artiPass} -O https://artifactory:443/docker-voice-ai-files/docker-compose-vag-$version.yml
#    	;;
#    "ECR")
#    	## Create AWS files
#		[[ ! -d /home/centos/.aws ]] &amp;&amp; mkdir -p /home/centos/.aws
#		cat &lt;&lt;-EOD &gt; /home/centos/.aws/config
#		[default]
#		region = eu-central-1
#		EOD
#		cat &lt;&lt;-EOD &gt; /home/centos/.aws/credentials
#		[default]
#		aws_access_key_id = ${AWS_ACCESS_KEY_ID}
#		aws_secret_access_key = ${AWS_SECRET_ACCESS_KEY}
#		EOD
#        #
#    	$(/usr/local/bin/aws ecr get-login --no-include-email --region eu-central-1)
#    	curl -O https://voice-ai.s3.eu-central-1.amazonaws.com/docker-compose/$version/docker-compose-vag-ecr-$version.yml
#        cp docker-compose-vag-ecr-$version.yml docker-compose-vag-$version.yml
#    	;;
#    "Jfrog")
#    	echo ${jfrogPass} | docker login -u ${jfrogUser} --password-stdin ${JFROG_DOCKER_REG}
#    	curl -u ${jfrogUser}:${jfrogPass} -O https://audiocodes.jfrog.io/artifactory/voice-ai-files/docker-compose-vag-$version.yml
#    	;;
#esac

## Create AWS files
[[ ! -d /home/centos/.aws ]] &amp;&amp; mkdir -p /home/centos/.aws
cat &lt;&lt;-EOD &gt; /home/centos/.aws/config
[default]
region = eu-central-1
EOD
cat &lt;&lt;-EOD &gt; /home/centos/.aws/credentials
[default]
aws_access_key_id = ${AWS_ACCESS_KEY_ID}
aws_secret_access_key = ${AWS_SECRET_ACCESS_KEY}
EOD

# Get yaml file for ECR from S3
curl -O https://voice-ai.s3.eu-central-1.amazonaws.com/docker-compose/$version/docker-compose-vag-ecr-$version.yml

# Login to Artifactory docker &amp; get yaml file for Artifactory
echo ${artiPass} | docker login -u ${artiUser} --password-stdin ${ART_DOCKER_REG}
curl -u ${artiUser}:${artiPass} -O https://artifactory:443/docker-voice-ai-files/docker-compose-vag-$version.yml

# Clean docker environment
docker system prune --all --volumes --force

echo "*****************"
cat docker-compose-vag-$version.yml

docker-compose -f docker-compose-vag-${version}.yml pull

docker images

## snyk
echo "***** Start Snyk"
export NODE_TLS_REJECT_UNAUTHORIZED=0
export SNYK_TOKEN=f09d7e87-3cb1-4973-8131-b6e2534e5d2e
#snyk config set disableSuggestions=true
for i in $(docker images --format '{{.Repository}}:{{.Tag}}' | grep vag); do /usr/bin/snyk test --docker $i; done &gt; snyk.log
echo "***** End Snyk"

## trivy
echo "***** Start Trivy"
for i in $(docker images --format '{{.Repository}}:{{.Tag}}' | grep vag); do /usr/local/bin/trivy image $i; done &gt; trivy.log
echo "***** End Trivy"

## ECR Clair
echo "***** Start Retrieve ECR"
# No need to run scan on ECR because all repositories have 'scanOnPush' option.
# BUT, if it is needed, use following line:
# for r in $(grep "image: " docker-compose-vag-ecr-${version}.yml | grep vag | gawk '{print $2}'); do image=$(echo ${r##*/} | cut -d':' -f1); /usr/local/bin/aws ecr start-image-scan --repository-name voice/$image --image-id imageTag=$version; done
for r in $(grep "image: " docker-compose-vag-ecr-${version}.yml | grep vag | gawk '{print $2}'); do image=$(echo ${r##*/} | cut -d':' -f1); /usr/local/bin/aws ecr describe-image-scan-findings --repository-name voice-ai/$image --image-id imageTag=$version &gt; $image.json; done
echo "***** End Retrieve ECR"
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>*.log,*.json</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
    <hudson.plugins.emailext.ExtendedEmailPublisher plugin="email-ext@2.61">
      <recipientList>orgads@audiocodes.com,shmuliky@audiocodes.com</recipientList>
      <configuredTriggers>
        <hudson.plugins.emailext.plugins.trigger.AlwaysTrigger>
          <email>
            <subject>$PROJECT_DEFAULT_SUBJECT</subject>
            <body>$PROJECT_DEFAULT_CONTENT</body>
            <recipientProviders>
              <hudson.plugins.emailext.plugins.recipients.DevelopersRecipientProvider/>
              <hudson.plugins.emailext.plugins.recipients.ListRecipientProvider/>
            </recipientProviders>
            <attachmentsPattern/>
            <attachBuildLog>false</attachBuildLog>
            <compressBuildLog>false</compressBuildLog>
            <replyTo>$PROJECT_DEFAULT_REPLYTO</replyTo>
            <contentType>project</contentType>
          </email>
        </hudson.plugins.emailext.plugins.trigger.AlwaysTrigger>
      </configuredTriggers>
      <contentType>text/html</contentType>
      <defaultSubject>$BUILD_STATUS: Docker Scan</defaultSubject>
      <defaultContent>$DEFAULT_CONTENT</defaultContent>
      <attachmentsPattern>**/*.log,**/vag*.json</attachmentsPattern>
      <presendScript>$DEFAULT_PRESEND_SCRIPT</presendScript>
      <postsendScript>$DEFAULT_POSTSEND_SCRIPT</postsendScript>
      <attachBuildLog>false</attachBuildLog>
      <compressBuildLog>false</compressBuildLog>
      <replyTo>$DEFAULT_REPLYTO</replyTo>
      <saveOutput>false</saveOutput>
      <disabled>false</disabled>
    </hudson.plugins.emailext.ExtendedEmailPublisher>
    <hudson.tasks.Mailer plugin="mailer@1.32">
      <recipients>yuvaly@audiocodes.com shukyr@audiocodes.com</recipients>
      <dontNotifyEveryUnstableBuild>false</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
  </publishers>
  <buildWrappers>
    <org.jenkinsci.plugins.credentialsbinding.impl.SecretBuildWrapper plugin="credentials-binding@1.22">
      <bindings>
        <org.jenkinsci.plugins.credentialsbinding.impl.UsernamePasswordMultiBinding>
          <credentialsId>e7c58828-5cf7-40cb-9acd-00d9c7419212</credentialsId>
          <usernameVariable>artiUser</usernameVariable>
          <passwordVariable>artiPass</passwordVariable>
        </org.jenkinsci.plugins.credentialsbinding.impl.UsernamePasswordMultiBinding>
        <org.jenkinsci.plugins.credentialsbinding.impl.UsernamePasswordMultiBinding>
          <credentialsId>jenkins-for-jfrog-cloud-artifactory</credentialsId>
          <usernameVariable>jfrogUser</usernameVariable>
          <passwordVariable>jfrogPass</passwordVariable>
        </org.jenkinsci.plugins.credentialsbinding.impl.UsernamePasswordMultiBinding>
        <com.cloudbees.jenkins.plugins.awscredentials.AmazonWebServicesCredentialsBinding plugin="aws-credentials@1.28">
          <credentialsId>e26ebef3-9d54-4910-8686-9989f959e8db</credentialsId>
          <accessKeyVariable>AWS_ACCESS_KEY_ID</accessKeyVariable>
          <secretKeyVariable>AWS_SECRET_ACCESS_KEY</secretKeyVariable>
        </com.cloudbees.jenkins.plugins.awscredentials.AmazonWebServicesCredentialsBinding>
      </bindings>
    </org.jenkinsci.plugins.credentialsbinding.impl.SecretBuildWrapper>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@2.0.3">
      <template>#${BUILD_NUMBER}_${version}</template>
      <descriptionTemplate/>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>