<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@2.38">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.6.0"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.6.0">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>NEW_TAG</string>
        <string>DeployISO</string>
        <string>sanityType</string>
      </parameters>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description/>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.0.10"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>30</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableResumeJobProperty/>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.27">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>NEW_TAG</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>DeployISO</name>
          <description/>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>official_iso</string>
              <string>latest_iso</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>sanityType</name>
          <description/>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>full</string>
              <string>short</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit/>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    <EnvInjectJobProperty plugin="envinject@2.3.0">
      <info>
        <scriptContent>cat &lt;&lt;-EOD &gt; /home/centos/.aws/credentials
[default]
aws_access_key_id = ${jenkinsAWSkey}
aws_secret_access_key = ${jenkinsAWSsecret}
EOD

cat &lt;&lt;-EOD &gt; /home/centos/.aws/config
[default]
output = json
region = eu-central-1
EOD

cat /home/centos/.aws/credentials
cat /home/centos/.aws/config</scriptContent>
        <secureGroovyScript plugin="script-security@1.71">
          <script/>
          <sandbox>false</sandbox>
        </secureGroovyScript>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
      <on>true</on>
      <keepJenkinsSystemVariables>true</keepJenkinsSystemVariables>
      <keepBuildVariables>true</keepBuildVariables>
      <overrideBuildParameters>false</overrideBuildParameters>
    </EnvInjectJobProperty>
    
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.78">
    <script>def mgmtIP = ""
def mgmtId = ""
def vqmIP = ""
def vqmId = ""
def pmIP = ""
def pmId = ""

def runInstance(role) {

    println(role)

    def ec2SGId = "sg-77bce41e"
    def ec2SNId = "subnet-35295a5c"
    def ec2iTyp = "t2.2xlarge"
    def ec2Key = "AudioCodes-CICD-Apps"
    def instId = ""
    def ipAddr = ""
    def imageId = ""

    switch(role) {
        case "management":
            imageId = "ami-07086aac097e65a53";
            break;
        case "vqm":
            imageId = "ami-005e7916df1f0ea46";
            break;
        case "pm":
            imageId = "ami-005e7916df1f0ea46";
            break;
    }

    sh "aws ec2 run-instances --region eu-central-1 --image-id ${imageId} --instance-type ${ec2iTyp} --instance-market-options MarketType=spot --count 1 --security-group-ids ${ec2SGId} --subnet-id ${ec2SNId} --key-name ${ec2Key} &gt; ${WORKSPACE}/run-inst.json"
    sh "cat ${WORKSPACE}/run-inst.json"
    sh "aws ec2 create-tags --resources ${instId} --tags Key=Name,Value=OVOC_Elasticity_${JOB_NAME}_${role} Key=Creator,Value=Spotinst"
    sh "aws ec2 modify-instance-attribute --instance-id ${instId} --block-device-mappings DeviceName=/dev/sda1,Ebs={DeleteOnTermination=true}"
    sh "aws ec2 wait instance-status-ok --instance-ids ${instId}"

    def runJsonFile = readJSON file: "${env.WORKSPACE}/run-inst.json";

    instId = (runJsonFile.Instances.InstanceId).toString().replaceAll("\\[|\\]", "")
    println(instId)
    ipAddr = (runJsonFile.Instances.PrivateIpAddress).toString().replaceAll("\\[|\\]", "")
    println(ipAddr)

    switch(role) {
        case "management":
            env.mgmtId = instId;
            env.mgmtIP = ipAddr;
            println(env.mgmtId);
            printlv(env.mgmtIP);
            break;
        case "vqm":
            env.vqmId = instId;
            env.vqmIP = ipAddr;
            println(env.vqmId);
            println(env.vqmIP);
            break;
        case "pm":
            env.pmId = instId;
            env.pmIP = ipAddr;
            println(env.pmId);
            println(env.pmIP);
            break;
    }
}


pipeline {
    agent {
        node {
            label 'ems-build'
        }
    }
    parameters {
        string(name: 'NEW_TAG', defaultValue: '', description: '')
        choice(name: 'DeployISO', choices: ['official_iso', 'latest_iso'], description: '')
        choice(name: 'sanityType', choices: ['full', 'short'], description: '')
    }
    stages {
        stage('Build Properties') {
            steps {
                script {
                    currentBuild.displayName = "${BUILD_NUMBER}_new_${NEW_TAG}"
                    currentBuild.description = ""
                }
            }
        }
        stage('Install Nodes - New Tag') {
            failFast true
            parallel {
                stage('Install management') {
                    agent {
                        node {
                            label 'ems-build'
                            customWorkspace "${JOB_NAME}_management"
                        }
                    }
                    steps {
                        runInstance('management')
                        build job: 'OVOC-Cluster-DVD-Install', parameters: [
                            string(name: 'TAG', value: "${params.NEW_TAG}"),
                            string(name: 'ServerRole', value: 'management'),
                            string(name: 'ServerIP', value: "${env.mgmtIP}"),
                            string(name: 'DeployISO', value: "${params.DeployISO}")
                        ]
                    }
                }
                stage('Install vqm') {
                    agent {
                        node {
                            label 'ems-build'
                            customWorkspace "${JOB_NAME}_vqm"
                        }
                    }
                    steps {
                        runInstance('vqm')
                        build job: 'OVOC-Cluster-DVD-Install', parameters: [
                            string(name: 'TAG', value: "${params.NEW_TAG}"),
                            string(name: 'ServerRole', value: 'vqm'),
                            string(name: 'ServerIP', value: "${env.vqmIP}"),
                            string(name: 'DeployISO', value: "${params.DeployISO}")
                        ]
                    }
                }
                stage('Install pm') {
                    agent {
                        node {
                            label 'ems-build'
                            customWorkspace "${JOB_NAME}_pm"
                        }
                    }
                    steps {
                        runInstance('pm')
                        build job: 'OVOC-Cluster-DVD-Install', parameters: [
                            string(name: 'TAG', value: "${params.NEW_TAG}"),
                            string(name: 'ServerRole', value: 'pm'),
                            string(name: 'ServerIP', value: "${env.pmIP}"),
                            string(name: 'DeployISO', value: "${params.DeployISO}")
                        ]
                    }
                }
            }
        }
        stage('GiT checkout') {
            steps {
                sh '''
                    cd "${WORKSPACE}/.."
                    [[ -d ovoc ]] &amp;&amp; rm -rf ovoc
                    mkdir ovoc
                '''
                dir ("${env.WORKSPACE}/../ovoc") {
                    checkout([$class: 'GitSCM', branches: [[name: "server_${NEW_TAG}"]], userRemoteConfigs: [[credentialsId: 'fef9964a-ddb7-4ce6-a445-a99a9e9802c0', url: 'ssh://jenkins@test-gerrit:29418/EMS/ovoc_server']]])
                }
            }
        }
        stage('Configure Cluster - New Tags') {
            steps {
                withEnv(["vmqIP=${vmqIP}", "pmIP=${pmIP}"]) {
                    sh '''
                       cd "${WORKSPACE}/../ovoc/EMS/VersionRelease"
                       python2.7 ConnectHighScaleSystem.py "${mgmtIP}" "${vqmIP}" VQM
                       python2.7 ConnectHighScaleSystem.py "${mgmtIP}" "${pmIP}" PM
                    '''
                }
            }
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>