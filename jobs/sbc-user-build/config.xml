<?xml version="1.1" encoding="UTF-8" standalone="no"?><matrix-project plugin="matrix-project@1.14">
  <actions/>
  <description/>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.0.10"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>60</daysToKeep>
        <numToKeep>-1</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.27">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>BUILD_NAME</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BOARDS</name>
          <description>Board types, space separated. e.g. MP500_MSBG, MP500_ESBC, M4000, HostedTP...</description>
          <defaultValue>MP500_MSBG</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>LI</name>
          <description>Build li version</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>SIP</name>
          <description>Build SIP</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>LAB</name>
          <description>Build LAB version</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>GERRIT_REFSPEC</name>
          <description>Possible values:
&lt;ul&gt;
  &lt;li&gt;Branch (6.6, 6.8)&lt;/li&gt;
  &lt;li&gt;Baseline (6.70A.005)&lt;/li&gt;
  &lt;li&gt;Tag (my-compilation-test)&lt;/li&gt;
  &lt;li&gt;refs/changes/... from gerrit's Download link (e.g. refs/changes/78/1078/1)&lt;/li&gt;
&lt;/ul&gt;</description>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>EXTRA_RECIPIENTS</name>
          <description>Comma-separated list of &lt;b&gt;additional&lt;/b&gt; recipients on build success/failure (requester always receives an email).</description>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>USE_GIT_VER</name>
          <description/>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>DEBUG_VERSION</name>
          <description/>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>CHANGES</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>1</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <matrixOptions>
        <throttleMatrixBuilds>false</throttleMatrixBuilds>
        <throttleMatrixConfigurations>true</throttleMatrixConfigurations>
      </matrixOptions>
      <paramsToUseForLimit/>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    <EnvInjectJobProperty plugin="envinject@2.3.0">
      <info>
        <propertiesContent>ARTIFACTORY_HOST=artifactory
DEPENDENCIES_FOLDER=TrunkPackRam/TPApp/MPCBin
BRDVERSION=TrunkPackRam/Bsps/Common/Include/BrdVersion.h
PATH=/bin:$PATH</propertiesContent>
        <secureGroovyScript plugin="script-security@1.71">
          <script/>
          <sandbox>false</sandbox>
        </secureGroovyScript>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
      <on>true</on>
      <keepJenkinsSystemVariables>true</keepJenkinsSystemVariables>
      <keepBuildVariables>true</keepBuildVariables>
      <overrideBuildParameters>false</overrideBuildParameters>
    </EnvInjectJobProperty>
    
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@4.2.2">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <refspec>$GERRIT_REFSPEC +refs/heads/*:refs/remotes/origin/*</refspec>
        <url>ssh://jenkins@test-gerrit:29418/TP/GWApp</url>
        <credentialsId>fef9964a-ddb7-4ce6-a445-a99a9e9802c0</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>$GERRIT_REFSPEC</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.BuildChooserSetting>
        <buildChooser class="com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTriggerBuildChooser" plugin="gerrit-trigger@2.30.5">
          <separator>#</separator>
        </buildChooser>
      </hudson.plugins.git.extensions.impl.BuildChooserSetting>
      <hudson.plugins.git.extensions.impl.CleanBeforeCheckout>
        <deleteUntrackedNestedRepositories>false</deleteUntrackedNestedRepositories>
      </hudson.plugins.git.extensions.impl.CleanBeforeCheckout>
      <hudson.plugins.git.extensions.impl.CloneOption>
        <shallow>false</shallow>
        <noTags>false</noTags>
        <reference>/gerrit_mnt/TP/GWApp.git</reference>
        <depth>0</depth>
        <honorRefspec>false</honorRefspec>
      </hudson.plugins.git.extensions.impl.CloneOption>
    </extensions>
  </scm>
  <assignedNode>sbc-mc-fathers</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>true</concurrentBuild>
  <axes>
    <hudson.matrix.LabelAxis>
      <name>label</name>
      <values>
        <string>sbc-linux-build</string>
      </values>
    </hudson.matrix.LabelAxis>
    <ca.silvermaplesolutions.jenkins.plugins.daxis.DynamicAxis plugin="dynamic-axis@1.0.3">
      <name>BOARD</name>
      <values>
        <string>BOARDS</string>
      </values>
      <varName>BOARDS</varName>
      <axisValues>
        <string>default</string>
      </axisValues>
    </ca.silvermaplesolutions.jenkins.plugins.daxis.DynamicAxis>
  </axes>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/sh -x

artifactory_host=${ARTIFACTORY_HOST}
output_folder=${DEPENDENCIES_FOLDER}
User="$artifactory_user:$artifactory_password"
TargetArtifactory=user/Firmware/${BUILD_NUMBER}

# find the board that need to be compiled
rm -f $output_folder/*external_version_data.h generated_sbc_version.properties

cat OpenSource/$BOARD.deps

sudo chmod -R 755 .
sudo chown -R centos:centos .

cd TrunkPackRam

# Find if this build should use another Opensorce Images with the same Commit change-ID
chmod 600 ../id_rsa_gerrit
&gt; othersCommits.txt
if ! git show-branch --list | grep -q $GERRIT_REFSPEC; then
  ID=$(ssh -p 29418 -i ../id_rsa_gerrit jenkins@test-gerrit gerrit query $GERRIT_REFSPEC | grep -m1 id: | cut -d: -f2 | sed 's: ::g')
  ssh -p 29418 -i ../id_rsa_gerrit jenkins@test-gerrit gerrit query --current-patch-set change:$ID status:open | \
     grep -A30 OpenSource | grep 'project\|revision' &gt; othersCommits.txt || echo ChangeId not found
fi

while IFS= read -r line; do
   if echo $line | grep -q project; then path=$(echo $line | cut -d: -f2 | sed 's:TP/::; s: ::g');
   elif echo $line | grep -q revision; then
     revision=$(echo $line | cut -d: -f2)
     git ls-files --stage ../$path
     git update-index --cacheinfo 160000 $revision $path
     git ls-files --stage ../$path
   fi
done &lt; othersCommits.txt

if [[ $CHANGES != "" ]]; then 
  for rep in $CHANGES; do 
    path=$(echo $rep | cut -d: -f1 | sed 's:TP/::')
    revision=$(echo $rep | cut -d: -f2)
    echo update $path to revision $revision
    git update-index --cacheinfo 160000 $revision $path
  done
fi

depsName=$BOARD
if [ -e ../OpenSource/$depsName.deps ]; then
  if [ ! -e GetImages.sh ]; then  curl -ks https://test-gerrit/static/GetImages.sh --output GetImages.sh; fi
  chmod +x GetImages.sh
  ./GetImages.sh $depsName $artifactory_host $User "" "-i ../id_rsa_gerrit jenkins@test-gerrit"
  if [ $? -eq 1 ]; then exit 2; fi
fi

if [ -e TPApp/MPCBin/adsl_vrx_ext_version_data.h ]; then
  cp -f TPApp/MPCBin/adsl_vrx_ext_version_data.h Networking/ApplicationsAndProtocols/CLI
fi

if [ -f MakeBrdVersion.sh ]; then
  NEWTAG=`./MakeBrdVersion.sh`
else
  [ -f ../Shared/Versioning/Utils/MakeBrdVersion.sh ] &amp;&amp; NEWTAG=`../Shared/Versioning/Utils/MakeBrdVersion.sh ../`
fi
echo TAG Found $NEWTAG

#chmod +x MakeBrdVersion.sh
#NEWTAG=`./MakeBrdVersion.sh`
#head -12 Bsps/Common/Include/BrdVersion.h | tail -3

cd ..
realBOARD=$BOARD
SIPLAB=""
[ "$BOARD" = "HostedTP8" ] &amp;&amp; SIPLAB=${SIPLAB}_CENTOS8 &amp;&amp; realBOARD="HostedTP"
[ "$LI" = 'true' ] &amp;&amp; SIPLAB=${SIPLAB}_LI
[ "$SIP" = 'true' ] &amp;&amp; SIPLAB=${SIPLAB}_SIP
[ "$LAB" = 'true' ] &amp;&amp; SIPLAB=${SIPLAB}_LAB
echo BOARDNAME=${realBOARD}${SIPLAB} &gt;&gt; generated_sbc_version.properties

if [ "$DEBUG_VERSION" = "true" ]; then
  Fix=$(echo ${BUILD_NAME}: | cut -d: -f2)
  BUILD_NAME=${BUILD_NAME/:*/}
  # If Fix is not a number, clear it
  [ "$Fix" -eq "$Fix" ] || Fix=
  if echo $BUILD_NAME | grep -q /; then BUILD_NAME=AudioCodes; fi
  if [ -z "$Fix" ]; then
    Fix=$(echo $NEWTAG | cut -d. -f4 | sed -r 's/^0*//')
    if [ -n "$Fix" ] &amp;&amp; [ "$Fix" -eq "$Fix" ] 2&gt;/dev/null; then
      # Fix=$(echo $NEWTAG | cut -d. -f4 | sed -r 's/^0*//')
      for i in {1..5}; do Fix=$(( $Fix + 100 )); if [ $Fix -gt 900 ]; then break; fi done
    fi
  fi
  NEWTAG=$(echo $NEWTAG | cut -d. -f1-3).$Fix
  sed -i "s/#define FIX_TRUNKPACK_SOFTWARE_VERSION.*$/#define FIX_TRUNKPACK_SOFTWARE_VERSION			$Fix/" TrunkPackRam/Bsps/Common/Include/BrdVersion.h
  TargetArtifactory=debug/${BUILD_NAME}/${BUILD_NUMBER}
fi

echo TargetArtifactory=$TargetArtifactory &gt;&gt; generated_sbc_version.properties
echo NEWTAG=${NEWTAG} &gt;&gt; generated_sbc_version.properties
</command>
      <unstableReturn>2</unstableReturn>
    </hudson.tasks.Shell>
    <EnvInjectBuilder plugin="envinject@2.3.0">
      <info>
        <propertiesFilePath>generated_sbc_version.properties</propertiesFilePath>
      </info>
    </EnvInjectBuilder>
    <hudson.tasks.Shell>
      <command>git log -n30 --pretty=format:%h%x09%an%x09%s%n HEAD --not --remotes

cd TrunkPackRam

FLAGS=""
[ "${BOARD}" = "HostedTP8" ] &amp;&amp; FLAGS="$FLAGS --centos=8" &amp;&amp; BOARD="HostedTP"
[ "$LI" = 'true' ] &amp;&amp; FLAGS="$FLAGS --li=yes"
[ "$SIP" = 'true' ] &amp;&amp; FLAGS="$FLAGS --sip=yes"
[ "$LAB" = 'true' ] &amp;&amp; FLAGS="$FLAGS --lab=yes"
[ "$USE_GIT_VER" = 'true' ] &amp;&amp; FLAGS="$FLAGS --custom-version=-u${BUILD_NUMBER}"
./buildAll.sh --board=${BOARD} $FLAGS --user=no --fast=yes --server=localhost

cd ${WORKSPACE}/CompilationResults/ram${BOARDNAME}/TPApp/MPCBin
if [ "$DEBUG_VERSION" = "true" ]; then
  if echo $BUILD_NAME | grep -q /; then BUILD_NAME=AudioCodes; fi
  BUILD_NAME=${BUILD_NAME/:*/}
  fullname=${BOARDNAME}_${NEWTAG}-u${BUILD_NUMBER}-${BUILD_NAME/\//-}
else
  fullname=${BOARDNAME}_${NEWTAG}-u${BUILD_NUMBER}
fi
xz -T 0 ram${BOARDNAME}.map
xz -T 0 ram${BOARDNAME}.elf
rename ram${BOARDNAME} ${fullname} *.xz *.cmp</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <org.jenkins__ci.plugins.flexible__publish.FlexiblePublisher plugin="flexible-publish@0.15.2">
      <publishers>
        <org.jenkins__ci.plugins.flexible__publish.ConditionalPublisher>
          <condition class="org.jenkins_ci.plugins.run_condition.core.AlwaysRun" plugin="run-condition@1.3"/>
          <publisherList>
            <org.jenkinsci.plugins.postbuildscript.PostBuildScript plugin="postbuildscript@2.5.1">
              <config>
                <scriptFiles/>
                <groovyScripts/>
                <buildSteps>
                  <org.jenkinsci.plugins.postbuildscript.model.PostBuildStep>
                    <results>
                      <string>SUCCESS</string>
                    </results>
                    <role>BOTH</role>
                    <buildSteps>
                      <hudson.tasks.Shell>
                        <command>export PATH=$HOME/Utils:$PATH
#if in rare case update-utils failed - we just continue without it
git update-utils || echo "*****  update-utils failed, we don't care  *****"
git jenkins-report 0
</command>
                      </hudson.tasks.Shell>
                    </buildSteps>
                  </org.jenkinsci.plugins.postbuildscript.model.PostBuildStep>
                </buildSteps>
                <markBuildUnstable>false</markBuildUnstable>
              </config>
            </org.jenkinsci.plugins.postbuildscript.PostBuildScript>
            <org.jenkinsci.plugins.postbuildscript.PostBuildScript plugin="postbuildscript@2.5.1">
              <config>
                <scriptFiles/>
                <groovyScripts/>
                <buildSteps>
                  <org.jenkinsci.plugins.postbuildscript.model.PostBuildStep>
                    <results>
                      <string>FAILURE</string>
                    </results>
                    <role>BOTH</role>
                    <buildSteps>
                      <hudson.tasks.Shell>
                        <command>export PATH=$HOME/Utils:$PATH
#if in rare case update-utils failed - we just continue without it
git update-utils || echo "*****  update-utils failed, we don't care  *****"
git jenkins-report 1
</command>
                      </hudson.tasks.Shell>
                    </buildSteps>
                  </org.jenkinsci.plugins.postbuildscript.model.PostBuildStep>
                </buildSteps>
                <markBuildUnstable>false</markBuildUnstable>
              </config>
            </org.jenkinsci.plugins.postbuildscript.PostBuildScript>
          </publisherList>
          <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.3"/>
          <executionStrategy class="org.jenkins_ci.plugins.flexible_publish.strategy.FailAtEndExecutionStrategy"/>
        </org.jenkins__ci.plugins.flexible__publish.ConditionalPublisher>
      </publishers>
    </org.jenkins__ci.plugins.flexible__publish.FlexiblePublisher>
    <org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder plugin="groovy-postbuild@2.4.3">
      <script plugin="script-security@1.71">
        <script>artfcty_pat = ~/Deploying artifact: https:\/\/(.+\/)([^\/\s]+\b)/

// Adds artifacts from child build
def add_artifacts(artifacts, build) {
    // match "Deploying artifact: (.+)"
    def matches = build.logFile.text =~ artfcty_pat
    matches.each {
        if (!it[2].endsWith('.h')) // Ignore header files
            artifacts.appendText("&lt;li&gt;&lt;a href=\"https://sbc-read:sbc-read@${it[1]}${it[2]}\"&gt;${it[2]}&lt;/a&gt;&lt;/li&gt;", false)
    }
}

def isMatrix = manager.buildIsA(hudson.matrix.MatrixBuild.class)
// Change pattern is an optional 'I' followed by 7-10 hexadecimal chars, tab, author, tab, subject
def change_pattern = ~/(?m)^(I?[0-9a-f]{7,10})\t([^\t]*)\t(.*)$/
def change_build = manager.build
// For matrix build, read the changes from the first child
if (isMatrix &amp;&amp; change_build.exactRuns.size() &gt; 0)
    change_build = change_build.exactRuns.get(0)
def m = change_build.logFile.text =~ change_pattern
if (m.count &gt; 0) {
    summary = manager.createSummary("notepad.png")
    summary.appendText("Changes:&lt;ul&gt;", false)
    // Write the changes, linked to gerrit
    m.each {
        summary.appendText("&lt;li&gt;&lt;a href=\"https://test-gerrit/r/${it[1]}\"&gt;${it[1]}&lt;/a&gt; - ${it[2]} - ${it[3]}&lt;/li&gt;", false)
    }
    summary.appendText("&lt;/ul&gt;", false)
}

artifacts = manager.createSummary("package.png")
targetArtifactory="user/Firmware/" + manager.build.number
variables = manager.build.buildVariableResolver
// If this is a debug version, write it in large font (h2) and keep forever
if (variables.resolve("DEBUG_VERSION") == "true") {
    artifacts.appendText("&lt;h2&gt;Customer Version&lt;/h2&gt;&lt;p /&gt;", false)
    manager.build.keepLog(true) // Keep this build forever
    targetArtifactory="debug/" + variables.resolve("BUILD_NAME").replace(/:.*$/, "") + "/" + manager.build.number
}
artifacts.appendText("&lt;a href=\"https://sbc-read:sbc-read@artifactory/webapp/#/artifacts/browse/tree/General/sbc-review/com/ac/sbc/" + targetArtifactory + "\"&gt;Build Artifacts:&lt;/a&gt;&lt;ul&gt;", false)
// For matrix build, collect artifacts from all child builds. For normal build collect from self
if (isMatrix) {
    manager.build.exactRuns.each { run -&gt; add_artifacts(artifacts, run) }
} else {
    add_artifacts(artifacts, manager.build);
}
artifacts.appendText("&lt;/ul&gt;", false)
</script>
        <sandbox>false</sandbox>
      </script>
      <behavior>0</behavior>
      <runForMatrixParent>true</runForMatrixParent>
    </org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder>
    <hudson.plugins.emailext.ExtendedEmailPublisher plugin="email-ext@2.61">
      <recipientList>$DEFAULT_RECIPIENTS,$EXTRA_RECIPIENTS</recipientList>
      <configuredTriggers>
        <hudson.plugins.emailext.plugins.trigger.FailureTrigger>
          <email>
            <subject>$PROJECT_DEFAULT_SUBJECT</subject>
            <body>$PROJECT_DEFAULT_CONTENT</body>
            <recipientProviders>
              <hudson.plugins.emailext.plugins.recipients.ListRecipientProvider/>
              <hudson.plugins.emailext.plugins.recipients.RequesterRecipientProvider/>
            </recipientProviders>
            <attachmentsPattern/>
            <attachBuildLog>false</attachBuildLog>
            <compressBuildLog>false</compressBuildLog>
            <contentType>project</contentType>
          </email>
        </hudson.plugins.emailext.plugins.trigger.FailureTrigger>
        <hudson.plugins.emailext.plugins.trigger.SuccessTrigger>
          <email>
            <subject>$PROJECT_DEFAULT_SUBJECT</subject>
            <body>$PROJECT_DEFAULT_CONTENT</body>
            <recipientProviders>
              <hudson.plugins.emailext.plugins.recipients.ListRecipientProvider/>
              <hudson.plugins.emailext.plugins.recipients.RequesterRecipientProvider/>
            </recipientProviders>
            <attachmentsPattern/>
            <attachBuildLog>false</attachBuildLog>
            <compressBuildLog>false</compressBuildLog>
            <replyTo>$PROJECT_DEFAULT_REPLYTO</replyTo>
            <contentType>project</contentType>
          </email>
        </hudson.plugins.emailext.plugins.trigger.SuccessTrigger>
      </configuredTriggers>
      <contentType>text/html</contentType>
      <defaultSubject>$DEFAULT_SUBJECT - $BUILD_NAME</defaultSubject>
      <defaultContent>${SCRIPT, template="groovy-gwapp.template"}</defaultContent>
      <attachmentsPattern/>
      <presendScript/>
      <postsendScript/>
      <attachBuildLog>false</attachBuildLog>
      <compressBuildLog>false</compressBuildLog>
      <replyTo/>
      <saveOutput>false</saveOutput>
      <disabled>false</disabled>
      <matrixTriggerMode>ONLY_PARENT</matrixTriggerMode>
    </hudson.plugins.emailext.ExtendedEmailPublisher>
    <com.chikli.hudson.plugin.naginator.NaginatorPublisher plugin="naginator@1.17.2">
      <regexpForRerun>Need to wait for dependent artifact</regexpForRerun>
      <rerunIfUnstable>true</rerunIfUnstable>
      <rerunMatrixPart>true</rerunMatrixPart>
      <checkRegexp>true</checkRegexp>
      <regexpForMatrixStrategy>TestChildrenRetriggerMatched</regexpForMatrixStrategy>
      <noChildStrategy>DontRun</noChildStrategy>
      <delay class="com.chikli.hudson.plugin.naginator.FixedDelay">
        <delay>600</delay>
      </delay>
      <maxSchedule>3</maxSchedule>
    </com.chikli.hudson.plugin.naginator.NaginatorPublisher>
  </publishers>
  <buildWrappers>
    <com.michelin.cio.hudson.plugins.copytoslave.CopyToSlaveBuildWrapper plugin="copy-to-slave@1.4.4">
      <includes>id_rsa_gerrit</includes>
      <excludes/>
      <flatten>false</flatten>
      <includeAntExcludes>false</includeAntExcludes>
      <hudsonHomeRelative>false</hudsonHomeRelative>
      <relativeTo>userContent</relativeTo>
    </com.michelin.cio.hudson.plugins.copytoslave.CopyToSlaveBuildWrapper>
    <org.jfrog.hudson.generic.ArtifactoryGenericConfigurator plugin="artifactory@3.6.1">
      <deployerDetails>
        <artifactoryName>artifactory2-pro</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <deployReleaseRepository>
          <keyFromText/>
          <keyFromSelect>sbc-review</keyFromSelect>
          <dynamicMode>false</dynamicMode>
        </deployReleaseRepository>
        <stagingPlugin/>
      </deployerDetails>
      <resolverDetails>
        <artifactoryName>artifactory2-pro</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <stagingPlugin/>
      </resolverDetails>
      <deployerCredentialsConfig>
        <credentialsId/>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </deployerCredentialsConfig>
      <resolverCredentialsConfig>
        <credentialsId/>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </resolverCredentialsConfig>
      <useSpecs>false</useSpecs>
      <uploadSpec>
        <spec/>
      </uploadSpec>
      <downloadSpec>
        <spec/>
      </downloadSpec>
      <deployPattern>${WORKSPACE}/CompilationResults/ram${BOARDNAME}/TPApp/MPCBin/${BOARDNAME}_*.cmp=&gt;com/ac/sbc/${TargetArtifactory}
${WORKSPACE}/CompilationResults/ram${BOARDNAME}/TPApp/MPCBin/${BOARDNAME}_*.xz=&gt;com/ac/sbc/${TargetArtifactory}/map
$WORKSPACE/${BRDVERSION}=&gt;com/ac/sbc/${TargetArtifactory}
${WORKSPACE}/TrunkPackRam/TPApp/MPCBin/*external*.h=&gt;com/ac/sbc/${TargetArtifactory}</deployPattern>
      <resolvePattern/>
      <deploymentProperties/>
      <deployBuildInfo>true</deployBuildInfo>
      <includeEnvVars>true</includeEnvVars>
      <envVarsPatterns>
        <includePatterns/>
        <excludePatterns>*password*,*secret*,*key*</excludePatterns>
      </envVarsPatterns>
      <discardOldBuilds>true</discardOldBuilds>
      <discardBuildArtifacts>true</discardBuildArtifacts>
      <asyncBuildRetention>false</asyncBuildRetention>
      <artifactoryCombinationFilter>label=="sbc-linux-build"</artifactoryCombinationFilter>
      <multiConfProject>true</multiConfProject>
      <customBuildName/>
      <overrideBuildName>false</overrideBuildName>
    </org.jfrog.hudson.generic.ArtifactoryGenericConfigurator>
    <EnvInjectBuildWrapper plugin="envinject@2.3.0">
      <info>
        <propertiesContent>artifactory_user=jenkins</propertiesContent>
        <secureGroovyScript plugin="script-security@1.71">
          <script/>
          <sandbox>false</sandbox>
        </secureGroovyScript>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
    </EnvInjectBuildWrapper>
    <EnvInjectPasswordWrapper plugin="envinject@2.3.0">
      <injectGlobalPasswords>false</injectGlobalPasswords>
      <maskPasswordParameters>true</maskPasswordParameters>
      <passwordEntries>
        <EnvInjectPasswordEntry>
          <name>artifactory_password</name>
          <value>{AQAAABAAAAAQTTro5aLKXq8uSWqNRyvBqggyop7FAmIU91nIzhKIHkE=}</value>
        </EnvInjectPasswordEntry>
      </passwordEntries>
    </EnvInjectPasswordWrapper>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@2.0.3">
      <template>#${BUILD_NUMBER},${ENV,var="BUILD_NAME"}</template>
      <descriptionTemplate/>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
  <executionStrategy class="hudson.matrix.DefaultMatrixExecutionStrategyImpl">
    <runSequentially>false</runSequentially>
  </executionStrategy>
  <childCustomWorkspace>/home/centos/jenkinsslave/workspace/TP_GWApp</childCustomWorkspace>
</matrix-project>