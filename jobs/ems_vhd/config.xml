<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Create Hyper-V VM for ovoc server official release</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.27">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>TAG</name>
          <description></description>
          <defaultValue></defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>BaseVM</name>
          <description></description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>ovoc-7.6-base</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@3.8.0">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>ssh://jenkins@test-gerrit:29418/EMS/ovoc_server.git</url>
        <credentialsId>fef9964a-ddb7-4ce6-a445-a99a9e9802c0</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>refs/tags/server_${TAG}</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <browser class="hudson.plugins.git.browser.GitBlitRepositoryBrowser">
      <url></url>
      <projectName></projectName>
    </browser>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.CleanBeforeCheckout/>
      <hudson.plugins.git.extensions.impl.CloneOption>
        <shallow>true</shallow>
        <noTags>false</noTags>
        <reference></reference>
        <timeout>30</timeout>
        <depth>10</depth>
        <honorRefspec>false</honorRefspec>
      </hudson.plugins.git.extensions.impl.CloneOption>
    </extensions>
  </scm>
  <assignedNode>ems_ova</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>##################### Fixing Sanity scripts to fit Hyper-V build ######################
cd ${WORKSPACE}

sed -i &apos;s/Waiting 300/Waiting 500/g&apos; EMS/VersionRelease/SanityReboot.py
sed -i &apos;s/time.sleep(300)/time.sleep(500)/g&apos; EMS/VersionRelease/SanityReboot.py
#######################################################################################


#######################################################################################
#######################################################################################
# NOTE: It is impossible to pass local vars to the powershell command inside
# the ssh command.
#    The solution is to create a variable that holds the full ssh command -
#    (When using Windows path, the back-slashes must be escaped with a back-slash
#    SSHCMD=&quot;powershell -c &apos;Some-PScommand ${local_var} C:\\windows\\path\\${local_var}&quot;
#    echo $SSHCMD | ssh centos@${HostIP}
#######################################################################################
#######################################################################################

# Set the following values to fit your need
vmHostIP=&quot;10.7.10.117&quot;
netMask=&quot;16&quot;
DefaultGW=&quot;10.7.0.1&quot;
vmip=&quot;10.7.10.171&quot;

## Get current branch
# Get the build from the TAG
BLD=`echo $TAG | cut -d. -f3`
# Calculate the branch
if [[ ${#BLD} == 3 ]]; then
	BRANCH=${TAG:0:3}
else
	# Build is 4 digits. We set the branch according to the most significant digit (thousends) - MSD
	MSD=${TAG:4:1}
    BRANCH=&quot;${TAG:0:3}.${MSD}XXX&quot;
fi

echo BRANCH=${BRANCH} &gt; /tmp/properties
echo vmHostIP=${vmHostIP} &gt;&gt; /tmp/properties

## Check that TAG matches BaseVM version
BaseVM_VER=`echo $BaseVM | cut -d&apos;-&apos; -f2 | gawk -v FS=. &apos;{ print $1&quot;.&quot;$2 }&apos;`
if [[ &quot;${TAG:0:3}&quot; != &quot;$BaseVM_VER&quot; ]]; then
	exit -1
fi

FullTesting=&quot;1&quot;

cd ${WORKSPACE}

# Create a new log file
now=`date +&quot;%Y%m%d-%H%M%S&quot;`
logfile=&quot;${WORKSPACE}/ems_ovoc_ova_$now.log&quot;
[[ -f $logfile  ]] &amp;&amp; rm $logfile
touch $logfile


echo &quot;$(date) : *****************  START  ******************&quot;
echo
echo
echo &quot;$(date) : Check if this version exists on NetApp&quot;
[[ -f /home/centos/data/output/ISO_Files/OVOC_${BRANCH}/DVD5_Virtual/${TAG}/Hyper-V/OVOC_HyperV_${TAG}.7z ]] &amp;&amp; exit -1

###################################################################################################
# Check &amp; delete old ovoc servers

# check and delete old ovoc server vm`s
SSHCMD=&quot;powershell -c &apos;Get-VM -VMName \&quot;*ovoc*\&quot; | %{Stop-VM \$_}&apos;&quot;
echo $SSHCMD | ssh centos@${vmHostIP}
SSHCMD=&quot;powershell -c &apos;Get-VM -VMName \&quot;*ovoc*\&quot; | %{Remove-VM -f \$_}&apos;&quot;
echo $SSHCMD | ssh centos@${vmHostIP}

# Delete old remanents from hypervisor host
SSHCMD=&quot;powershell -c &apos;Remove-Item -Force -Recurse V:\\HVWORKSPACE\\*&apos;&quot;
echo $SSHCMD | ssh centos@${vmHostIP} 

###################################################################################################
# Prepare basic ovoc server (DVD 1 &amp; 2)VM from BaseVM

# UnZip archived base vm
SSHCMD=&quot;powershell -c &apos;Expand-7zip -ArchiveFileName V:\\baseVMs\\$BaseVM.7z -TargetPath V:\\HVWORKSPACE\\${TAG}&apos;&quot;
echo $SSHCMD | ssh centos@${vmHostIP}

# create a new VM from $BaseVM (VM files are under v:\base (/cygdrive/v/base))
echo &quot;$(date) : creating new base ovoc server VM from $BaseVM&quot;
SSHCMD=&quot;powershell -c &apos;Get-ChildItem -Recurse V:\\HVWORKSPACE\\${TAG} -Filter *.vmcx | Select -ExpandProperty FullName | Import-VM -Register&apos;&quot;
echo $SSHCMD | ssh centos@${vmHostIP}
SSHCMD=&quot;powershell -c &apos;Get-VM -VMName \&quot;*ovoc*\&quot; | Start-VM&apos;&quot;
echo $SSHCMD | ssh centos@${vmHostIP}


if [ $? -ne 0 ]; then
    echo &quot;$(date) : Deploy new VM has failed - check ems_ovoc_vm_log.out&quot;
    exit
fi

# Wait for ovoc server power on
#isUp $vmHostIP $vmid || exit
echo &quot;$(date) : sleep 5 min.&quot;
sleep 300

# Update ovoc server /etc/hosts file with DevOps servers
sshpass -p &quot;$ems_pass&quot; ssh -o StrictHostKeyChecking=no acems@10.7.10.171 su - &lt;&lt; EOF
$su_pass
#cp /etc/hosts /etc/hosts.keep
#echo -e &quot;172.16.133.170\tartifactory\n172.16.143.99\ttest-artifactory\n172.16.146.146\tjenkins\n172.16.143.181\ttest-jenkins&quot; &gt;&gt; /etc/hosts
echo -e &quot;search corp.audiocodes.com\nnameserver 10.1.1.10\nnameserver 10.1.1.6&quot; &gt; /etc/resolv.conf
EOF

###################################################################################################
# Install DVD 3 on basic vovoc server

# if branch is 7.4 then we dont run this step
# in branch is higher than 7.4 then we need to arrange the directory EMS/target
# so it will contain only the 5 jar files we copied from build-ovoc job archive
# and all executables
cd ${WORKSPACE}/EMS
[[ ! -f target ]] &amp;&amp; mkdir target
chmod 0775 target
cd target
rm -rf *
cp ${WORKSPACE}/ovaPreRequisites/* .
chmod 0775 *
cd ${WORKSPACE}

# Set Network
echo &quot;$(date) : Applying DVD 3&quot;
cd EMS/VersionRelease

# setNetwork.py for version 7.6 and later calculate netmask by itself
(python2.7 setNetwork.py $vmip sanity) || (echo &quot;$(date) : Failed network setting&quot; &amp;&amp; exit -1)

cd ${WORKSPACE}

# ovoc server was rebooted, so -
# Wait for ovoc server power on
#isUp ${vmHostIP} $vmid || exit -2
echo &quot;$(date) : sleep 5 min.&quot;
sleep 300

# Sanity Install DVD-3
cd EMS/VersionRelease
(python2.7 SanityInstall.py ${TAG} $vmip official_iso) || (echo &quot;$(date) : Failed sanity install&quot; &amp;&amp; exit -1)
cd ${WORKSPACE}
echo &quot;$(date) : Sleep 30&quot;
sleep 30
echo &quot;###################################################################################################&quot;
echo &quot;###################################################################################################&quot;
echo &quot;###################################################################################################&quot;
echo &quot;$(date) : Done applying DVD 3&quot;
echo &quot;###################################################################################################&quot;
echo &quot;###################################################################################################&quot;
echo &quot;###################################################################################################&quot;

# ovoc server was rebooted during DVD 3 installation, so -
# Wait for ovoc server power on
#isUp ${vmHostIP} $vmid || exit -2
echo &quot;$(date) : sleep 5 min.&quot;
sleep 300

###################################################################################################
# clean before export to BaseVM
echo &quot;$(date) : ssh to clean installetion files&quot;

sshpass -p &quot;$ems_pass&quot; ssh -o StrictHostKeyChecking=no acems@10.7.10.171 su - &lt;&lt; EOF
$su_pass
echo &quot;&quot; &gt; /etc/resolv.conf
EOF

cd EMS/VersionRelease
(python2.7 cleanBeforeOva.py $vmip) || (echo &quot;$(date) : Failed cleaning installation files&quot; &amp;&amp; exit -1)
cd ${WORKSPACE}
echo &quot;$(date) : Sleep 30&quot;
sleep 30

###################################################################################################
# graceful shutdouwn this new full ovoc server VM and rename with TAG
echo &quot;$(date) : shutdown new VM&quot;
SSHCMD=&quot;powershell -c &apos;Get-VM -VMName \&quot;*ovoc*\&quot; | Stop-VM&apos;&quot;
echo $SSHCMD | ssh centos@${vmHostIP}
SSHCMD=&quot;powershell -c &apos;Get-VM -VMName \&quot;*ovoc*\&quot; | Rename-VM -NewName ovoc-${TAG}&apos;&quot;
echo $SSHCMD | ssh centos@${vmHostIP}
echo &quot;$(date) : Sleep 30&quot;
sleep 30

###################################################################################################
# export the new VM and compress
echo &quot;$(date) : Verify no version ${TAG} exists&quot;
SSHCMD=&quot;powershell -c &apos;if (Test-Path V:\\Exports\\${TAG}) {Remove-Item -Recurse V:\\Exports\\${TAG}}&apos;&quot;
echo $SSHCMD | ssh centos@${vmHostIP}
SSHCMD=&quot;powershell -c &apos;if (Test-Path V:\\Versions\\Hyper-V\\OVOC_HyperV_${TAG}.7z) {Remove-Item V:\\Versions\\Hyper-V\\OVOC_HyperV_${TAG}.7z}&apos;&quot;
echo $SSHCMD | ssh centos@${vmHostIP}

echo &quot;$(date) : export new VM&quot;
SSHCMD=&quot;powershell -c &apos;Get-VM -VMName \&quot;*ovoc*\&quot; | Export-VM -Path V:\\Exports\\${TAG}&apos;&quot;
echo $SSHCMD | ssh centos@${vmHostIP}

echo &quot;$(date) : Compress exported VM&quot;
SSHCMD=&quot;powershell -c &apos;Compress-7Zip -ArchiveFileName V:\\Versions\\Hyper-V\\OVOC_HyperV_${TAG}.7z -Path V:\\Exports\\${TAG}\\ovoc-${TAG}&apos;&quot;
echo $SSHCMD | ssh centos@${vmHostIP}

echo &quot;$(date) : Calculate md5&quot;
SSHCMD=&quot;powershell -c &apos;Get-FileHash -Algorithm md5 V:\\Versions\\Hyper-V\\OVOC_HyperV_${TAG}.7z | select -ExpandProperty Hash &gt; V:\\Versions\\Hyper-V\\OVOC_HyperV_${TAG}.md5&apos;&quot;
echo $SSHCMD | ssh centos@${vmHostIP}

#[[ ! -f /cygdrive/v/Exports/OVOC_HyperV_${TAG}.7z ]] &amp;&amp; exit

echo &quot;###################################################################################################&quot;
echo &quot;###################################################################################################&quot;
echo &quot;###################################################################################################&quot;
echo &quot;$(date) : Done export new VM&quot;
echo &quot;###################################################################################################&quot;
echo &quot;###################################################################################################&quot;
echo &quot;###################################################################################################&quot;


###################################################################################################
# Restart ovoc-server
echo &quot;$(date) : Starting ovoc server&quot;
SSHCMD=&quot;powershell -c &apos;Start-VM -Name ovoc-${TAG}&apos;&quot;
echo $SSHCMD | ssh centos@${vmHostIP}
echo &quot;$(date) : Sleep 300&quot;
sleep 300

# Update ovoc server /etc/hosts file with DevOps servers
sshpass -p &quot;$ems_pass&quot; ssh -o StrictHostKeyChecking=no acems@10.7.10.171 su - &lt;&lt; EOF
$su_pass
echo -e &quot;search corp.audiocodes.com\nnameserver 10.1.1.10\nnameserver 10.1.1.6&quot; &gt; /etc/resolv.conf
EOF

###################################################################################################
# Generate and install FK
echo &quot;$(date) : Generate FK&quot;
cd EMS/VersionRelease
(python2.7 SanityFK.py $vmip $TAG) || (echo &quot;$(date) : Failed FK&quot; &amp;&amp; exit -1)
cd ${WORKSPACE}

###################################################################################################
# Reboot &amp; Verify services on ovoc_server after FK installation
echo &quot;$(date) : Reboot &amp; Verify services on ovoc_server after FK installation&quot;
cd EMS/VersionRelease
(python2.7 SanityReboot.py $vmip) || (echo &quot;$(date) : Failed reboot after FK installation&quot; &amp;&amp; exit -1)
cd ${WORKSPACE}
echo &quot;$(date) : Sleep 300&quot;
sleep 300

###################################################################################################
# Run sanity tests on ovoc server
echo &quot;$(date) : Run sanity tests on ovoc server&quot;
cd EMS/VersionRelease
FullTesting=&quot;1&quot;
python2.7 SanityTest.py ${TAG} $vmip $FullTesting || echo &quot;$(date) : Failed to execute SanityTest&quot;
python2.7 SanityCopyLogs.py ${TAG} $vmip || (echo &quot;$(date) : Failed to copy logs&quot; &amp;&amp; exit -1)

cd ${WORKSPACE}

echo &quot;###################################################################################################&quot;
echo &quot;###################################################################################################&quot;
echo &quot;###################################################################################################&quot;
echo &quot;${date} : Done Sanity Tests&quot;
echo &quot;###################################################################################################&quot;
echo &quot;###################################################################################################&quot;
echo &quot;###################################################################################################&quot;

###################################################################################################
# Stop and Delete ovoc server vm
SSHCMD=&quot;powershell -c &apos;Get-VM -VMName \&quot;*ovoc*\&quot; | %{Stop-VM \$_}&apos;&quot;
echo $SSHCMD | ssh centos@${vmHostIP}
SSHCMD=&quot;powershell -c &apos;Get-VM -VMName \&quot;*ovoc*\&quot; | %{Remove-VM -f \$_}&apos;&quot;
echo $SSHCMD | ssh centos@${vmHostIP}

# Delete old remanents from hypervisor host
SSHCMD=&quot;powershell -c &apos;Remove-Item -Force -Recurse V:\\HVWORKSPACE\\*&apos;&quot;
echo $SSHCMD | ssh centos@${vmHostIP}

echo &quot;$(date) : FINISH!!!&quot;
</command>
    </hudson.tasks.Shell>
    <EnvInjectBuilder plugin="envinject@2.1.5">
      <info>
        <propertiesFilePath>/tmp/properties</propertiesFilePath>
      </info>
    </EnvInjectBuilder>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>EMS/VersionRelease/logs/**/*</artifacts>
      <allowEmptyArchive>true</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>false</defaultExcludes>
      <caseSensitive>false</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
    <hudson.plugins.postbuildtask.PostbuildTask plugin="postbuild-task@1.8">
      <tasks>
        <hudson.plugins.postbuildtask.TaskProperties>
          <logTexts>
            <hudson.plugins.postbuildtask.LogProperties>
              <logText>Done export new VM</logText>
              <operator>AND</operator>
            </hudson.plugins.postbuildtask.LogProperties>
          </logTexts>
          <EscalateStatus>false</EscalateStatus>
          <RunIfJobSuccessful>false</RunIfJobSuccessful>
          <script>echo &quot;$(date) : Copy VM to NetApp (Drive N: on Hyper-V server)&quot;&#xd;
SSHCMD=&quot;powershell -c &apos;C:\\Windows\\System32\\Scripts\\MapDrives.ps1; Copy-Item V:\\Versions\\Hyper-V -Recurse -Destination N:\\ISO_Files\\OVOC_${BRANCH}\\DVD5_Virtual\\${TAG}\\&apos;&quot;&#xd;
echo $SSHCMD | ssh centos@${vmHostIP}</script>
        </hudson.plugins.postbuildtask.TaskProperties>
      </tasks>
    </hudson.plugins.postbuildtask.PostbuildTask>
    <hudson.tasks.Mailer plugin="mailer@1.20">
      <recipients>shuky.riechard, hadas.attal, gal.erez, Gennady.Tsiporkin, marina.Risher, yuval.yosha , ben.magriso</recipients>
      <dontNotifyEveryUnstableBuild>false</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
    <hudson.plugins.emailext.ExtendedEmailPublisher plugin="email-ext@2.61">
      <recipientList>shuky.riechard, hadas.attal, gal.erez, Gennady.Tsiporkin, marina.Risher, yuval.yosha , ben.magriso</recipientList>
      <contentType>default</contentType>
      <defaultSubject>OVOC Hyper-V Jenkins Job</defaultSubject>
      <defaultContent>$DEFAULT_CONTENT

$RESULT</defaultContent>
      <attachmentsPattern></attachmentsPattern>
      <presendScript>$DEFAULT_PRESEND_SCRIPT

cat ${JENKINS_HOME}/jobs/${JOB_NAME}/builds/${BUILD_NUMBER}/log &gt; /tmp/log.txt
RESULT=${grep -A9 &quot;Sanity Test Result&quot; /tmp/log.txt}</presendScript>
      <postsendScript>$DEFAULT_POSTSEND_SCRIPT</postsendScript>
      <attachBuildLog>false</attachBuildLog>
      <compressBuildLog>false</compressBuildLog>
      <replyTo>$DEFAULT_REPLYTO</replyTo>
      <saveOutput>false</saveOutput>
      <disabled>false</disabled>
    </hudson.plugins.emailext.ExtendedEmailPublisher>
  </publishers>
  <buildWrappers>
    <org.jfrog.hudson.generic.ArtifactoryGenericConfigurator plugin="artifactory@3.1.0">
      <deployerDetails>
        <artifactoryName>artifactory2-pro</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <deployReleaseRepository>
          <keyFromText></keyFromText>
          <keyFromSelect>ems-release</keyFromSelect>
          <dynamicMode>false</dynamicMode>
        </deployReleaseRepository>
        <stagingPlugin/>
      </deployerDetails>
      <resolverDetails>
        <artifactoryName>artifactory2-pro</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <stagingPlugin/>
      </resolverDetails>
      <deployerCredentialsConfig>
        <credentials>
          <username></username>
          <password></password>
        </credentials>
        <credentialsId></credentialsId>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </deployerCredentialsConfig>
      <resolverCredentialsConfig>
        <credentials>
          <username></username>
          <password></password>
        </credentials>
        <credentialsId></credentialsId>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </resolverCredentialsConfig>
      <useSpecs>false</useSpecs>
      <uploadSpec>
        <spec></spec>
      </uploadSpec>
      <downloadSpec>
        <filePath></filePath>
      </downloadSpec>
      <deployPattern></deployPattern>
      <resolvePattern>ems-release:com/ac/ems/ovoc_server/Sanity_preReq/${TAG}/*.*=&gt;${workspace}/ovaPreRequisites</resolvePattern>
      <deploymentProperties></deploymentProperties>
      <deployBuildInfo>true</deployBuildInfo>
      <includeEnvVars>false</includeEnvVars>
      <envVarsPatterns>
        <includePatterns></includePatterns>
        <excludePatterns>*password*,*secret*,*key*</excludePatterns>
      </envVarsPatterns>
      <discardOldBuilds>false</discardOldBuilds>
      <discardBuildArtifacts>true</discardBuildArtifacts>
      <asyncBuildRetention>false</asyncBuildRetention>
      <multiConfProject>false</multiConfProject>
      <customBuildName></customBuildName>
      <overrideBuildName>false</overrideBuildName>
    </org.jfrog.hudson.generic.ArtifactoryGenericConfigurator>
    <EnvInjectPasswordWrapper plugin="envinject@2.1.5">
      <injectGlobalPasswords>false</injectGlobalPasswords>
      <maskPasswordParameters>true</maskPasswordParameters>
      <passwordEntries>
        <EnvInjectPasswordEntry>
          <name>su_pass</name>
          <value>{AQAAABAAAAAQLg0rHurHSBy8FQslFUHrXAI/3mHiod3DExIp9eCeQmc=}</value>
        </EnvInjectPasswordEntry>
        <EnvInjectPasswordEntry>
          <name>ems_pass</name>
          <value>{AQAAABAAAAAQ1kMK+2b3iHleqbTZqMwMx/Co/k6NghZ6fThuzuCZNoU=}</value>
        </EnvInjectPasswordEntry>
      </passwordEntries>
    </EnvInjectPasswordWrapper>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@1.6.9">
      <template>#${BUILD_NUMBER}__${TAG}</template>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>