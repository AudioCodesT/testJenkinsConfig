<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Create Hyper-V VM for ovoc server official release</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.27">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>TAG</name>
          <description></description>
          <defaultValue></defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>BaseVM</name>
          <description></description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>ovoc-7.6-base</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@3.8.0">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>ssh://jenkins@test-gerrit:29418/EMS/ovoc_server.git</url>
        <credentialsId>fef9964a-ddb7-4ce6-a445-a99a9e9802c0</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>refs/tags/server_${TAG}</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <browser class="hudson.plugins.git.browser.GitBlitRepositoryBrowser">
      <url></url>
      <projectName></projectName>
    </browser>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.CleanBeforeCheckout/>
      <hudson.plugins.git.extensions.impl.CloneOption>
        <shallow>false</shallow>
        <noTags>false</noTags>
        <reference></reference>
        <timeout>30</timeout>
        <depth>10</depth>
        <honorRefspec>false</honorRefspec>
      </hudson.plugins.git.extensions.impl.CloneOption>
    </extensions>
  </scm>
  <assignedNode>ems_vhd</assignedNode>
  <canRoam>false</canRoam>
  <disabled>true</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#############################################################################
#############################################################################
##### Fetching changes submitted to gerrit without waiting for a build ######
##### This is for testing ONLY!!!!!! Remove when going to production!! ######
#cd ${WORKSPACE}
#git fetch
#git branch -a
#git branch -vv --no-color
#git log -3
#git checkout -f remotes/origin/7.4.3000
#############################################################################
#############################################################################
#############################################################################

## Get current branch
# Get the build from the TAG
BLD=`echo $TAG | cut -d. -f3`
# Calculate the branch
if [[ ${#BLD} == 3 ]]; then
	BRANCH=${TAG:0:3}
else
	# Build is 4 digits. We set the branch according to the most significant digit (thousends) - MSD
	MSD=${TAG:4:1}
    BRANCH=&quot;${TAG:0:3}.${MSD}000&quot;
fi

## Check that TAG matches BaseVM version
BaseVM_VER=`echo $BaseVM | cut -d&apos;-&apos; -f1 | gawk -v FS=. &apos;{ print $2&quot;.&quot;$3 }&apos;`
if [[ &quot;${TAG:0:3}&quot; != &quot;$BaseVM_VER&quot; ]]; then
	exit -1
fi

FullTesting=&quot;1&quot;

# Set the following values to fit your need
vmHostIP=&quot;10.7.10.117&quot;
netMask=&quot;16&quot;
DefaultGW=&quot;10.7.0.1&quot;

#BaseVM=&quot;/home/centos/data/ovoc_base/ova/${BaseVM}.ova&quot;
BaseVMCX=$(ssh -t centos@10.7.10.117 winpty -Xallow-non-tty powershell -c &apos;Get-ChildItem -Recurse &quot;V:\\base\\$BaseVM\\&quot; -filter &quot;*.vmcx&quot;&apos; 2&gt;/dev/null | grep vmcx | gawk &apos;{print $6}&apos;)
echo $BaseVMCX | tee -a $logfile

# Get ESXi password from encrypted file
#cd ~/.ssl
#vipw=$(openssl rsautl -decrypt -inkey private.pem -in pw.esxi)

cd ${WORKSPACE}

# Create a new log file
now=`date +&quot;%Y%m%d-%H%M%S&quot;`
logfile=&quot;${WORKSPACE}/ems_ovoc_ova_$now.log&quot;
[[ -f $logfile  ]] &amp;&amp; rm $logfile
touch $logfile


echo &quot;$(date) : *****************  START  ******************&quot; | tee -a $logfile


###################################################################################################
# Check &amp; delete old ovoc servers

# check and delete old ovoc_base_for_ vm`s
ssh -t centos@vmHostIP winpty -Xallow-non-tty powershell -c &apos;get-vm *base* | %{stop-vm $_.FullName} | %{remove-vm -f $_.FullName}&apos;

# Delete old remanents from hypervisor host
#ssh root@${vmHostIP} rm -rf /vmfs/volumes/dsData/ovoc_base_for_*
ssh -t centos@vmHostIP rm -rf /cygdrive/v/base/$BaseVM


###################################################################################################
# Prepare basic ovoc server (DVD 1 &amp; 2)VM from BaseVM

# create a new VM from $BaseVM (VM files are under v:\base (/cygdrive/v/base))
echo &quot;$(date) : creating new base ovoc server VM from $BaseVM&quot; | tee -a $logfile
# NOTE: It is impossible to pass local vars to the powershell command inside the ssh command.
#       The solution is to create a variable that holds the full ssh command - REMCMD
REMCMD=&quot;winpty -Xallow-non-tty powershell -c &apos;get-childitem \&quot;V:\base\\$BaseVM\\\&quot; -Recurse -Filter \&quot;Virtual Machines\&quot; | %{Get-ChildItem \$_.FullName -Filter *.vmcx} | %{import-vm \$_.FullName -Register}&apos;&quot;
ssh -t centos@${vmHostIP} $REMCMD 2&gt;/dev/null | tee -a $logfile
if [ $? -ne 0 ]; then
    echo &quot;$(date) : Deploy new VM has failed - check ems_ovoc_vm_log.out&quot; | tee -a $logfile
    exit
fi

# Wait for ovoc server power on
#isUp $vmHostIP $vmid || exit
echo &quot;$(date) : sleep 5 min.&quot; | tee -a $logfile
sleep 300

# find new vm IP address
REMCMD=&quot;winpty -Xallow-non-tty powershell -c &apos;Get-VM -Name ovoc* | Select -ExpandProperty NetworkAdapters | fl&apos; | grep IPAddress | grep -v Dyn | gawk &apos;{print \$3}&apos; | (read h; echo \${h:1:\${#h}-2})&quot;
vmip=`ssh centos@${vmHostIP} $REMCMD
ipcalc -cs $vmip || ( echo &quot;$(date) : Invalid IP for $vmid&quot; | tee -a $logfile &amp;&amp; exit)
echo &quot;$(date) : vm IP is $vmip&quot; | tee -a $logfile


###################################################################################################
# Install DVD 3 on basic vovoc server

# if branch is 7.4 then we dont run this step
# in branch is higher than 7.4 then we need to arrange the directory EMS/target
# so it will contain only the 5 jar files we copied from build-ovoc job archive
# and all executables
cd ${WORKSPACE}/EMS
[[ ! -f target ]] &amp;&amp; mkdir target
chmod 0775 target
cd target
rm -rf *
cp ${WORKSPACE}/ovaPreRequisites/* .
chmod 0775 *
cd ${WORKSPACE}

# Set Network
echo &quot;$(date) : Applying DVD 3&quot; | tee -a $logfile
cd EMS/VersionRelease
if [[ &quot;$BRANCH&quot; == &quot;7.4.3000&quot; ]]; then
	# We need to pass the netmask of the EMS server
	(python2.7 setNetwork.py $vmip $netMask $DefaultGW | tee -a $logfile) || (echo &quot;$(date) : Failed network setting&quot; | tee -a $logfile &amp;&amp; exit -1)
else
	# setNetwork.py for version 7.6 and later calculate netmask by itself
	(python2.7 setNetwork.py $vmip sanity | tee -a $logfile) || (echo &quot;$(date) : Failed network setting&quot; | tee -a $logfile &amp;&amp; exit -1)
fi
cd ${WORKSPACE}

# ovoc server was rebooted, so -
# Wait for ovoc server power on
#isUp ${vmHostIP} $vmid || exit -2
echo &quot;$(date) : sleep 5 min.&quot; | tee -a $logfile
sleep 300

# Sanity Install DVD-3
cd EMS/VersionRelease
(python2.7 SanityInstall.py ${TAG} $vmip official_iso | tee -a $logfile) || (echo &quot;$(date) : Failed sanity install&quot; | tee -a $logfile &amp;&amp; exit -1)
cd ${WORKSPACE}
sleep 30
echo &quot;###################################################################################################&quot; | tee -a $logfile
echo &quot;###################################################################################################&quot; | tee -a $logfile
echo &quot;###################################################################################################&quot; | tee -a $logfile
echo &quot;$(date) : Done applying DVD 3&quot; | tee -a $logfile
echo &quot;###################################################################################################&quot; | tee -a $logfile
echo &quot;###################################################################################################&quot; | tee -a $logfile
echo &quot;###################################################################################################&quot; | tee -a $logfile

# ovoc server was rebooted during DVD 3 installation, so -
# Wait for ovoc server power on
#isUp ${vmHostIP} $vmid || exit -2
echo &quot;$(date) : sleep 5 min.&quot; | tee -a $logfile
sleep 300

###################################################################################################
# clean before export to BaseVM
echo &quot;$(date) : ssh to clean installetion files&quot; | tee -a $logfile
cd EMS/VersionRelease
(python2.7 cleanBeforeOva.py $vmip | tee -a $logfile) || (echo &quot;$(date) : Failed cleaning installation files&quot; | tee -a $logfile &amp;&amp; exit -1)
cd ${WORKSPACE}
sleep 30

###################################################################################################
# graceful shutdouwn this new full ovoc server VM
echo &quot;$(date) : shutdown new VM&quot; | tee -a $logfile
REMCMD=&quot;winpty -Xallow-non-tty powershell -c &apos;get-vm *base* | %{stop-vm -Name $_.FullName}&apos;&quot;
ssh root@${vmHostIP} $REMCMD | tee -a $logfile
REMCMD=&quot;winpty -Xallow-non-tty powershell -c &apos;Rename-VM $BaseVM -NewName ovoc-${TAG}&apos;&quot;
sleep 30

###################################################################################################
# export the new VM
echo &quot;$(date) : export new VM&quot; | tee -a $logfile
cd ${WORKSPACE}
[[ -d &quot;${TAG}&quot; ]] &amp;&amp; rm -rf &quot;${TAG}&quot;
mkdir -p &quot;${TAG}&quot; | tee -a $logfile
REMCMD=&quot;winpty -Xallow-non-tty powershell -c &apos;Get-VM -Name ovoc* | Export-VM -Path ${TAG}&quot;
ssh root@${vmHostIP} $REMCMD | tee -a $logfile
Result=`tail -1 $logfile | grep &quot;Completed&quot;`
[[ &quot;${ovfResult}&quot; -eq &quot;Completed with errors&quot; ]] &amp;&amp; exit -1
echo &quot;###################################################################################################&quot; | tee -a $logfile
echo &quot;###################################################################################################&quot; | tee -a $logfile
echo &quot;###################################################################################################&quot; | tee -a $logfile
echo &quot;$(date) : Done export new VM&quot; | tee -a $logfile
echo &quot;###################################################################################################&quot; | tee -a $logfile
echo &quot;###################################################################################################&quot; | tee -a $logfile
echo &quot;###################################################################################################&quot; | tee -a $logfile

###################################################################################################
# Delete ovoc server vm
echo &quot;$(date) : Delete ovoc server VM from host&quot; | tee -a $logfile
REMCMD=&quot;winpty -Xallow-non-tty powershell -c &apos;get-vm *base* | %{stop-vm \$_.FullName} | %{remove-vm -f \$_.FullName}&apos;&quot;
ssh root@${vmHostIP} vim-cmd vmsvc/destroy ${vmid} | tee -a $logfile

###################################################################################################
# Deploy ovoc server from newly created ova
echo &quot;$(date) : Deploy ovoc server from newly created ova&quot; | tee -a $logfile
ovftool --disableVerification --noSSLVerify --name=&quot;ovoc_server_${TAG}&quot; --datastore=dsData --diskMode=thin --acceptAllEulas --powerOn ${WORKSPACE}/${TAG}/ovoc_server_${TAG}.ova vi://root:$vipw@${vmHostIP} | tee -a $logfile
sleep 300

###################################################################################################
# Generate and install FK
echo &quot;$(date) : Generate FK&quot; | tee -a $logfile
cd EMS/VersionRelease
(python2.7 SanityFK.py $vmip $TAG | tee -a $logfile) || (echo &quot;$(date) : Failed FK&quot; | tee -a $logfile &amp;&amp; exit -1)
cd ${WORKSPACE}

###################################################################################################
# Reboot &amp; Verify services on ovoc_server after FK installation
echo &quot;$(date) : Reboot &amp; Verify services on ovoc_server after FK installation&quot; | tee -a $logfile
cd EMS/VersionRelease
(python2.7 SanityReboot.py $vmip | tee -a $logfile) || (echo &quot;$(date) : Failed reboot after FK installation&quot; | tee -a $logfile &amp;&amp; exit -1)
cd ${WORKSPACE}

###################################################################################################
# Run sanity tests on ovoc server
echo &quot;$(date) : Run sanity tests on ovoc server&quot; | tee -a $logfile
cd EMS/VersionRelease
FullTesting=&quot;1&quot;
python2.7 SanityTest.py ${TAG} $vmip $FullTesting | tee -a $logfile &amp;&amp; python2.7 SanityCopyLogs.py ${TAG} $vmip | tee -a $logfile || \
(python2.7 SanityCopyLogs.py $NEW_TAG $vmip | tee -a $logfile &amp;&amp; echo &quot;$(date) : Failed reboot after FK installation&quot; | tee -a $logfile &amp;&amp; exit -1)
cd ${WORKSPACE}
echo &quot;###################################################################################################&quot; | tee -a $logfile
echo &quot;###################################################################################################&quot; | tee -a $logfile
echo &quot;###################################################################################################&quot; | tee -a $logfile
echo &quot;${date} : Done Sanity Tests&quot; | tee -a $logfile
echo &quot;###################################################################################################&quot; | tee -a $logfile
echo &quot;###################################################################################################&quot; | tee -a $logfile
echo &quot;###################################################################################################&quot; | tee -a $logfile

###################################################################################################
# Delete new ovoc server vm

# find new ovoc vmid
vmid=`ssh root@${vmHostIP} vim-cmd vmsvc/getallvms | grep &quot;ovoc_server_${TAG}&quot; | gawk &apos;{print $1}&apos;`
echo &quot;$(date) : vmid is $vmid&quot; | tee -a $logfile

# Power off &amp; delete ovoc server vm
echo &quot;$(date) : Delete new ovoc server VM from host&quot; | tee -a $logfile
ssh root@${vmHostIP} vim-cmd vmsvc/power.off ${vmid} | tee -a $logfile
ssh root@${vmHostIP} vim-cmd vmsvc/destroy ${vmid} | tee -a $logfile

echo &quot;$(date) : FINISH!!!&quot; | tee -a $logfile
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.plugins.postbuildtask.PostbuildTask plugin="postbuild-task@1.8">
      <tasks>
        <hudson.plugins.postbuildtask.TaskProperties>
          <logTexts>
            <hudson.plugins.postbuildtask.LogProperties>
              <logText>Done export new VM</logText>
              <operator>AND</operator>
            </hudson.plugins.postbuildtask.LogProperties>
          </logTexts>
          <EscalateStatus>false</EscalateStatus>
          <RunIfJobSuccessful>true</RunIfJobSuccessful>
          <script># Move output to Netapp&#xd;
sudo -i&#xd;
[[ -d &quot;/home/centos/data/output/ovoc_ova/$TAG&quot; ]] &amp;&amp; rm -rf &quot;/home/centos/data/output/ovoc_ova/$TAG&quot;&#xd;
mv -v $WORKSPACE/$TAG /home/centos/data/output/ovoc_ova/</script>
        </hudson.plugins.postbuildtask.TaskProperties>
      </tasks>
    </hudson.plugins.postbuildtask.PostbuildTask>
    <hudson.tasks.Mailer plugin="mailer@1.20">
      <recipients>yuval.yosha</recipients>
      <dontNotifyEveryUnstableBuild>false</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
  </publishers>
  <buildWrappers>
    <org.jfrog.hudson.generic.ArtifactoryGenericConfigurator plugin="artifactory@2.15.0">
      <deployerDetails>
        <artifactoryName>artifactory2-pro</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <deployReleaseRepository>
          <keyFromText></keyFromText>
          <keyFromSelect>ems-release</keyFromSelect>
          <dynamicMode>false</dynamicMode>
        </deployReleaseRepository>
        <stagingPlugin/>
      </deployerDetails>
      <resolverDetails>
        <artifactoryName>artifactory2-pro</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <stagingPlugin/>
      </resolverDetails>
      <deployerCredentialsConfig>
        <credentials>
          <username></username>
          <password></password>
        </credentials>
        <credentialsId></credentialsId>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </deployerCredentialsConfig>
      <resolverCredentialsConfig>
        <credentials>
          <username></username>
          <password></password>
        </credentials>
        <credentialsId></credentialsId>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </resolverCredentialsConfig>
      <useSpecs>false</useSpecs>
      <uploadSpec>
        <spec></spec>
      </uploadSpec>
      <downloadSpec>
        <filePath></filePath>
      </downloadSpec>
      <deployPattern></deployPattern>
      <resolvePattern>ems-release:com/ac/ems/ovoc_server/Sanity_preReq/${TAG}/*.*=&gt;${workspace}/ovaPreRequisites</resolvePattern>
      <deploymentProperties></deploymentProperties>
      <deployBuildInfo>true</deployBuildInfo>
      <includeEnvVars>false</includeEnvVars>
      <envVarsPatterns>
        <includePatterns></includePatterns>
        <excludePatterns>*password*,*secret*,*key*</excludePatterns>
      </envVarsPatterns>
      <discardOldBuilds>false</discardOldBuilds>
      <discardBuildArtifacts>true</discardBuildArtifacts>
      <asyncBuildRetention>false</asyncBuildRetention>
      <multiConfProject>false</multiConfProject>
      <customBuildName></customBuildName>
      <overrideBuildName>false</overrideBuildName>
    </org.jfrog.hudson.generic.ArtifactoryGenericConfigurator>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@1.6.9">
      <template>#${BUILD_NUMBER}__${TAG}</template>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>