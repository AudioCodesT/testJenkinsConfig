<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Create ova for ovoc server official release</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.27">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>TAG</name>
          <description></description>
          <defaultValue></defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>OVA</name>
          <description></description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>Deploy.7.4-rev18-rev3</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@3.8.0">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>ssh://jenkins@test-gerrit:29418/EMS/ovoc_server.git</url>
        <credentialsId>fef9964a-ddb7-4ce6-a445-a99a9e9802c0</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>server_${TAG}</name>
      </hudson.plugins.git.BranchSpec>
      <hudson.plugins.git.BranchSpec>
        <name>*/master</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.CleanBeforeCheckout/>
      <hudson.plugins.git.extensions.impl.CloneOption>
        <shallow>true</shallow>
        <noTags>false</noTags>
        <reference></reference>
        <timeout>30</timeout>
        <depth>100</depth>
        <honorRefspec>false</honorRefspec>
      </hudson.plugins.git.extensions.impl.CloneOption>
    </extensions>
  </scm>
  <assignedNode>ems_ova</assignedNode>
  <canRoam>false</canRoam>
  <disabled>true</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>OVA=&quot;/home/centos/data/ovoc/ova/${OVA}.ova&quot;

# Set the following values to fit your need
hostIP=&quot;10.7.10.7&quot;
netMask=&quot;16&quot;
DefaultGW=&quot;10.7.0.1&quot;

# Get ESXi password from encrypted file
cd ~/.ssl
vipw=$(openssl rsautl -decrypt -inkey private.pem -in pw.esxi)

cd $WORKSPACE

# Create a new log file
now=`date +&quot;%Y%m%d-%H%M%S&quot;`
logfile=&quot;${WORKSPACE}/ems_ovoc_ova_$now.log&quot;
[[ -f $logfile  ]] &amp;&amp; rm $logfile
touch $logfile

# Function for checking VM power state
function isUp {
    # Function gets VMhostIP &amp; vmid
    # Timeout after 600 seconds

    ipcalc -cs $1 &amp;&amp; local ip=$1 || ( echo &quot;$(date) : Invalid IP&quot; &gt;&gt; $logfile &amp;&amp; exit)
    local id=$2

    for i in {1..20}; do
        sleep 30
        echo &quot;$(date) : Getting VM $id power status&quot; &gt;&gt; $logfile
        getState=$(ssh root@${hostIP} vim-cmd vmsvc/power.getstate $id | grep Powered | cut -d&apos; &apos; -f2)
        if [[ &quot;$getState&quot; == &quot;on&quot; ]]; then
            echo &quot;$(date) : VM $id is up!&quot; &gt;&gt; $logfile
            return 0
        fi
    done

    echo &quot;$(date) : ovoc VM did not start within 600 seconds.&quot; &gt;&gt; $logfile
    return 1
}

# Function for checking VM guest SSH readiness
function sshUp {
    # Function gets serverIP
    # Timeout after 60 seconds

    ipcalc -cs $1 &amp;&amp; local ip=$1 || ( echo &quot;$(date) : Invalid IP&quot; &gt;&gt; $logfile &amp;&amp; exit)
    local to=5s

    for i in {1..10}; do
        echo &quot;$(date) : Testing ssh readiness on $ip&quot; &gt;&gt; $logfile
        if timeout $to bash -c &quot;exec 5&gt;/dev/tcp/$ip/22&quot; 2&gt;/dev/null; then
            5&gt;&amp;-
            echo &quot;$(date) : SSH on $ip is up&quot; &gt;&gt; $logfile
            return 0
        else
            5&gt;&amp;-
            echo &quot;$(date) : Waiting for SSH on $ip&quot; &gt;&gt; $logfile
        fi
    done

    echo &quot;$(date) : SSH on $ip is not up within 60s&quot; &gt;&gt; $logfile
    return 1
}

echo &quot;$(date) : *****************  START  ******************&quot; &gt;&gt; $logfile


###################################################################################################
# Check &amp; delete old ovoc servers

# check and delete old ovoc_base_for_ vm`s
vms=`ssh root@${hostIP} vim-cmd vmsvc/getallvms | grep &quot;ovoc_base_for_&quot; | gawk &apos;{print $1}&apos;`
if [[ &quot;$vms&quot; -ne &quot;&quot; ]]; then
    for vmid in $vms; do
        echo &quot;$(date) : ovoc_base_for_$TAG already exist. Deleting vm&quot; &gt;&gt; $logfile
        ssh root@${hostIP} vim-cmd vmsvc/power.off ${vmid} &gt;&gt; $logfile
        sleep 10
        ssh root@${hostIP} vim-cmd vmsvc/destroy ${vmid} &gt;&gt; $logfile
        sleep 10
    done
fi

ssh root@${hostIP} rm -rf /vmfs/volumes/dsData/ovoc_base_for_*

###################################################################################################
# Prepare basic ovoc server (DVD 1 &amp; 2)VM from ova

# create a new VM from $OVA (ova file is located on jenkins slave /home/centos/data/ovoc/ova/)
echo &quot;$(date) : creating new base ovoc server VM from $OVA&quot; &gt;&gt; $logfile
ovftool --disableVerification --noSSLVerify --name=&quot;ovoc_base_for_$TAG&quot; --datastore=dsData --diskMode=thin --acceptAllEulas --powerOn $OVA vi://root:$vipw@${hostIP} &gt;&gt; $logfile
if [ $? -ne 0 ]; then
    echo &quot;$(date) : Deploy new VM has failed - check ems_ovoc_vm_log.out&quot; &gt;&gt; $logfile
    exit
fi

# find new vm id
vmid=`ssh root@${hostIP} vim-cmd vmsvc/getallvms | grep &quot;ovoc_base_for_$TAG&quot; | gawk &apos;{print $1}&apos;`
echo &quot;$(date) : vm id is $vmid&quot; &gt;&gt; $logfile

# Wait for ovoc server power on
#isUp $hostIP $vmid || exit
echo &quot;$(date) : sleep 5 min.&quot; &gt;&gt; $logfile
sleep 300

# find new vm IP address
vmip=`ssh root@${hostIP} vim-cmd vmsvc/get.guest $vmid | grep -m 1 &quot;ipAddress&quot; | cut -d&apos;&quot;&apos; -f2`
ipcalc -cs $vmip || ( echo &quot;$(date) : Invalid IP for $vmid&quot; &gt;&gt; $logfile &amp;&amp; exit)
echo &quot;$(date) : vm IP is $vmip&quot; &gt;&gt; $logfile

# Check ssh readiness
#sshUp $vmip || exit -2


###################################################################################################
# Install DVD 3 on basic vovoc server

# Set Network
echo &quot;$(date) : Applying DVD 3&quot; &gt;&gt; $logfile
cd EMS/VersionRelease
python2.7 setNetwork.py $vmip $netMask $DefaultGW || (echo &quot;$(date) : Failed network setting&quot; &gt;&gt; $logfile &amp;&amp; exit -1)

# ovoc server was rebooted, so -
# Wait for ovoc server power on
#isUp ${hostIP} $vmid || exit -2
echo &quot;$(date) : sleep 5 min.&quot; &gt;&gt; $logfile
sleep 300

# Sanity Install DVD-3
python2.7 SanityInstall.py $TAG $vmip official_iso || (echo &quot;$(date) : Failed sanity install&quot; &gt;&gt; $logfile &amp;&amp; exit -1)
sleep 30
echo &quot;$(date) : Done applying DVD 3&quot; &gt;&gt; $logfile

# ovoc server was rebooted during DVD 3 installation, so -
# Wait for ovoc server power on
#isUp ${hostIP} $vmid || exit -2
echo &quot;$(date) : sleep 5 min.&quot; &gt;&gt; $logfile
sleep 300

###################################################################################################
# Export to ova

# clean logs before shutdown
echo &quot;$(date) : ssh to clean log files&quot; &gt;&gt; $logfile
python2.7 cleanBeforeOva.py $vmip || (echo &quot;$(date) : Failed cleaning logs&quot; &gt;&gt; $logfile &amp;&amp; exit -1)
sleep 30

# graceful shutdouwn this new full ovoc server VM
echo &quot;$(date) : shutdown new VM&quot; &gt;&gt; $logfile
ssh root@${hostIP} vim-cmd vmsvc/power.shutdown ${vmid} &gt;&gt; $logfile
sleep 30


###################################################################################################
# Create ova from full ovoc server and upload to artifactory server

# export the new VM to an OVA file
echo &quot;$(date) : export new VM to an OVA file&quot; &gt;&gt; $logfile
mkdir -p &quot;$WORKSPACE/$TAG/ovoc_server_$TAG&quot;
ovftool -o --noSSLVerify vi://root:$vipw@${hostIP}/ovoc_base_for_$TAG $WORKSPACE/$TAG/ovoc_server_$TAG/ovoc_server_$TAG.ova &gt;&gt; $logfile

# Move output to Netapp
mv -v $WORKSPACE/$TAG /home/centos/data/output/

cd ~

# what left is to upload new OVA to Artifactory
echo &quot;$(date) : ********        FINISH      ***********&quot; &gt;&gt; $logfile
echo &quot;$(date) : what left is to upload new OVA to Artifactory&quot; &gt;&gt; $logfile
echo &quot;$(date) : ********    **************   ***********&quot; &gt;&gt; $logfile

# Delete ovoc server vm
echo &quot;$(date) : Delete ovoc server VM from host&quot; &gt;&gt; $logfile
[[ -f &quot;$WORKSPACE/$TAG/ovoc_server_$TAG/ovoc_server_$TAG_$now.ova&quot; ]] &amp;&amp; ssh root@${hostIP} vim-cmd vmsvc/destroy ${vmid} &gt;&gt; $logfile




</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers>
    <org.jfrog.hudson.generic.ArtifactoryGenericConfigurator plugin="artifactory@2.15.0">
      <deployerDetails>
        <artifactoryName>artifactory-pro</artifactoryName>
        <artifactoryUrl>https://test-artifactory</artifactoryUrl>
        <deployReleaseRepository>
          <keyFromText></keyFromText>
          <keyFromSelect></keyFromSelect>
          <dynamicMode>false</dynamicMode>
        </deployReleaseRepository>
        <stagingPlugin/>
      </deployerDetails>
      <resolverDetails>
        <artifactoryName>artifactory-pro</artifactoryName>
        <artifactoryUrl>https://test-artifactory</artifactoryUrl>
        <stagingPlugin/>
      </resolverDetails>
      <deployerCredentialsConfig>
        <credentials>
          <username></username>
          <password></password>
        </credentials>
        <credentialsId></credentialsId>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </deployerCredentialsConfig>
      <resolverCredentialsConfig>
        <credentials>
          <username></username>
          <password></password>
        </credentials>
        <credentialsId></credentialsId>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </resolverCredentialsConfig>
      <useSpecs>false</useSpecs>
      <uploadSpec>
        <spec></spec>
      </uploadSpec>
      <downloadSpec>
        <filePath></filePath>
      </downloadSpec>
      <deployPattern></deployPattern>
      <resolvePattern>repo-key:ems-release/com/ac/ems/ovoc_server/7.4.3000/Sanity_preReq/${TAG}/*=&gt;preRequisites</resolvePattern>
      <deploymentProperties></deploymentProperties>
      <deployBuildInfo>true</deployBuildInfo>
      <includeEnvVars>false</includeEnvVars>
      <envVarsPatterns>
        <includePatterns></includePatterns>
        <excludePatterns>*password*,*secret*,*key*</excludePatterns>
      </envVarsPatterns>
      <discardOldBuilds>false</discardOldBuilds>
      <discardBuildArtifacts>true</discardBuildArtifacts>
      <asyncBuildRetention>false</asyncBuildRetention>
      <multiConfProject>false</multiConfProject>
      <customBuildName></customBuildName>
      <overrideBuildName>false</overrideBuildName>
    </org.jfrog.hudson.generic.ArtifactoryGenericConfigurator>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@1.6.9">
      <template>#${BUILD_NUMBER}__${TAG}</template>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>