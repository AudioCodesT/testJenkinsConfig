<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Create ova for ovoc server official release</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.27">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>TAG</name>
          <description></description>
          <defaultValue></defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>BRANCH</name>
          <description></description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>7.4.3000</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>OVA</name>
          <description></description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>Deploy.7.4-rev18-rev3</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@3.8.0">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>ssh://jenkins@test-gerrit:29418/EMS/ovoc_server.git</url>
        <credentialsId>fef9964a-ddb7-4ce6-a445-a99a9e9802c0</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>server_${TAG}</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.CleanBeforeCheckout/>
      <hudson.plugins.git.extensions.impl.CloneOption>
        <shallow>true</shallow>
        <noTags>false</noTags>
        <reference></reference>
        <timeout>30</timeout>
        <depth>100</depth>
        <honorRefspec>false</honorRefspec>
      </hudson.plugins.git.extensions.impl.CloneOption>
    </extensions>
  </scm>
  <assignedNode>ems_ova</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command># set logger ###############
exec 3&gt;&amp;1 4&gt;&amp;2
trap &apos;exec 2&gt;&amp;4 1&gt;&amp;3&apos; 0 1 2 3
exec 1&gt;ems_ovoc_vm_log.out 2&gt;&amp;1
# Everything below will go to the file &apos;ems_ovoc_vm_log.out&apos;

####################################################################################################
# Explanation:
# 
# exec 3&gt;&amp;1 4&gt;&amp;2
# 
# Saves file descriptors so they can be restored to whatever they were before redirection or used
# themselves to output to whatever they were before the following redirect.
# 
# trap &apos;exec 2&gt;&amp;4 1&gt;&amp;3&apos; 0 1 2 3
# 
# Restore file descriptors for particular signals. Not generally necessary since they should be
# restored when the sub-shell exits.
# 
# exec 1&gt;log.out 2&gt;&amp;1
# 
# Redirect stdout to file log.out then redirect stderr to stdout. Note that the order is important
# when you want them going to the same file. stdout must be redirected before stderr is redirected
# to stdout.
# 
# From then on, to see output on the console (maybe), you can simply redirect to &amp;3. For example,
# 
# echo &quot;$(date) : part 1 - start&quot; &gt;&amp;3
# will go to wherever stdout was directed, presumably the console, prior to executing line 3 above.
####################################################################################################

# Get ESXi password from encrypted file
cd ~/.ssl
vipw=$(openssl rsautl -decrypt -inkey private.pem -in pw.esxi)
cd $WORKSPACE

# function for getting vm IP address
function getIP ()
{
    $(ssh root@10.7.10.7 vim-cmd vmsvc/get.guest $vmid | grep -m 1 ipAddress | cut -d&apos;&quot;&apos; -f2) &amp;&amp; return
    # If there are more then one NIC, look for network name, e.g. &quot;ovoc Network&quot;, and then grep the IP:
    # ssh root@10.7.10.7 vim-cmd vmsvc/get.guest $vmid | grep -A3 &quot;ovoc Network&quot; | \
    # grep -oE &quot;\b((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b&quot;
}

# function for verifying if new VM is up
function isUp ()
{
    for i in {1..30}; do
        getState=$(ssh root@10.7.10.7 vim-cmd vmsvc/power.getstate $vmid | grep Powered | cut -d&apos; &apos; -f2)
        [[ $getState == on ]] &amp;&amp; return 0
    done
    return 1
}

# function for verifyong ssh to new vm
function isSsh ()
{
    for i in {1..30}; do
        sleep 1
        exec 5&gt;/dev/tcp/$vmip/22
        [[ $? -eq 0 ]] &amp;&amp; return 0
    done
    return 1
}

echo &quot;$(date) : *****************  START  ******************&quot; &gt;&amp;3
# check if VM name ovoc_base_for_$TAG already exists
vmid=`ssh root@10.7.10.7 vim-cmd vmsvc/getallvms | grep &quot;ovoc_base_for_$TAG&quot; | gawk &apos;{print $1}&apos;`
if [ ! -z &quot;$vmid&quot; ]; then
    echo &quot;$(date) : ovoc_base_for_$TAG already exist. Deleting vm&quot; &gt;&amp;3
    ssh root@10.7.10.7 vim-cmd vmsvc/power.off ${vmid} &gt;&amp;3
	ssh root@10.7.10.7 vim-cmd vmsvc/unregister ${vmid} &gt;&amp;3
	ssh root@10.7.10.7 vim-cmd vmsvc/destroy ${vmid} &gt;&amp;3
fi

# create a new VM from $OVA (ova file is located on jenkins slave /home/centos/data/ovoc/ova/)
echo &quot;$(date) : creating new base ovoc server VM from $OVA&quot; &gt;&amp;3
ovftool --disableVerification --noSSLVerify --name=&quot;ovoc_base_for_$TAG&quot; --datastore=datastore1 --diskMode=thin --acceptAllEulas --powerOn /home/centos/data/ovoc/ova/$OVA.ova vi://root:$vipw@10.7.10.7 &gt;&amp;3
if [ $? -ne 0 ]; then
    echo &quot;$(date) : Deploy new VM has failed - check ems_ovoc_vm_log.out&quot; &gt;&amp;3
    exit
fi

# find new vm id
vmid=`ssh root@10.7.10.7 vim-cmd vmsvc/getallvms | grep &quot;ovoc_base_for_$TAG&quot; | gawk &apos;{print $1}&apos;`
echo &quot;$(date) : vm id is $vmid&quot; &gt;&amp;3

# find new vm IP address
vmip=$(getIP)
echo &quot;$(date) : vm IP is $vmip&quot; &gt;&amp;3

# Verify new ovoc base is up and accessible by ssh
[[ isUp ]] &amp;&amp; [[ isSsh ]] || exit &gt;&amp;3

# Apply DVD-3
cd EMS/VersionRelease
python2.7 python2.7 SanityInstall.py $TAG $vmip official_iso &gt;&amp;3

# clean logs before shutdown
echo &quot;$(date) : ssh to clean log files&quot; &gt;&amp;3          


###########################
# graceful shutdouwn this new VM with new war file in it
echo &quot;$(date) : shutdown new VM&quot; &gt;&amp;3
ssh root@10.7.10.7 vim-cmd vmsvc/power.shutdown ${vmid} &gt;&amp;3
sleep 30

# export the new VM to an OVA file
echo &quot;$(date) : export new VM to an OVA file&quot; &gt;&amp;3
mkdir -p $WORKSPACE/$TAG/ovoc_base_for_$TAG
ovftool -o --noSSLVerify vi://root:$vipw@10.7.10.7/ovoc_base_for_$TAG $WORKSPACE/$TAG/ovoc_base_for_$TAG/ovoc_base_for_$TAG.ova &gt;&amp;3

cd ~

# what left is to upload new OVA to Artifactory
echo &quot;$(date) : ********        FINISH      ***********&quot; &gt;&amp;3
echo &quot;$(date) : what left is to upload new OVA to Artifactory&quot; &gt;&amp;3
echo &quot;$(date) : ********    **************   ***********&quot; &gt;&amp;3

</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@1.6.9">
      <template>#${BUILD_NUMBER}__${TAG}</template>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>