<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Create ova for ovoc server official release</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.0.10"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.27">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>TAG</name>
          <description></description>
          <defaultValue></defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>OVA</name>
          <description>Base ova version (DVD1 + DVD2)</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>Deploy.7.6-rev18-rev3</string>
              <string>Deploy.7.4-rev18-rev3</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>Brand</name>
          <description>Branded ISO</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>AudioCodes</string>
              <string>Nuera</string>
              <string>NEC</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>RunSanity</name>
          <description>Run sanity tests</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@4.0.0">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>ssh://jenkins@test-gerrit:29418/EMS/ovoc_server.git</url>
        <credentialsId>fef9964a-ddb7-4ce6-a445-a99a9e9802c0</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>server_${TAG}</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <browser class="hudson.plugins.git.browser.GitBlitRepositoryBrowser">
      <url></url>
      <projectName></projectName>
    </browser>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.CleanBeforeCheckout/>
      <hudson.plugins.git.extensions.impl.CloneOption>
        <shallow>false</shallow>
        <noTags>false</noTags>
        <reference></reference>
        <timeout>30</timeout>
        <depth>10</depth>
        <honorRefspec>false</honorRefspec>
      </hudson.plugins.git.extensions.impl.CloneOption>
    </extensions>
  </scm>
  <assignedNode>ems_ova</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#############################################################################
#############################################################################
##### Fetching changes submitted to gerrit without waiting for a build ######
##### This is for testing ONLY!!!!!! Remove when going to production!! ######
#cd ${WORKSPACE}
#git fetch
#git branch -a
#git branch -vv --no-color
#git log -3
#git checkout -f remotes/origin/7.4.3000
#############################################################################
#############################################################################
#############################################################################

## Get current branch
# Get the build from the TAG
BLD=`echo $TAG | cut -d. -f3`
# Calculate the branch
if [[ ${#BLD} == 3 ]]; then
	BRANCH=${TAG:0:3}
else
	# Build is 4 digits. We set the branch according to the most significant digit (thousends) - MSD
	MSD=${TAG:4:1}
    BRANCH=&quot;${TAG:0:3}.${MSD}XXX&quot;
fi

rm  -f /tmp/noDest.err || true
if [[ ! -d /home/centos/data/output/ISO_Files/OVOC_${BRANCH}/DVD5_Virtual ]]; then
    echo &quot;***********************************************************************&quot;
    echo &quot;***********************************************************************&quot;
    echo &quot;***********************************************************************&quot;
    echo &quot;$(date) : No destination folder for branch ${BRANCH} on NetApp !!!&quot; &gt; /tmp/noDest.err
    echo &quot;***********************************************************************&quot;
    echo &quot;***********************************************************************&quot;
    echo &quot;***********************************************************************&quot;
    exit 1
fi

## Check that TAG matches OVA version
OVA_VER=`echo $OVA | cut -d&apos;-&apos; -f1 | gawk -v FS=. &apos;{ print $2&quot;.&quot;$3 }&apos;`
if [[ &quot;${TAG:0:3}&quot; != &quot;$OVA_VER&quot; ]]; then
	exit -1
fi

OVA=&quot;/home/centos/data/ovoc_base/ova/${OVA}.ova&quot;

# Set the following values to fit your need
vmHostIP=&quot;10.7.10.107&quot;
netMask=&quot;16&quot;
DefaultGW=&quot;10.7.0.1&quot;
ovocIP=&quot;10.7.10.77&quot;
FullTesting=&quot;0&quot;

# Get ESXi password from encrypted file
cd ~/.ssl
vipw=$(openssl rsautl -decrypt -inkey private.pem -in pw.esxi)

cd ${WORKSPACE}

# Create a new log file
now=`date +&quot;%Y%m%d-%H%M%S&quot;`
logfile=&quot;${WORKSPACE}/ems_ovoc_ova_$now.log&quot;
[[ -f $logfile  ]] &amp;&amp; rm $logfile
touch $logfile

echo &quot;$(date) : *****************  START  ******************&quot; | tee -a $logfile


###################################################################################################
# Check &amp; delete old ovoc servers

# check and delete old ovoc_base_for_ vm`s
vms=`ssh root@${vmHostIP} vim-cmd vmsvc/getallvms | grep &quot;ovoc_base_for_&quot; | gawk &apos;{print $1}&apos;`
if [[ &quot;$vms&quot; -ne &quot;&quot; ]]; then
    for vmid in $vms; do
        echo &quot;$(date) : ovoc_base_for_${TAG} already exist. Deleting vm&quot; | tee -a $logfile
        ( ssh root@${vmHostIP} vim-cmd vmsvc/power.off ${vmid} ) || true | tee -a $logfile
        sleep 10
        ssh root@${vmHostIP} vim-cmd vmsvc/destroy ${vmid} | tee -a $logfile
        sleep 10
    done
fi

ssh root@${vmHostIP} rm -rf /vmfs/volumes/DataStore01/ovoc_base_for_*

###################################################################################################
# Prepare basic ovoc server (DVD 1 &amp; 2)VM from ova

# create a new VM from $OVA (ova file is located on jenkins slave /home/centos/data/ovoc_base/ova/)
echo &quot;$(date) : creating new base ovoc server VM from $OVA&quot; | tee -a $logfile
ovftool --disableVerification --noSSLVerify --name=&quot;ovoc_base_for_${TAG}&quot; --datastore=DataStore01 --diskMode=thin --acceptAllEulas --powerOn $OVA vi://root:$vipw@${vmHostIP} | tee -a $logfile
if [ $? -ne 0 ]; then
    echo &quot;$(date) : Deploy new VM has failed - check ems_ovoc_vm_log.out&quot; | tee -a $logfile
    exit
fi

# find new vm id
vmid=`ssh root@${vmHostIP} vim-cmd vmsvc/getallvms | grep &quot;ovoc_base_for_${TAG}&quot; | gawk &apos;{print $1}&apos;`
echo &quot;$(date) : vm id is $vmid&quot; | tee -a $logfile

# Wait for ovoc server power on
#isUp $vmHostIP $vmid || exit
echo &quot;$(date) : sleep 5 min.&quot; | tee -a $logfile
sleep 300

# find new vm IP address
vmip=`ssh root@${vmHostIP} vim-cmd vmsvc/get.guest $vmid | grep -m 1 &quot;ipAddress&quot; | cut -d&apos;&quot;&apos; -f2`
ipcalc -cs $vmip || ( echo &quot;$(date) : Invalid IP for $vmid&quot; | tee -a $logfile &amp;&amp; exit)
echo &quot;$(date) : vm IP is $vmip&quot; | tee -a $logfile

# Check ssh readiness
#sshUp $vmip || exit -2


###################################################################################################
# Install DVD 3 on basic vovoc server

## Create ovoc hardware minimal requirements workaround
echo &quot;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&quot; | tee -a $logfile
echo &quot;$(date) : @@@@@@@@@@@@@@@@@@ Disable ovoc hardware minimal requirements @@@@@@@@@@@@@@@@@@&quot; | tee -a $logfile
cd ${WORKSPACE}/EMS/VersionRelease
python2.7 hwFlag.py ${vmip} &apos;on&apos; | tee -a $logfile

# if branch is 7.4 then we dont run this step
# in branch is higher than 7.4 then we need to arrange the directory EMS/target
# so it will contain only the 5 jar files we copied from build-ovoc job archive
# and all executables
cd ${WORKSPACE}/EMS
[[ ! -f target ]] &amp;&amp; mkdir target
chmod 0775 target
cd target
rm -rf *
cp ${WORKSPACE}/ovaPreRequisites/* .
chmod 0775 *
cd ${WORKSPACE}

# Set Network
echo &quot;$(date) : Applying DVD 3&quot; | tee -a $logfile
cd EMS/VersionRelease
if [[ &quot;$BRANCH&quot; == &quot;7.4.3XXX&quot; ]]; then
	# We need to pass the netmask of the EMS server
	(python2.7 setNetwork.py $vmip $netMask $DefaultGW | tee -a $logfile) || (echo &quot;$(date) : Failed network setting&quot; | tee -a $logfile &amp;&amp; exit -1)
else
	# setNetwork.py for version 7.6 and later calculate netmask by itself
	(python2.7 setNetwork.py $vmip sanity | tee -a $logfile) || (echo &quot;$(date) : Failed network setting&quot; | tee -a $logfile &amp;&amp; exit -1)
fi
cd ${WORKSPACE}

# ovoc server was rebooted, so -
# Wait for ovoc server power on
#isUp ${vmHostIP} $vmid || exit -2
echo &quot;$(date) : sleep 5 min.&quot; | tee -a $logfile
sleep 300

## Sanity Install DVD-3
#fetch DVD3 iso
case &quot;$Brand&quot; in
    AudioCodes)
        iso_dir=&quot;official_iso&quot;
        Brand=&quot;&quot;
        ;;
    Nuera|NEC)
        iso_dir=&quot;branded_iso/$Brand&quot;
        Brand=&quot;$Brand&quot;_
        ;;
    *)
        echo &quot;Unknown iso brand $Brand!&quot;
        exit 1
esac

# Run install script
cd EMS/VersionRelease
(python2.7 SanityInstall.py ${TAG} ${vmip} ${iso_dir} | tee -a $logfile) || (echo &quot;$(date) : Failed sanity install&quot; | tee -a $logfile &amp;&amp; exit -1)
cd ${WORKSPACE}
sleep 30
echo &quot;###################################################################################################&quot; | tee -a $logfile
echo &quot;###################################################################################################&quot; | tee -a $logfile
echo &quot;###################################################################################################&quot; | tee -a $logfile
echo &quot;$(date) : Done applying DVD 3&quot; | tee -a $logfile
echo &quot;###################################################################################################&quot; | tee -a $logfile
echo &quot;###################################################################################################&quot; | tee -a $logfile
echo &quot;###################################################################################################&quot; | tee -a $logfile

# ovoc server was rebooted during DVD 3 installation, so -
# Wait for ovoc server power on
#isUp ${vmHostIP} $vmid || exit -2
echo &quot;$(date) : sleep 5 min.&quot; | tee -a $logfile
sleep 300

###################################################################################################
# clean before export to OVA

## Clean ovoc hardware minimal requirements workaround
cd EMS/VersionRelease
echo &quot;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&quot; | tee -a $logfile
echo &quot;$(date) : @@@@@@@@@@@@@@@@@@ Disable ovoc hardware minimal requirements @@@@@@@@@@@@@@@@@@&quot; | tee -a $logfile
python2.7 hwFlag.py ${vmip} &apos;off&apos; | tee -a $logfile
cd ${WORKSPACE}

echo &quot;$(date) : ssh to clean installetion files&quot; | tee -a $logfile
cd EMS/VersionRelease
(python2.7 cleanBeforeOva.py $vmip | tee -a $logfile) || (echo &quot;$(date) : Failed cleaning installation files&quot; | tee -a $logfile &amp;&amp; exit -1)
cd ${WORKSPACE}
sleep 30

###################################################################################################
# graceful shutdouwn this new full ovoc server VM
echo &quot;$(date) : shutdown new VM&quot; | tee -a $logfile
ssh root@${vmHostIP} vim-cmd vmsvc/power.shutdown ${vmid} | tee -a $logfile
sleep 30

###################################################################################################
# export the new VM to an OVA file
echo &quot;$(date) : export new VM to an OVA file&quot; | tee -a $logfile
cd ${WORKSPACE}
[[ -d &quot;${TAG}&quot; ]] &amp;&amp; rm -rf &quot;${TAG}&quot;
mkdir -p &quot;${TAG}&quot; | tee -a $logfile
#ovftool -o --shaAlgorithm=SHA1 --compress=9 --noSSLVerify --powerOffSource vi://root:$vipw@${vmHostIP}/ovoc_base_for_${TAG} ${WORKSPACE}/${TAG}/OVOC_VMware_${Brand}${TAG}.ova | tee -a $logfile
#ovftool -o --shaAlgorithm=SHA1 --noSSLVerify --powerOffSource vi://root:$vipw@${vmHostIP}/ovoc_base_for_${TAG} ${WORKSPACE}/${TAG}/OVOC_VMware_${Brand}${TAG}.ova | tee -a $logfile
ovftool -o --noSSLVerify --powerOffSource vi://root:$vipw@${vmHostIP}/ovoc_base_for_${TAG} ${WORKSPACE}/${TAG}/OVOC_VMware_${Brand}${TAG}.ova | tee -a $logfile
ovfResult=`tail -1 $logfile | grep &quot;Completed&quot;`
[[ &quot;${ovfResult}&quot; -eq &quot;Completed with errors&quot; ]] &amp;&amp; exit -1
cd ${WORKSPACE}/${TAG}
md5sum OVOC_VMware_${Brand}${TAG}.ova &gt; OVOC_VMware_${Brand}${TAG}.ova.md5
ls -l ${WORKSPACE}/${TAG}/OVOC_VMware_${Brand}${TAG}.ova
cat OVOC_VMware_${Brand}${TAG}.ova.md5
cd ${WORKSPACE}
echo &quot;###################################################################################################&quot; | tee -a $logfile
echo &quot;###################################################################################################&quot; | tee -a $logfile
echo &quot;###################################################################################################&quot; | tee -a $logfile
echo &quot;$(date) : Done export new VM to an OVA file&quot; | tee -a $logfile
echo &quot;###################################################################################################&quot; | tee -a $logfile
echo &quot;###################################################################################################&quot; | tee -a $logfile
echo &quot;###################################################################################################&quot; | tee -a $logfile

###################################################################################################
# Delete ovoc server vm
echo &quot;$(date) : Delete ovoc server VM from host&quot; | tee -a $logfile
ssh root@${vmHostIP} vim-cmd vmsvc/destroy ${vmid} | tee -a $logfile
    

###################################################################################################
# Run Sanity Tests
if [[ &quot;${RunSanity}&quot; == &quot;true&quot; ]]; then
    echo &quot;$(date) : Running sanity on ovoc server&quot;
    ###################################################################################################
    # Deploy ovoc server from newly created ova
    echo &quot;$(date) : Deploy ovoc server from newly created ova&quot; | tee -a $logfile
    ovftool --disableVerification --noSSLVerify --name=&quot;ovoc_server_${TAG}_Sanity&quot; --datastore=DataStore01 --diskMode=thin --acceptAllEulas --powerOn ${WORKSPACE}/${TAG}/OVOC_VMware_${Brand}${TAG}.ova vi://root:$vipw@${vmHostIP} | tee -a $logfile
    sleep 300
    
    ###################################################################################################
    # Generate and install FK
    echo &quot;$(date) : Generate FK&quot; | tee -a $logfile
    cd EMS/VersionRelease
    (python2.7 SanityFK.py $vmip $TAG | tee -a $logfile) || (echo &quot;$(date) : Failed FK&quot; | tee -a $logfile &amp;&amp; exit -1)
    cd ${WORKSPACE}
    
    ###################################################################################################
    # Reboot &amp; Verify services on ovoc_server after FK installation
    echo &quot;$(date) : Reboot &amp; Verify services on ovoc_server after FK installation&quot; | tee -a $logfile
    cd EMS/VersionRelease
    (python2.7 SanityReboot.py $vmip | tee -a $logfile) || (echo &quot;$(date) : Failed reboot after FK installation&quot; | tee -a $logfile &amp;&amp; exit -1)
    cd ${WORKSPACE}
    
    ###################################################################################################
    # Run sanity tests on ovoc server
    echo &quot;$(date) : Run sanity tests on ovoc server&quot; | tee -a $logfile
    cd EMS/VersionRelease

    python2.7 SanityTest.py ${TAG} $vmip $FullTesting | tee -a $logfile &amp;&amp; python2.7 SanityCopyLogs.py ${TAG} $vmip | tee -a $logfile || \
    (python2.7 SanityCopyLogs.py $NEW_TAG $vmip | tee -a $logfile || echo &quot;$(date) : Failed to download logs&quot; | tee -a $logfile &amp;&amp; exit -1)
    cd ${WORKSPACE}
    echo &quot;###################################################################################################&quot; | tee -a $logfile
    echo &quot;###################################################################################################&quot; | tee -a $logfile
    echo &quot;###################################################################################################&quot; | tee -a $logfile
    echo &quot;${date} : Done Sanity Tests&quot; | tee -a $logfile
    echo &quot;###################################################################################################&quot; | tee -a $logfile
    echo &quot;###################################################################################################&quot; | tee -a $logfile
    echo &quot;###################################################################################################&quot; | tee -a $logfile

    ###################################################################################################
    # Delete new ovoc server vm
    
    # find new ovoc vmid
    vmid=`ssh root@${vmHostIP} vim-cmd vmsvc/getallvms | grep &quot;ovoc_server_${TAG}_Sanity&quot; | gawk &apos;{print $1}&apos;`
    echo &quot;$(date) : vmid is $vmid&quot; | tee -a $logfile
    
    # Power off &amp; delete ovoc server vm
    echo &quot;$(date) : Delete new ovoc server VM from host&quot; | tee -a $logfile
    ssh root@${vmHostIP} vim-cmd vmsvc/power.off ${vmid} | tee -a $logfile
    ssh root@${vmHostIP} vim-cmd vmsvc/destroy ${vmid} | tee -a $logfile
else
    echo &quot;$(date) : NOT running sanity on ovoc server&quot;
fi

cd ${WORKSPACE}
echo &quot;export BR_DIR=OVOC_${TAG%???}XXX&quot; &gt; buildVars
echo &quot;export BRANCH=$BRANCH&quot; &gt;&gt; buildVars
echo &quot;export OVA_NAME=OVOC_VMware_${Brand}${TAG}&quot; &gt;&gt; buildVars

echo &quot;$(date) : FINISH!!!&quot; | tee -a $logfile
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>ems_ovoc_ova*.log</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
    <hudson.plugins.postbuildtask.PostbuildTask plugin="postbuild-task@1.8">
      <tasks>
        <hudson.plugins.postbuildtask.TaskProperties>
          <logTexts>
            <hudson.plugins.postbuildtask.LogProperties>
              <logText>Done export new VM to an OVA file</logText>
              <operator>AND</operator>
            </hudson.plugins.postbuildtask.LogProperties>
          </logTexts>
          <EscalateStatus>false</EscalateStatus>
          <RunIfJobSuccessful>true</RunIfJobSuccessful>
          <script>. ${WORKSPACE}/buildVars&#xd;
&#xd;
# Move output to Netapp&#xd;
echo &quot;Manipulated $TAG to directory name $BR_DIR&quot;&#xd;
&#xd;
cd /home/centos/data/output/ISO_Files/$BR_DIR/DVD5_Virtual&#xd;
&#xd;
if [[ -d ${TAG} ]]; then&#xd;
    cd ${TAG}&#xd;
    if [[ -f &quot;${HVM_NAME}&quot;.7z ]]; then&#xd;
        last_mod=`date -r ${OVA_NAME}.ova +%Y-%m-%d--%H-%M`&#xd;
        find . -name &quot;${OVA_NAME}.*&quot; -exec mv {} {}.${last_mod} \;&#xd;
    fi&#xd;
else&#xd;
    mkdir ${TAG}&#xd;
fi&#xd;
&#xd;
&#xd;
mv -v $WORKSPACE/$TAG/* /home/centos/data/output/ISO_Files/$BR_DIR/DVD5_Virtual/${TAG}/</script>
        </hudson.plugins.postbuildtask.TaskProperties>
      </tasks>
    </hudson.plugins.postbuildtask.PostbuildTask>
    <hudson.tasks.Mailer plugin="mailer@1.29">
      <recipients>yuval.yosha shuky.riechard</recipients>
      <dontNotifyEveryUnstableBuild>false</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
    <hudson.plugins.emailext.ExtendedEmailPublisher plugin="email-ext@2.61">
      <recipientList>gal.erez, Gennady.Tsiporkin, marina.Risher, liran.badiri, shuky.riechard, yuval.yosha</recipientList>
      <configuredTriggers>
        <hudson.plugins.emailext.plugins.trigger.SuccessTrigger>
          <email>
            <subject>$PROJECT_DEFAULT_SUBJECT</subject>
            <body>$PROJECT_DEFAULT_CONTENT</body>
            <recipientProviders>
              <hudson.plugins.emailext.plugins.recipients.ListRecipientProvider/>
            </recipientProviders>
            <attachmentsPattern></attachmentsPattern>
            <attachBuildLog>false</attachBuildLog>
            <compressBuildLog>false</compressBuildLog>
            <replyTo>$PROJECT_DEFAULT_REPLYTO</replyTo>
            <contentType>project</contentType>
          </email>
        </hudson.plugins.emailext.plugins.trigger.SuccessTrigger>
      </configuredTriggers>
      <contentType>text/html</contentType>
      <defaultSubject>OVOC OVA is ready </defaultSubject>
      <defaultContent>

Files are at -
\\netapp01\EMS\Versions\ISO_Files

ESXi version: 6.5.0 Update 2 (Build 8294253)
</defaultContent>
      <attachmentsPattern></attachmentsPattern>
      <presendScript>$DEFAULT_PRESEND_SCRIPT

if [[ -f /tmp/noDest.err ]]; then
    MSG=$(cat /tmp/noDest.err)
else
    . ${WORKSPACE}/buildVars

    cat ${JENKINS_HOME}/jobs/${JOB_NAME}/builds/${BUILD_NUMBER}/log &gt; /tmp/log
    RESULT=${grep -A9 &quot;Sanity Test Result:&quot; /tmp/log}

    MSG=$(echo -e &apos;OVOC for Hyper-V 2016 completed.\n\nFiles can be found on Netapp: \n\\\\netapp01\\\ems\\Versions\\ISO_Files \n\nTests results: \n&apos;${RESULTS})
fi</presendScript>
      <postsendScript>$DEFAULT_POSTSEND_SCRIPT</postsendScript>
      <attachBuildLog>false</attachBuildLog>
      <compressBuildLog>false</compressBuildLog>
      <replyTo>$DEFAULT_REPLYTO</replyTo>
      <saveOutput>false</saveOutput>
      <disabled>false</disabled>
    </hudson.plugins.emailext.ExtendedEmailPublisher>
  </publishers>
  <buildWrappers>
    <org.jfrog.hudson.generic.ArtifactoryGenericConfigurator plugin="artifactory@3.4.1">
      <deployerDetails>
        <artifactoryName>artifactory2-pro</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <stagingPlugin/>
      </deployerDetails>
      <resolverDetails>
        <artifactoryName>artifactory2-pro</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <stagingPlugin/>
      </resolverDetails>
      <deployerCredentialsConfig>
        <credentialsId></credentialsId>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </deployerCredentialsConfig>
      <resolverCredentialsConfig>
        <credentialsId></credentialsId>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </resolverCredentialsConfig>
      <useSpecs>true</useSpecs>
      <uploadSpec>
        <spec></spec>
      </uploadSpec>
      <downloadSpec>
        <spec>{
    &quot;files&quot;: [
        {
            &quot;pattern&quot;: &quot;ems-release/com/ac/ems/ovoc_server/Sanity_preReq/${TAG}/*.*&quot;,
            &quot;target&quot;: &quot;${workspace}/ovaPreRequisites/&quot;,
            &quot;flat&quot;: &quot;true&quot;
        }
    ]
}</spec>
      </downloadSpec>
      <deployPattern></deployPattern>
      <resolvePattern>ems-release:com/ac/ems/ovoc_server/Sanity_preReq/${TAG}/*.*=&gt;${workspace}/ovaPreRequisites
ems-release:com/ac/ems/ovoc_server/Sanity_preReq/scripts/*.*=&gt;${workspace}/EMS/VersionRelease</resolvePattern>
      <deploymentProperties></deploymentProperties>
      <deployBuildInfo>true</deployBuildInfo>
      <includeEnvVars>false</includeEnvVars>
      <envVarsPatterns>
        <includePatterns></includePatterns>
        <excludePatterns>*password*,*secret*,*key*</excludePatterns>
      </envVarsPatterns>
      <discardOldBuilds>false</discardOldBuilds>
      <discardBuildArtifacts>true</discardBuildArtifacts>
      <asyncBuildRetention>false</asyncBuildRetention>
      <multiConfProject>false</multiConfProject>
      <customBuildName></customBuildName>
      <overrideBuildName>false</overrideBuildName>
    </org.jfrog.hudson.generic.ArtifactoryGenericConfigurator>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@2.0.3">
      <template>#${BUILD_NUMBER}__${TAG}</template>
      <descriptionTemplate></descriptionTemplate>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>