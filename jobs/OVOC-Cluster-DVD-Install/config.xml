<?xml version="1.1" encoding="UTF-8" standalone="no"?><project>
  <actions/>
  <description>############ This is work in progress  ################&#13;
############## Do NOT run this job #################&#13;
&#13;
This job accept the following parameters:&#13;
* New tag&#13;
* ISO to deploy&#13;
* OVOC server IP&#13;
* Server role (Master, VQ, PM)&#13;
* Test mode&#13;
&#13;
And does the following:&#13;
1. Connect to OVOC server by its IP address.&#13;
2. Install DVD3 according to given parameters.&#13;
&#13;
</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.0.10"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>30</daysToKeep>
        <numToKeep>-1</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.27">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>TAG</name>
          <description>The tag to install</description>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>DeployISO</name>
          <description/>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>latest_iso</string>
              <string>official_iso</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ServerIP</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>ServerRole</name>
          <description/>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>Master</string>
              <string>VQ</string>
              <string>PM</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>FullTests</name>
          <description>Run full sanity tests or not</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>1</string>
              <string>0</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit/>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>ems-build</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>true</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>###### Echo parameters for testing
echo -e "TAG:\t${TAG}" &gt; sanity.properties
echo -e "ISO:\t${DeployISO}" &gt;&gt; sanity.properties
echo -e "IP:\t${ServerIP}" &gt;&gt; sanity.properties
echo -e "Role:\t${ServerRole}" &gt;&gt; sanity.properties

cat sanity.properties

############################### Begin old Code ##########################
if false; then
# DO NOT RUN ANY OF THIS OLD CODE

## Get prerequisites for current branch
BRANCH=${TAG%.*}

cd ${WORKSPACE}/EMS
[[ -d target ]] &amp;&amp; rm -rf target
mkdir target
cd target
for f in common-${BRANCH}-SNAPSHOT.jar \
	server-${BRANCH}-SNAPSHOT.jar \
	rest-core-${BRANCH}-SNAPSHOT.jar \
	oracle_trigger-${BRANCH}-SNAPSHOT.jar \
	database-${BRANCH}-SNAPSHOT.jar
do curl -O -k --user admin:$artiPass https://artifactory/ems-release/com/ac/ems/ovoc_server/Sanity_preReq/$TAG/$f; done


# Copy FKGenerator.ini &amp; Change prerequisite files permissions
cd ${WORKSPACE}/EMS
chmod 0755 target
cp FKGenerator.ini target
chmod -R 0755 target
cd ${WORKSPACE}


# define a default GW - we need it to configure network of tested machine in case version in 7.4.3000 or older
DefaultGateway="172.16.132.1"
netMask="24"


echo "INSTANCE_ID=${INSTANCE_ID}" &gt; sanity.properties
echo "vmIP=${vmIP}" &gt;&gt; sanity.properties

# if this is a build for QA then configure the tested machine with "ami" - means we set TimeZone London (GMT+0)
# but if this is a regular build then configure the tested machine with "sanity" - means we set TimeZone Israel
if [[ "$DeployISO" == "official_iso" ]]
then
	sanityOrAmi=ami
else
	sanityOrAmi=sanity
fi

#2. run python scripts: set network , install
cd EMS/VersionRelease
# from 7.6 and up we dont send default gateway because the script knows that this is AWS env and learn IP addresses from the machine
python2.7 setNetwork.py $vmIP $sanityOrAmi

echo "Finish SetNetwork Configuration"

#run sanityInstall and if sanity install fails then copy logs and exit with error
echo "Running single script for install"
python2.7 SanityInstall.py $TAG $vmIP $DeployISO || { python2.7 SanityCopyLogs.py $TAG $vmIP ; exit 1; }
echo "Finish SanityInstall"

## Create AMI
if [[ "$DeployISO" == "official_iso" ]]; then
	#check if the ami already exists
	checkIfAmiExists=$(aws ec2 describe-images --filters Name=name,Values=ovocAMI_${TAG} --output text --query "Images[0].State")
	if [[ "$checkIfAmiExists" == "available" ]]; then
    	echo "Deleting existing AMI of ovocAMI_${TAG}"
        #get AmiId to delete it
        AmiIDToDelete=$(aws ec2 describe-images --filters Name=name,Values=ovocAMI_${TAG} --output text --query "Images[0].ImageId")
        
        #get Snapshot id - delete the Snapshot
        snapshotIdToDelete=$(aws ec2 describe-images --image-ids $AmiIDToDelete --output text --query Images[*].BlockDeviceMappings[*].Ebs.SnapshotId)
        
        #delete AMI and Snopshot ID
        aws ec2 deregister-image --image-id ${AmiIDToDelete}
        aws ec2 delete-snapshot --snapshot-id ${snapshotIdToDelete}
        sleep 60
	fi
    
	echo "Creating New Ovoc Ami"
	#create a new AMI After installation and keep ImageID value
	AmiId=$(aws ec2 create-image --instance-id ${INSTANCE_ID} --name "ovocAMI_${TAG}" --description "ovoc AMI ${TAG}" --output text --query "ImageId")
	
    #check if image available
    OLD_STATE=""
    while true; do
    	sleep 100
        STATE=$(aws ec2 describe-images --image-ids $AmiId --output text --query "Images[0].State")
        
        if [[ $STATE != $OLD_STATE ]]; then
        	echo $STATE
            OLD_STATE=$STATE
        fi
        
        if [[ $STATE == "available" ]]; then
        	break
        fi
    done
            
	#get Snapshot id -  we need it in order to tag the snapshot as well
	snapshotId=$(aws ec2 describe-images --image-ids $AmiId --output text --query Images[*].BlockDeviceMappings[*].Ebs.SnapshotId)
	
	#give name to the AMI 
	aws ec2 create-tags --resources $AmiId --tags Key=Name,Value=OvocAMI_${TAG}
	#give name to the snapshot 
	aws ec2 create-tags --resources $snapshotId --tags Key=Name,Value=OvocAMI_${TAG}
	#give Branch name to the AMI 
	aws ec2 create-tags --resources $AmiId --tags Key=Branch,Value=$BRANCH
	
	## share the new created AMI with dev and QA teams:
	echo "Sharing the new created AMI with Dev and QA teams:"
	qaAccount=191324562914
	devAccount=952166219867
	#give permissions to ovoc QA Account to the AMI
	aws ec2 modify-image-attribute --image-id $AmiId --launch-permission "{\"Add\":[{\"UserId\":\"$qaAccount\"}]}"
	#give permissions to ovoc DEV Account to the Ami
	aws ec2 modify-image-attribute --image-id $AmiId --launch-permission "{\"Add\":[{\"UserId\":\"$devAccount\"}]}"
	
	#give permissions to ovoc QA Account to the SnapShot
	aws ec2 modify-snapshot-attribute --snapshot-id $snapshotId --attribute createVolumePermission --operation-type add --user-ids $qaAccount
	#give permissions to ovoc DEV Account to the SnapShot
	aws ec2 modify-snapshot-attribute --snapshot-id $snapshotId --attribute createVolumePermission --operation-type add --user-ids $devAccount
	
	#check if shared
	#checkImagePermissions=$(aws ec2 describe-image-attribute --image-id $AmiId --attribute launchPermission --output text --query "LaunchPermissions[*]")
	#ImagePermissionsInArray=($checkImagePermissions)
	#if [ ! { ["${ImagePermissionsInArray[1]}" == "$qaAccount"] &amp;&amp; ["${ImagePermissionsInArray[0]}" == "$devAccount"]; } ]; then
	#    echo "**************************************************************************"
	#    echo "give Permissions Failed"
	#    echo "**************************************************************************"
	#fi
fi

fi
############################### End old Code ##########################


</command>
    </hudson.tasks.Shell>
    <EnvInjectBuilder plugin="envinject@2.3.0">
      <info>
        <propertiesFilePath>sanity.properties</propertiesFilePath>
      </info>
    </EnvInjectBuilder>
  </builders>
  <publishers>
    <org.jenkinsci.plugins.postbuildscript.PostBuildScript plugin="postbuildscript@2.5.1">
      <config>
        <scriptFiles/>
        <groovyScripts/>
        <buildSteps>
          <org.jenkinsci.plugins.postbuildscript.model.PostBuildStep>
            <results>
              <string>SUCCESS</string>
              <string>NOT_BUILT</string>
              <string>ABORTED</string>
              <string>FAILURE</string>
              <string>UNSTABLE</string>
            </results>
            <role>SLAVE</role>
            <buildSteps>
              <hudson.tasks.Shell>
                <command>if [[ -d  ${WORKSPACE}/EMS/VersionRelease/logs/ems/tester/rest/PMTemplateTest ]]; then
    cd ${WORKSPACE}/EMS/VersionRelease/logs/ems/tester/rest
    tar zcfv PMTemplateTest.tgz PMTemplateTest &amp;&amp; rm -rf PMTemplateTest
fi</command>
              </hudson.tasks.Shell>
            </buildSteps>
          </org.jenkinsci.plugins.postbuildscript.model.PostBuildStep>
          <org.jenkinsci.plugins.postbuildscript.model.PostBuildStep>
            <results>
              <string>NOT_BUILT</string>
              <string>ABORTED</string>
              <string>FAILURE</string>
              <string>UNSTABLE</string>
            </results>
            <role>SLAVE</role>
            <buildSteps>
              <hudson.tasks.Shell>
                <command>#get all instance id and vm ip
set -a
source ${WORKSPACE}/sanity.properties
set +a

cd ${WORKSPACE}/EMS/VersionRelease
#run copy logs
python2.7 SanityCopyLogs.py $TAG $vmIP
</command>
              </hudson.tasks.Shell>
            </buildSteps>
          </org.jenkinsci.plugins.postbuildscript.model.PostBuildStep>
        </buildSteps>
        <markBuildUnstable>false</markBuildUnstable>
      </config>
    </org.jenkinsci.plugins.postbuildscript.PostBuildScript>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>EMS/VersionRelease/logs/**/*</artifacts>
      <allowEmptyArchive>true</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>false</defaultExcludes>
      <caseSensitive>false</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
  </publishers>
  <buildWrappers>
    <EnvInjectPasswordWrapper plugin="envinject@2.3.0">
      <injectGlobalPasswords>false</injectGlobalPasswords>
      <maskPasswordParameters>true</maskPasswordParameters>
      <passwordEntries>
        <EnvInjectPasswordEntry>
          <name>artiPass</name>
          <value>{AQAAABAAAAAQT0A5kGH1euKydYIrJF5K0a/ovUyKPCPsOeyQ4h01qC0=}</value>
        </EnvInjectPasswordEntry>
      </passwordEntries>
    </EnvInjectPasswordWrapper>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@2.0.3">
      <template>#${BUILD_NUMBER}_${TAG}_${ServerRole}</template>
      <descriptionTemplate/>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>