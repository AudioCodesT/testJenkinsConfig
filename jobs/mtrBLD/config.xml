<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>MeetingRecorder build server - run nightly</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>20</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>100</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.27">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@3.8.0">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>ssh://jenkins@test-gerrit:29418/SmartTAP/MeetingRecorder.git</url>
        <credentialsId>fef9964a-ddb7-4ce6-a445-a99a9e9802c0</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>${GERRIT_BRANCH}</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <browser class="hudson.plugins.git.browser.GitBlitRepositoryBrowser">
      <url>https://test-gerrit/plugins/gitblit/</url>
      <projectName>SmartTAP/MeetingRecorder</projectName>
    </browser>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.CleanBeforeCheckout/>
    </extensions>
  </scm>
  <assignedNode>mtr-Build-Label</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTrigger plugin="gerrit-trigger@2.27.5">
      <spec></spec>
      <gerritProjects>
        <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
          <compareType>PLAIN</compareType>
          <pattern>SmartTAP/MeetingRecorder</pattern>
          <branches>
            <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
              <compareType>ANT</compareType>
              <pattern>**</pattern>
            </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
          </branches>
          <disableStrictForbiddenFileVerification>false</disableStrictForbiddenFileVerification>
        </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
      </gerritProjects>
      <dynamicGerritProjects class="empty-list"/>
      <skipVote>
        <onSuccessful>false</onSuccessful>
        <onFailed>false</onFailed>
        <onUnstable>false</onUnstable>
        <onNotBuilt>false</onNotBuilt>
      </skipVote>
      <silentMode>false</silentMode>
      <notificationLevel></notificationLevel>
      <silentStartMode>false</silentStartMode>
      <escapeQuotes>true</escapeQuotes>
      <nameAndEmailParameterMode>PLAIN</nameAndEmailParameterMode>
      <dependencyJobsNames></dependencyJobsNames>
      <commitMessageParameterMode>BASE64</commitMessageParameterMode>
      <changeSubjectParameterMode>PLAIN</changeSubjectParameterMode>
      <commentTextParameterMode>BASE64</commentTextParameterMode>
      <buildStartMessage></buildStartMessage>
      <buildFailureMessage></buildFailureMessage>
      <buildSuccessfulMessage></buildSuccessfulMessage>
      <buildUnstableMessage></buildUnstableMessage>
      <buildNotBuiltMessage></buildNotBuiltMessage>
      <buildUnsuccessfulFilepath></buildUnsuccessfulFilepath>
      <customUrl></customUrl>
      <serverName>test-gerrit</serverName>
      <triggerOnEvents>
        <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.events.PluginChangeMergedEvent/>
      </triggerOnEvents>
      <dynamicTriggerConfiguration>false</dynamicTriggerConfiguration>
      <triggerConfigURL></triggerConfigURL>
      <triggerInformationAction/>
    </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!c:\cygwin64\bin\bash.exe --login -i

set -e

cd $WORKSPACE
#

# we build only if jenkins checked out on the last commit in branch, else exit 0
LastGerritCommitHash=$(git ls-remote | grep refs/heads/${GERRIT_BRANCH} | cut -f 1 | head -n 1 )
echo &quot;Last commit on Gerrit: ${LastGerritCommitHash}&quot;
echo &quot;Current commit: ${GERRIT_PATCHSET_REVISION}&quot;
if [ &quot;$LastGerritCommitHash&quot; != &quot;$GERRIT_PATCHSET_REVISION&quot; ]; then
	echo &quot;******   This is not the last commit. Exit without building  ******&quot;
    exit 0
fi

# Build HEAD
#fullBranch=`git branch --no-color -r --contains HEAD | grep -v -e &apos;-&gt;&apos; | head -1`
#BRANCH=`echo $(echo $fullBranch | sed &apos;s:.*origin.::&apos;)`
#BRANCH=${GERRIT_BRANCH}
OLDTAG=$(git describe --abbrev=0 --tags --first-parent ${GERRIT_BRANCH})
echo &quot;Old tag: ${OLDTAG}&quot;
DATE=`date`

#calculate new tag
# Tag structure is X.X.X.XXXXY
# where X is a digit Y is a letter
# If vesion number is to be handled by Jenkins,
# parse it from OLDTAG here.
#
# Define new build number
MAJOR=`echo $OLDTAG | gawk -F&apos;.&apos; &apos;{print $1}&apos;`
MINOR=`echo $OLDTAG | gawk -F&apos;.&apos; &apos;{print $2}&apos;`
POINT=`echo $OLDTAG | gawk -F&apos;.&apos; &apos;{print $3}&apos;`
TAGBUILD=`echo $OLDTAG | gawk -F&apos;.&apos; &apos;{print $NF}&apos;`
OLDBUILD=`echo $TAGBUILD | sed &apos;{s/[^0-9]//g}&apos;`
SUFFIX=`[[ ${#TAGBUILD} &gt; 4 ]] &amp;&amp; echo ${TAGBUILD:4} || echo &quot;&quot;`
NEWBUILD=`echo $OLDBUILD | gawk &apos;{print $1+1}&apos;`
NEWTAG=$MAJOR.$MINOR.$POINT.$NEWBUILD$SUFFIX
VERNUM=$MAJOR.$MINOR.$POINT

# Need these details for the UpdateVI job
AuthorCommitter=`git log --first-parent --pretty=format:&quot;%aN%n%cN&quot; $OLDTAG..${GERRIT_BRANCH} | grep -v Jenkins | sort -u | sed s/$/\;/g`
RN=&quot;&quot;
while read -r hash; do 
    subject=$(git log --pretty=format:&quot;%s&quot; $hash -n1 | sed &apos;s/\&quot;/`/g; s/---/_/g; s/::/;/g&apos;)
    VI=$(git log --pretty=format:&quot;%B&quot; $hash -n1 | grep ^Issue | sed &apos;s/Issue: //g&apos;)
    RN+=---$subject::$hash::$VI
done &lt;&lt;&lt; &quot;$(git log --first-parent --reverse --pretty=format:&quot;%h&quot; $OLDTAG..${GERRIT_BRANCH})&quot;

EMAIL=`git log --pretty=format:&quot;%ae%n%ce&quot; $OLDTAG..${GERRIT_BRANCH} | sort -u`
GERRIT_PROJECT=`echo $GIT_URL | cut -d/ -f4,5 | sed &apos;s:\.git::&apos;`
User=`git log --first-parent --pretty=format:&quot;%cN&quot; $OLDTAG..$GERRIT_BRANCH | head -1 | sed s/\ /_/g`

# Prepare job`s envirinment variables
echo NEWBUILD=${NEWBUILD} &gt; release.prop
echo NEWTAG=${NEWTAG} &gt;&gt; release.prop
echo GERRIT_BRANCH=${GERRIT_BRANCH} &gt;&gt; release.prop
echo VERNUM=${VERNUM} &gt;&gt; release.prop
echo User=${User} &gt;&gt; release.prop
echo RN=${RN} &gt;&gt; release.prop
echo GERRIT_HOST=$(echo $GIT_URL | cut -d@ -f2 | cut -d: -f1)  &gt;&gt; release.prop
echo EMAIL=${EMAIL} &gt;&gt; release.prop
echo PROJECT=${GERRIT_PROJECT} &gt;&gt; release.prop
echo DATE=${DATE} &gt;&gt; release.prop
echo AuthorCommitter=${AuthorCommitter} &gt;&gt; release.prop
echo WTB=${WTB} &gt;&gt; release.prop

echo &quot;**************************************************************&quot;
echo &quot;******************** Exported Variables **********************&quot;
echo &quot;**************************************************************&quot;
cat release.prop
echo &quot;**************************************************************&quot;
echo &quot;**************************************************************&quot;
echo &quot;**************************************************************&quot;
</command>
    </hudson.tasks.Shell>
    <EnvInjectBuilder plugin="envinject@2.1.5">
      <info>
        <propertiesFilePath>release.prop</propertiesFilePath>
      </info>
    </EnvInjectBuilder>
    <hudson.plugins.powershell.PowerShell plugin="powershell@1.3">
      <command>&lt;#
    .SYNOPSIS
    Runs the specified command in an elevated context.

    .DESCRIPTION
    Runs the specified command in an elevated context. This is useful on Windows
    systems where the user account control is enabled. Input object and result
    objects are serialized using XML.
    It&apos;s important, the command does use the current user context. This means,
    the current user needs administrative permissions on the local system.
    If no file path or script block is specified, the current running process
    will be run as administrator.

    .INPUTS
    None.

    .OUTPUTS
    Output of the invoked script block or command.

    .EXAMPLE
    PS C:\&gt; Invoke-Elevated
    Will start the current process, e.g. PowerShell Console or ISE, in an
    elevated session as Administrator.

    .EXAMPLE
    PS C:\&gt; Invoke-Elevated -FilePath &apos;C:\Temp\script.ps1&apos;
    Start the script in an elevated session and return the result.

    .EXAMPLE
    PS C:\&gt; Invoke-Elevated -ScriptBlock { Get-DscLocalConfigurationManager }
    Start the script in an elevated session and return the result.

    .EXAMPLE
    PS C:\&gt; Invoke-Elevated -ScriptBlock { param ($Path) Remove-Item -Path $Path } -ArgumentList &apos;C:\Windows\test.txt&apos;
    Delete a file from the program files folder with elevated permission,
    beacuse a normal user account has no permissions.

    .NOTES
    Author : Claudio Spizzi
    License : MIT License

    .LINK
    https://github.com/claudiospizzi/SecurityFever
#&gt;

function Invoke-Elevated
{
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute(&apos;PSShouldProcess&apos;, &apos;&apos;, Scope=&apos;Function&apos;, Target=&apos;Invoke-Elevated&apos;)]
    [CmdletBinding(DefaultParameterSetName = &apos;None&apos;)]
    [Alias(&apos;sudo&apos;)]
    param
    (
        # The path to an executable program.
        [Parameter(Mandatory = $true, Position = 0, ParameterSetName = &apos;FilePath&apos;)]
        [ValidateScript({Test-Path -Path $_})]
        [System.String]
        $FilePath,

        # The script block to execute in an elevated context.
        [Parameter(Mandatory = $true, Position = 0, ParameterSetName = &apos;ScriptBlock&apos;)]
        [System.Management.Automation.ScriptBlock]
        $ScriptBlock,

        # Optional argument list for the program or the script block.
        [Parameter(Mandatory = $false, Position = 1)]
        [System.Object[]]
        $ArgumentList
    )

    if ($PSCmdlet.ParameterSetName -eq &apos;None&apos;)
    {
        # If no file path and script block was specified, just elevate the
        # current session for interactive use. For this, use the start info
        # object of the current process and start an elevated new one.
        $currentProcess = Get-Process -Id $PID

        $processStart = $currentProcess.StartInfo
        $processStart.FileName         = $currentProcess.Path
        $processStart.Verb             = &apos;RunAs&apos;

        $process = New-Object -TypeName System.Diagnostics.Process
        $process.StartInfo = $processStart
        $process.Start() | Out-Null
    }

    if ($PSCmdlet.ParameterSetName -eq &apos;FilePath&apos;)
    {
        # If a file path instead of a script block was specified, just load the
        # file content and parse it as script block.
        $ScriptBlock = [System.Management.Automation.ScriptBlock]::Create((Get-Content -Path $FilePath -ErrorAction Stop -Raw))
    }

    if ($PSCmdlet.ParameterSetName -eq &apos;FilePath&apos; -or $PSCmdlet.ParameterSetName -eq &apos;ScriptBlock&apos;)
    {
        try
        {
            # To transport the parameters, script outputs and the errors, we use
            # the CliXml object serialization and temporary files. This is
            # necessary because the elevated process runs in an elevated context
            $scriptBlockFile   = [System.IO.Path]::GetTempFileName() + &apos;.xml&apos;
            $argumentListFile  = [System.IO.Path]::GetTempFileName() + &apos;.xml&apos;
            $commandOutputFile = [System.IO.Path]::GetTempFileName() + &apos;.xml&apos;
            $commandErrorFile  = [System.IO.Path]::GetTempFileName() + &apos;.xml&apos;

            $ScriptBlock  | Export-Clixml -Path $scriptBlockFile
            $ArgumentList | Export-Clixml -Path $argumentListFile

            # Create a command string which contains all command executed in the
            # elevated session. The wrapper of the script block is needed to
            # pass the parameters and return all outputs objects and errors.
            $commandString = &apos;&apos;
            $commandString += &apos;Set-Location -Path &quot;{0}&quot;;&apos; -f $pwd.Path
            $commandString += &apos;$scriptBlock = [System.Management.Automation.ScriptBlock]::Create((Import-Clixml -Path &quot;{0}&quot;));&apos; -f $scriptBlockFile
            $commandString += &apos;$argumentList = [System.Object[]] (Import-Clixml -Path &quot;{0}&quot;);&apos; -f $argumentListFile
            $commandString += &apos;$output = Invoke-Command -ScriptBlock $scriptBlock -ArgumentList $argumentList;&apos;
            $commandString += &apos;$error | Export-Clixml -Path &quot;{0}&quot;;&apos; -f $commandErrorFile
            $commandString += &apos;$output | Export-Clixml -Path &quot;{0}&quot;;&apos; -f $commandOutputFile

            $commandEncoded = [System.Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($commandString))

            $processStart = New-Object -TypeName System.Diagnostics.ProcessStartInfo -ArgumentList &apos;C:\WINDOWS\System32\WindowsPowerShell\v1.0\powershell.exe&apos;
            $processStart.Arguments   = &apos;-NoProfile -NonInteractive -EncodedCommand {0}&apos; -f $commandEncoded
            $processStart.Verb        = &apos;RunAs&apos;
            $processStart.WindowStyle = &apos;Hidden&apos;

            $process = New-Object -TypeName System.Diagnostics.Process
            $process.StartInfo = $processStart
            $process.Start() | Out-Null

            Write-Verbose &quot;Elevated powershell.exe process started with id $($process.Id).&quot;

            $process.WaitForExit()

            Write-Verbose &quot;Elevated powershell.exe process stopped with exit code $($process.ExitCode).&quot;

            if ((Test-Path -Path $commandErrorFile))
            {
                Import-Clixml -Path $commandErrorFile | ForEach-Object { Write-Error $_ }
            }

            if ((Test-Path -Path $commandOutputFile))
            {
                Import-Clixml -Path $commandOutputFile | Write-Output
            }
        }
        catch
        {
            throw $_
        }
        finally
        {
            if ($null -ne $process)
            {
                $process.Dispose()
            }

            Remove-Item -Path $scriptBlockFile   -Force -ErrorAction SilentlyContinue
            Remove-Item -Path $argumentListFile  -Force -ErrorAction SilentlyContinue
            Remove-Item -Path $commandOutputFile -Force -ErrorAction SilentlyContinue
            Remove-Item -Path $commandErrorFile  -Force -ErrorAction SilentlyContinue
        }
    }
}

Invoke-Elevated -ScriptBlock {
	foreach($line in Get-Content .\release.prop) {
		if(-Not $line.startswith(&quot;#&quot;)){
			$data = $line.split(&apos;=&apos;)
			$var = $data[0]
			$val = $data[1].replace(&apos;&quot;&apos;,&apos;&apos;)
			[Environment]::SetEnvironmentVariable($var, $val, &quot;Machine&quot;)
		}
	}
}</command>
    </hudson.plugins.powershell.PowerShell>
    <hudson.tasks.BatchFile>
      <command>echo &quot;Running build batch with build number (%NEWBUILD%)&quot;&#xd;
cd Build&#xd;
build.bat %NEWBUILD%&#xd;
</command>
    </hudson.tasks.BatchFile>
    <hudson.tasks.BatchFile>
      <command>IF EXIST &quot;%WORKSPACE%\Deployment\Release\*.7z&quot; DEL &quot;%WORKSPACE%\Deployment\Release\*.7z&quot; /s&#xd;
&quot;C:\Program Files\7-Zip\7z.exe&quot; a C:\j\workspace\mtrBLD\Deployment\Release\%NEWTAG%.7z C:\j\workspace\mtrBLD\Deployment\Release\</command>
    </hudson.tasks.BatchFile>
  </builders>
  <publishers>
    <org.jenkins__ci.plugins.flexible__publish.FlexiblePublisher plugin="flexible-publish@0.15.2">
      <publishers>
        <org.jenkins__ci.plugins.flexible__publish.ConditionalPublisher>
          <condition class="org.jenkins_ci.plugins.run_condition.core.StringsMatchCondition" plugin="run-condition@1.0">
            <arg1>$WTB</arg1>
            <arg2>ByBranch</arg2>
            <ignoreCase>true</ignoreCase>
          </condition>
          <publisherList>
            <hudson.plugins.git.GitPublisher plugin="git@3.8.0">
              <configVersion>2</configVersion>
              <pushMerge>false</pushMerge>
              <pushOnlyIfSuccess>true</pushOnlyIfSuccess>
              <forcePush>false</forcePush>
              <tagsToPush>
                <hudson.plugins.git.GitPublisher_-TagToPush>
                  <targetRepoName>origin</targetRepoName>
                  <tagName>${NEWTAG}</tagName>
                  <tagMessage>Jenkins auto tagging</tagMessage>
                  <createTag>true</createTag>
                  <updateTag>true</updateTag>
                </hudson.plugins.git.GitPublisher_-TagToPush>
              </tagsToPush>
            </hudson.plugins.git.GitPublisher>
            <hudson.plugins.parameterizedtrigger.BuildTrigger plugin="parameterized-trigger@2.35.2">
              <configs>
                <hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
                  <configs>
                    <hudson.plugins.parameterizedtrigger.FileBuildParameters>
                      <propertiesFile>release.prop</propertiesFile>
                      <failTriggerOnMissing>false</failTriggerOnMissing>
                      <textParamValueOnNewLine>false</textParamValueOnNewLine>
                      <useMatrixChild>false</useMatrixChild>
                      <onlyExactRuns>false</onlyExactRuns>
                    </hudson.plugins.parameterizedtrigger.FileBuildParameters>
                  </configs>
                  <projects>UpdateVI-Jira</projects>
                  <condition>UNSTABLE_OR_BETTER</condition>
                  <triggerWithNoParameters>false</triggerWithNoParameters>
                  <triggerFromChildProjects>false</triggerFromChildProjects>
                </hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
              </configs>
            </hudson.plugins.parameterizedtrigger.BuildTrigger>
          </publisherList>
          <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$DontRun" plugin="run-condition@1.0"/>
          <executionStrategy class="org.jenkins_ci.plugins.flexible_publish.strategy.FailAtEndExecutionStrategy"/>
        </org.jenkins__ci.plugins.flexible__publish.ConditionalPublisher>
        <org.jenkins__ci.plugins.flexible__publish.ConditionalPublisher>
          <condition class="org.jenkins_ci.plugins.run_condition.core.AlwaysRun" plugin="run-condition@1.0"/>
          <publisherList>
            <hudson.tasks.ArtifactArchiver>
              <artifacts>Deployment\Release\BuildLogs\**\*.*</artifacts>
              <allowEmptyArchive>false</allowEmptyArchive>
              <onlyIfSuccessful>false</onlyIfSuccessful>
              <fingerprint>false</fingerprint>
              <defaultExcludes>true</defaultExcludes>
              <caseSensitive>true</caseSensitive>
            </hudson.tasks.ArtifactArchiver>
          </publisherList>
          <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$DontRun" plugin="run-condition@1.0"/>
          <executionStrategy class="org.jenkins_ci.plugins.flexible_publish.strategy.FailAtEndExecutionStrategy"/>
        </org.jenkins__ci.plugins.flexible__publish.ConditionalPublisher>
      </publishers>
    </org.jenkins__ci.plugins.flexible__publish.FlexiblePublisher>
  </publishers>
  <buildWrappers>
    <org.jfrog.hudson.generic.ArtifactoryGenericConfigurator plugin="artifactory@3.1.0">
      <deployerDetails>
        <artifactoryName>artifactory2-pro</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <deployReleaseRepository>
          <keyFromText></keyFromText>
          <keyFromSelect>mtr-release</keyFromSelect>
          <dynamicMode>false</dynamicMode>
        </deployReleaseRepository>
        <stagingPlugin/>
      </deployerDetails>
      <resolverDetails>
        <artifactoryName>artifactory2-pro</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <stagingPlugin/>
      </resolverDetails>
      <deployerCredentialsConfig>
        <credentials>
          <username></username>
          <password></password>
        </credentials>
        <credentialsId></credentialsId>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </deployerCredentialsConfig>
      <resolverCredentialsConfig>
        <credentials>
          <username></username>
          <password></password>
        </credentials>
        <credentialsId></credentialsId>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </resolverCredentialsConfig>
      <useSpecs>false</useSpecs>
      <uploadSpec>
        <spec></spec>
      </uploadSpec>
      <downloadSpec>
        <spec></spec>
      </downloadSpec>
      <deployPattern>C:\j\workspace\mtrBLD\Deployment\Release\${NEWTAG}.7z=&gt;MeetingRecorder/${GERRIT_BRANCH}/${VERNUM}/</deployPattern>
      <resolvePattern></resolvePattern>
      <deploymentProperties></deploymentProperties>
      <deployBuildInfo>true</deployBuildInfo>
      <includeEnvVars>false</includeEnvVars>
      <envVarsPatterns>
        <includePatterns></includePatterns>
        <excludePatterns>*password*,*secret*,*key*</excludePatterns>
      </envVarsPatterns>
      <discardOldBuilds>false</discardOldBuilds>
      <discardBuildArtifacts>true</discardBuildArtifacts>
      <asyncBuildRetention>false</asyncBuildRetention>
      <multiConfProject>false</multiConfProject>
      <customBuildName></customBuildName>
      <overrideBuildName>false</overrideBuildName>
    </org.jfrog.hudson.generic.ArtifactoryGenericConfigurator>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@1.6.9">
      <template>#${BUILD_NUMBER}__${NEWTAG}</template>
      <runAtStart>false</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>