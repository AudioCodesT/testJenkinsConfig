<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.27">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>NEW_TAG</name>
          <description></description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>ems-build</assignedNode>
  <canRoam>false</canRoam>
  <disabled>true</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#list of other regions
OTHER_REGIONS=&quot;us-west-1 us-east-1 eu-west-1 us-west-2 ap-southeast-1&quot;
#OTHER_REGIONS=$(aws ec2 describe-regions --output text --query &quot;Regions[*].RegionName&quot;)  check
currentRegion=&quot;eu-central-1&quot;
ImageName=ovocAMI_${NEW_TAG}
bucketName=S3OvocAmis
echo &quot;Regions And ids List&quot; &gt; output.txt
echo -e &quot;\r\n&quot; &gt;&gt; output.txt
#Get Image Id
ImageId=$(aws ec2 describe-images --filters Name=name,Values=${ImageName})
#make The Image Public
aws ec2 modify-image-attribute --image-id ${ImageId} --launch-permission &quot;{\&quot;Add\&quot;:[{\&quot;Group\&quot;:\&quot;all\&quot;}]}&quot;
#copy Image to other Regions
for destRegionName in $OTHER_REGIONS
do
	newRegionAmiId=$(aws ec2 copy-image --region ${destRegionName} --name &quot;ovocAmi_${destRegionName}&quot; --description &quot;Some Description&quot; --source-image-id ${ImageId} --source-region ${currentRegion} --output text --query &quot;ImageId&quot;)
    #wait for The image to Create
    OLD_STATE=&quot;&quot;
    while true; do
        sleep 10
        STATE=$(aws ec2 describe-images --region ${destRegionName} --image-ids ${newRegionAmiId} --output text --query &quot;Images[0].State&quot;)
        if [[ $STATE != $OLD_STATE ]]; then
            echo $STATE
            OLD_STATE=$STATE
        fi
        if [[ $STATE == &quot;available&quot; ]]; then
            break
        fi
    done
	echo &quot;Region Name: $destRegionName ,&quot; &gt;&gt; output.txt
    echo &quot;Region id: $newRegionAmiId&quot; &gt;&gt; output.txt
    echo -e &quot;\r\n&quot; &gt;&gt; output.txt
done

echo &quot;Region Name &amp; Id&quot;
cat output.txt
#awsAccountID=$()
#run the instance of the new image 
#ovocAmi=&quot;$(aws ec2 run-instances --image-id $ImageId --instance-market-options MarketType=spot --count 1 --instance-type c4.2xlarge --key-name &quot;Jenkins &amp; App subnets machines key pair&quot; --security-group-ids sg-77bce41e --subnet-id subnet-35295a5c || aws ec2 run-instances --image-id $ImageId --count 1 --instance-type c4.2xlarge --key-name &quot;Jenkins &amp; App subnets machines key pair&quot; --security-group-ids sg-77bce41e --subnet-id subnet-35295a5c)&quot;

#keep instance ID
#INSTANCE_ID=&quot;$(echo &quot;${ovocAmi}&quot; |grep InstanceId |cut -d &apos;&quot;&apos; -f 4)&quot;
#INSTANCE_ID=&quot;$(aws ec2 describe-images --image-id $ImageId --output text --query Instances[*].ImageId)&quot;

#Wait for the instance to up
#echo &quot;Wait until the instance is up&quot;
#OLD_STATE=&quot;&quot;
#while true; do
#    sleep 10
#    STATE=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --output text --query &quot;Reservations[0].Instances[0].State.Name&quot;)
#    if [[ $STATE != $OLD_STATE ]]; then
#        echo $STATE
#        OLD_STATE=$STATE
#    fi
#    if [[ $STATE == &quot;running&quot; ]]; then
#        break
#    fi
#done
#echo &quot;Wait until instance is fully loaded&quot;
#sleep 60


#aws ssm send-command --document-name &quot;AWS-RunShellScript&quot; --parameters commands=[&quot;mkdir /tmp/cert&quot;] --targets &quot;Key=instanceids,Values=$INSTANCE_ID&quot;

#create an Image with ec2-tools (run it from the new instance)
#aws ssm send-command --document-name &quot;AWS-RunShellScript&quot; --parameters commands=[&quot;ec2-bundle-vol -d /mnt -k tmp/Jenkins &amp; App subnets machines key pair.pem -c tmp/root/AudioCodes-CICD-Apps.pem -u $awsAccountID -r x86_64&quot;] --targets &quot;Key=instanceids,Values=$INSTANCE_ID&quot;



#upload the Image to S3 (run it from the new instance)

#aws ssm send-command --document-name &quot;AWS-RunShellScript&quot; --parameters commands=[&quot;ec2-upload-bundle -b $bucketName -m /mnt/image.manifest.xml -a $s3_access_key -s $s3_secret_access_key&quot;] --targets &quot;Key=instanceids,Values=$INSTANCE_ID&quot;


#download the image from S3 to local directory

#push the file to artifactory
    
    </command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers>
    <EnvInjectPasswordWrapper plugin="envinject@2.1.5">
      <injectGlobalPasswords>false</injectGlobalPasswords>
      <maskPasswordParameters>true</maskPasswordParameters>
      <passwordEntries>
        <EnvInjectPasswordEntry>
          <name>s3_access_key</name>
          <value>{AQAAABAAAAAQAoeni0yibmqmAYGuRGYdIinOy2S6iHTiNyKPZzncvDU=}</value>
        </EnvInjectPasswordEntry>
        <EnvInjectPasswordEntry>
          <name>s3_secret_access_key</name>
          <value>{AQAAABAAAAAQQHWzpS0J9EW1sfr6w1/K1ZOd/VooBHyqt/34m6ZwRkg=}</value>
        </EnvInjectPasswordEntry>
      </passwordEntries>
    </EnvInjectPasswordWrapper>
  </buildWrappers>
</project>