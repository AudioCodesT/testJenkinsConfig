<?xml version="1.1" encoding="UTF-8" standalone="no"?><project>
  <actions/>
  <description/>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.0.10"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>300</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.27">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>TAGNAME</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>GERRIT_BRANCH</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>REPOSITORY</name>
          <description/>
          <defaultValue>sbc-release</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>Project</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit/>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>copy2netapp</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>true</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>
artifactory="https://artifactory"
User="$artifactory_user:$artifactory_password"
Branch=$GERRIT_BRANCH


if [ "$TAGNAME" == "" ]; then
  echo No valid TAG... exit
  exit 1
else
  NEWTAG=$TAGNAME
fi

if [ "$Project" == "GWApp" ]; then
  location="$REPOSITORY/com/ac/sbc/$Branch/Firmware"

  BaseFirmware=Firmware
  # New split from NextGenCPE
  if [[ $Branch =~ "NextGenCPE_" ]]; then
    Branch=$(echo $Branch | sed 's/_.*//')
    BaseFirmware=7.2.$(echo $NEWTAG | cut -d. -f3)
  fi

  Branch=$(echo $Branch | sed 's/-.*//')

  # Remove the _ suffix in case of fix branches such as 7.2.204_jio
  if echo $Branch | grep -q _; then
    if echo $Branch | grep -q _MSBR; then 
      BaseFirmware=$Branch
    else 
      BaseFirmware=$(echo $Branch | sed 's/_.*//')
    fi
    Branch=$(echo $Branch | sed 's/_.*//; s/.$/0/')
  fi

  # Feature branches should be copied to "&lt;Main branch&gt; Release/Features/&lt;Sub main branch&gt;"
  if [[ $GERRIT_BRANCH =~ "feature/" ]]; then
    # Find parent branch of this feature branch
    if [[ "$NEWTAG" =~ "7.30" ]]; then
      Branch=7.4
      BaseFirmware=Features
    else
      Branch=7.2.250
      BaseFirmware=Features/$(echo $Branch | cut -d. -f3)
    fi
    if [[ $GERRIT_BRANCH =~ "/voice-ai" ]]; then 
      BaseFirmware=7.2.254_VoAI
    fi
  fi

  Firmware="$Branch Release/$BaseFirmware"
  if [ $(echo $Branch | sed 's:\.:\n:g' | wc -l) -eq 3 ]; then
    if (( $(echo $Branch | cut -d. -f3) % 50 != 0 )); then
      Firmware="$(echo $Branch | sed 's/.$/0/; s:60$:50:') Release/$Branch"
    fi  
  fi

  Target="/netapp1/CompilationResults/$Firmware/F$NEWTAG"

elif [ "$Project" == "MP-20x" ]; then
  # Rakefet ask from $Branch/$NEWTAG To $Branch/${Branch}_$NEWTAG
  location="$REPOSITORY/com/ac/MP/$Branch"
  Target="/netapp1/CompilationResults/MP20x/$Branch/${Branch}_$NEWTAG"

elif [ "$Project" == "VoiceAIConnector" ]; then
  location="$REPOSITORY/com/ac/sbc/VoiceAiConnector/$Branch"
  Target="/netapp1/CompilationResults/VoAI_Connector/$Branch/$NEWTAG"
else
  echo No valid repository... exit
  exit 1
fi

if ! [ -d "$Target" ]; then
  mkdir -p "$Target"
fi

curl -k -s -u $User -X GET $artifactory/api/storage/$location/$NEWTAG | grep uri |\
grep -v https | cut -d'"' -f4 | cut -c 2- &gt; $NEWTAG.list
if [ -s "$NEWTAG.list" ]; then
   while read -r FileName
   do
     Extention=`echo ${FileName##*.}`
     if [ $Extention == "cmp" ]; then
       BOARD=`echo $FileName | sed -r s/.cmp//`
       # For branch voice-ai copy HostedTP only!
       if [[ "$GERRIT_BRANCH" =~ "voice-ai" &amp;&amp; ! "$BOARD" =~ "HostedTP" ]]; then continue; fi
       if [[ "$GERRIT_BRANCH" =~ "NextGenCPE" &amp;&amp; ! "$BOARD" =~ "MP5" ]]; then continue; fi   
       if [ -e "$Target/$BOARD.zip" ]; then continue; fi
       #if [ ! -e "$Target/$FileName" ]; then
         echo Download $FileName into "/tmp/$FileName"...
         curl -ks -u $User -X GET $artifactory/$location/$NEWTAG/$FileName --output "/tmp/$FileName"
         ArtSize=`curl -ks -u $User -X GET $artifactory/api/storage/$location/$NEWTAG/$FileName | grep size | cut -d: -f2 | cut -d'"' -f2`
         DestSize=`wc -c &lt;/tmp/$FileName`
         if [ $ArtSize != $DestSize ]; then 
           echo $ArtSize--$DestSize: $file is differ, copy again in next execution...
           rm -f /tmp/$FileName
           exit 1
         fi
       #fi
       if [[ "$FileName" =~ "M1000_ESBC" ]]; then
         echo Duplicate M1000_ESBC to M1000_MSBG
         FileNameM1000MSBG=$(echo $FileName | sed 's:ESBC:MSBG:g')
         cp "/tmp/$FileName" "/tmp/$FileNameM1000MSBG"
         zip -b /tmp -mj "$Target/$(echo $FileNameM1000MSBG | sed -r s/.cmp//).zip" "/tmp/$FileNameM1000MSBG"
       fi
       echo Create Zip from $FileName...
       zip -b /tmp -mj "$Target/$BOARD.zip" "/tmp/$FileName"
     elif [ $Extention == "zip" ] || [ $Extention == "txt" ] || [ $Extention == "rms" ] || [ $Extention == "tgz" ]; then
       if [ -e "$Target/$FileName" ]; then continue; fi
       echo Download $FileName into "$Target/$FileName"...
       curl -ks -u $User -X GET $artifactory/$location/$NEWTAG/$FileName --output "$Target/$FileName"
     fi
   done &lt; "$NEWTAG.list"
fi
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.Mailer plugin="mailer@1.32">
      <recipients>yossim shuky.riechard</recipients>
      <dontNotifyEveryUnstableBuild>false</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
    <com.chikli.hudson.plugin.naginator.NaginatorPublisher plugin="naginator@1.17.2">
      <regexpForRerun/>
      <rerunIfUnstable>true</rerunIfUnstable>
      <rerunMatrixPart>false</rerunMatrixPart>
      <checkRegexp>false</checkRegexp>
      <regexpForMatrixStrategy>TestParent</regexpForMatrixStrategy>
      <delay class="com.chikli.hudson.plugin.naginator.FixedDelay">
        <delay>360</delay>
      </delay>
      <maxSchedule>2</maxSchedule>
    </com.chikli.hudson.plugin.naginator.NaginatorPublisher>
    <hudson.plugins.ws__cleanup.WsCleanup plugin="ws-cleanup@0.34">
      <patterns class="empty-list"/>
      <deleteDirs>false</deleteDirs>
      <skipWhenFailed>false</skipWhenFailed>
      <cleanWhenSuccess>true</cleanWhenSuccess>
      <cleanWhenUnstable>true</cleanWhenUnstable>
      <cleanWhenFailure>true</cleanWhenFailure>
      <cleanWhenNotBuilt>true</cleanWhenNotBuilt>
      <cleanWhenAborted>true</cleanWhenAborted>
      <notFailBuild>false</notFailBuild>
      <cleanupMatrixParent>false</cleanupMatrixParent>
      <externalDelete/>
    </hudson.plugins.ws__cleanup.WsCleanup>
  </publishers>
  <buildWrappers>
    <EnvInjectBuildWrapper plugin="envinject@2.3.0">
      <info>
        <propertiesContent>artifactory_user=admin</propertiesContent>
        <secureGroovyScript plugin="script-security@1.71">
          <script/>
          <sandbox>false</sandbox>
        </secureGroovyScript>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
    </EnvInjectBuildWrapper>
    <EnvInjectPasswordWrapper plugin="envinject@2.3.0">
      <injectGlobalPasswords>false</injectGlobalPasswords>
      <maskPasswordParameters>true</maskPasswordParameters>
      <passwordEntries>
        <EnvInjectPasswordEntry>
          <name>artifactory_password</name>
          <value>{AQAAABAAAAAQC9Q9eeTsh0/7+AtlIDNhOldFHEwRntJsY/b1oiztPUQ=}</value>
        </EnvInjectPasswordEntry>
      </passwordEntries>
    </EnvInjectPasswordWrapper>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@2.0.3">
      <template>#${BUILD_NUMBER}__${TAGNAME}</template>
      <descriptionTemplate/>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>