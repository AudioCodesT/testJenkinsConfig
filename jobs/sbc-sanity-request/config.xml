<?xml version="1.1" encoding="UTF-8" standalone="no"?><project>
  <actions/>
  <description>This job was started by job "sbc-sanity-copy-to-netapp" (that was started by job "sbc-sanity-build") after the developer clicks gerrit UI button "Sanity"&#13;
The TestMode should be one of the 3 following options:&#13;
SIP, WEB or VoicAI&#13;
</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.0.10"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>50</daysToKeep>
        <numToKeep>-1</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.27">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>REFSPEC</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>GERRIT_BRANCH</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>EMAIL</name>
          <description/>
          <defaultValue>yossim@audiocodes.com</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>REFTARGET</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>CHANGES</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>CurrentBatchID</name>
          <description>In case you execute manually a SANITY that was run and didn't finished, give to this job the batchID - you can find it in the "Environment Variables" of this build</description>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>TestMode</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>18</maxConcurrentPerNode>
      <maxConcurrentTotal>18</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>true</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>true</limitOneJobWithMatchingParams>
      <paramsToUseForLimit>REFSPEC</paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>test-Sanjer</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>true</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command># send SANITY request and keep the serial number from the response:
#"BatchId: batchName_636159240296404766_BTR"
#REFTARGET=`echo $REFSPEC | sed 's:refs/changes/../::; s:/:-:g'`
Change=`echo $REFTARGET | sed 's:-\|\.:_:g'`
echo -n "https://artifactory/webapp/#/artifacts/browse/tree/General/sbc-review/com/ac/sbc/DRT/Firmware/$REFTARGET" &gt; artifactory.url

# Can run with major version only: 7.2.150, 7.2.170
GERRIT_BRANCH=$(echo $GERRIT_BRANCH | sed 's:_.*::')
if [[ $GERRIT_BRANCH =~ "7.2.2" ]]; then
  GERRIT_BRANCH=$(echo $GERRIT_BRANCH | sed 's:.$:0:')
fi

if [ ! -z $CurrentBatchID ]; then
  echo LinkToPage="---" &gt; generated_sanity.properties
  echo batchID=${CurrentBatchID} &gt;&gt; generated_sanity.properties
  echo url="https://artifactory/webapp/#/artifacts/browse/tree/General/sbc-review/com/ac/sbc/DRT/Firmware/$REFTARGET" &gt;&gt; generated_sanity.properties
  exit 0
fi

ModeType=$TestMode 
if [ $TestMode == "SIP" ]; then ModeType="Full"; fi
#Output=$(curl -s "http://BatchRunner/AnonymousUser/RunFeatureBatch.aspx?ModeType=$MODE&amp;CompilationFolder=\\\\netapp1\\cm\\CompilationResults\\BR_Feature\\F$TAG&amp;RunByUserEmail=$BUILD_USER_EMAIL&amp;MajorVersion=$MajorVersion&amp;BatchTag=$BatchTAG" --user qasa:cpelab --ntlm | grep -E 'span|class')

Output=$(curl -s "http://BatchRunner/AnonymousUser/RunFeatureBatch.aspx?ModeType=$ModeType&amp;CompilationFolder=\\\\netapp1\\cm\\CompilationResults\\DRT\\Firmware\\$REFTARGET&amp;RunByUserEmail=$EMAIL&amp;MajorVersion=$GERRIT_BRANCH&amp;BatchTag=$Change" --user qasa:cpelab --ntlm | grep -E 'span|class')
batchID=`echo $Output | sed 's:.*lblBatchIdValue"&gt;&lt;b&gt;&lt;font color="Black"&gt;::; s:&lt;/font.*::'`
LinkToPage=`echo $Output | sed 's:.*lblBatchDetailsPathValue"&gt;&lt;b&gt;&lt;font color="Black"&gt;::; s:&lt;/font.*::; s:\\\\:/:g'`

echo LinkToPage=${LinkToPage} &gt; generated_sanity.properties
echo batchID=${batchID} &gt;&gt; generated_sanity.properties
echo url="https://artifactory/webapp/#/artifacts/browse/tree/General/sbc-review/com/ac/sbc/DRT/Firmware/$REFTARGET" &gt;&gt; generated_sanity.properties

if [ "$LinkToPage" == "" ]; then
  echo $Output | grep 'BatchRunner Is Down'
  echo "No Batch ID... exit with error"
  echo Output="No Batch ID" &gt;&gt; generated_sanity.properties
  exit 1;
fi

if [[ $Output =~ "Down For Maintenance" ]]; then
  echo "BatchRunner Is Down For Maintenance... exit with error"
  echo Output="BatchRunner Is Down For Maintenance" &gt;&gt; generated_sanity.properties
  exit 1;
fi

echo Output="Execution error" &gt;&gt; generated_sanity.properties

</command>
    </hudson.tasks.Shell>
    <EnvInjectBuilder plugin="envinject@2.3.0">
      <info>
        <propertiesFilePath>generated_sanity.properties</propertiesFilePath>
      </info>
    </EnvInjectBuilder>
    <hudson.tasks.Shell>
      <command>#!/usr/bin/env ruby

require 'json'
require 'uri'

puts "Send a message to Gerrit - the Sanity was started"

unless ENV['CurrentBatchID'].to_s.empty?
  puts "Executed manually, no need a new message in the Gerrit"
  exit 0
end

if ENV['REFSPEC'].to_s =~ %r{refs/changes/\d\d/(\d+)/(\d+)$}
  change=$1
  ps=$2
else
  puts 'Invalid refspec'
  exit 0
end

data = {
  message: ENV['TestMode'] + ' SANITY request was sent ' + ENV['BUILD_URL'] + "\n\nSANITY status: " + ENV['LinkToPage'],
  notify: 'NONE',
  tag: 'autogenerated:sanity',
}

require 'pp'
pp data

system("curl -kn --anyauth -X POST https://test-gerrit/a/changes/#{change}/revisions/#{ps}/review " +
       "-d '#{data.to_json}' -H 'Content-Type: application/json'")
</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command># check SANITY status
# "BatchId: DRT_7_2_150_636450404622178009_59399_1_BTR Status: Passed"
# Status options: 
#    1) Passed 2) Failed. 3) UserRequest. 4) WaitingForStations. 5) ConfiguringStations.
#    6) Running. 7) Pending. 8) WaitingForStop. 9) Stopped.
count=0

for i in {1..5000}
do
  Status="$(curl -s "http://BatchRunner/AnonymousUser/GetFeatureBatchStatus.aspx?BtrId=$batchID" --user qasa:cpelab --ntlm | grep lblStatusValue | sed 's/.*Black.&gt;//; s/&lt;.font&gt;.*//')"
  [ "$Status" == "Passed" ] &amp;&amp; exit 0
  [ "$Status" == "Failed" -o "$Status" == "WaitingForStop" -o "$Status" == "Stopped" ] &amp;&amp; exit 1
  [ "$Status" == "" ] &amp;&amp; count=$((count+1))
  [ $count -eq 50 ] &amp;&amp; exit 1
  sleep 300s
done

echo Exit the while after some days
curl -s "http://BatchRunner/AnonymousUser/StopFeatureBatch.aspx?BtrId=$batchID" --user qasa:cpelab --ntlm
exit 1</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <org.jenkins__ci.plugins.flexible__publish.FlexiblePublisher plugin="flexible-publish@0.15.2">
      <publishers>
        <org.jenkins__ci.plugins.flexible__publish.ConditionalPublisher>
          <condition class="org.jenkins_ci.plugins.run_condition.core.StatusCondition" plugin="run-condition@1.3">
            <worstResult>
              <name>FAILURE</name>
              <ordinal>2</ordinal>
              <color>RED</color>
              <completeBuild>true</completeBuild>
            </worstResult>
            <bestResult>
              <name>SUCCESS</name>
              <ordinal>0</ordinal>
              <color>BLUE</color>
              <completeBuild>true</completeBuild>
            </bestResult>
          </condition>
          <publisherList>
            <org.jenkinsci.plugins.postbuildscript.PostBuildScript plugin="postbuildscript@2.5.1">
              <config>
                <scriptFiles/>
                <groovyScripts/>
                <buildSteps>
                  <org.jenkinsci.plugins.postbuildscript.model.PostBuildStep>
                    <results>
                      <string>SUCCESS</string>
                      <string>NOT_BUILT</string>
                      <string>FAILURE</string>
                      <string>UNSTABLE</string>
                    </results>
                    <role>BOTH</role>
                    <buildSteps>
                      <EnvInjectBuilder plugin="envinject@2.3.0">
                        <info>
                          <propertiesFilePath>generated_sanity.properties</propertiesFilePath>
                        </info>
                      </EnvInjectBuilder>
                    </buildSteps>
                  </org.jenkinsci.plugins.postbuildscript.model.PostBuildStep>
                  <org.jenkinsci.plugins.postbuildscript.model.PostBuildStep>
                    <results>
                      <string>SUCCESS</string>
                    </results>
                    <role>BOTH</role>
                    <buildSteps>
                      <hudson.tasks.Shell>
                        <command>
for rep in $CHANGES; do

  change=`echo $rep | cut -d/ -f1`
  ps=`echo $rep | cut -d/ -f2`

  #change=`echo $REFSPEC | cut -d/ -f4`
  #ps=`echo $REFSPEC | cut -d/ -f5`
  RunPhases=1
  checkPS=$ps

#Check if they are not a new PS - if yes, check if the code was changed
#In case the code was not changed, give the score to the last PS - should be store in the checkPS variable. 
  ssh -p 29418  -i ~/.ssh/id_rsa_jenkins jenkins@test-gerrit gerrit query --patch-sets $change | grep  'kind:\|number:' | tail -n +2 | sed 's/ //g' &gt; /tmp/$change.txt
# $field Could be: number or kind
# $kind could be: REWORK, TRIVIAL_REBASE, MERGE_FIRST_PARENT_UPDATE, NO_CODE_CHANGE or NO_CHANGE
  while IFS=: read -r field value; do   
    if [ "$field" == "number" ]; then checkPS=$value;
    else
      echo Check PS $checkPS: $value;
      if [[ "$checkPS" -gt "$ps" &amp;&amp; "$value" == "REWORK" ]]; then
        RunPhases=0
    fi; fi
  done &lt; /tmp/$change.txt

  if [[ "$RunPhases" -eq 1 ]]; then ps=$checkPS; fi

  echo Send OK message to Gerrit - $change,$ps
  ssh -p 29418  -i ~/.ssh/id_rsa_jenkins jenkins@test-gerrit gerrit review \
  --message "'$TestMode SANITY Passed successfully - $BUILD_URL \
      CMP files: $url \
      SANITY results: $LinkToPage'" \
  --notify OWNER \
  --label $TestMode-Sanity=1 \
  --tag "'autogenerated:sanity'" \
  $change,$ps

done</command>
                      </hudson.tasks.Shell>
                    </buildSteps>
                  </org.jenkinsci.plugins.postbuildscript.model.PostBuildStep>
                </buildSteps>
                <markBuildUnstable>false</markBuildUnstable>
              </config>
            </org.jenkinsci.plugins.postbuildscript.PostBuildScript>
            <org.jenkinsci.plugins.postbuildscript.PostBuildScript plugin="postbuildscript@2.5.1">
              <config>
                <scriptFiles/>
                <groovyScripts/>
                <buildSteps>
                  <org.jenkinsci.plugins.postbuildscript.model.PostBuildStep>
                    <results>
                      <string>FAILURE</string>
                    </results>
                    <role>BOTH</role>
                    <buildSteps>
                      <EnvInjectBuilder plugin="envinject@2.3.0">
                        <info>
                          <propertiesFilePath>generated_sanity.properties</propertiesFilePath>
                        </info>
                      </EnvInjectBuilder>
                      <hudson.tasks.Shell>
                        <command>for rep in $CHANGES; do

  change=`echo $rep | cut -d/ -f1`
  ps=`echo $rep | cut -d/ -f2`

  RunPhases=1
  checkPS=$ps

#Check if they are not a new PS - if yes, check if the code was changed
#In case the code was not changed, give the score to the last PS - should be store in the checkPS variable. 
  ssh -p 29418  -i ~/.ssh/id_rsa_jenkins jenkins@test-gerrit gerrit query --patch-sets $change | grep  'kind:\|number:' | tail -n +2 | sed 's/ //g' &gt; /tmp/$change.txt
# $field Could be: number or kind
# $kind could be: REWORK, TRIVIAL_REBASE, MERGE_FIRST_PARENT_UPDATE, NO_CODE_CHANGE or NO_CHANGE
  while IFS=: read -r field value; do   
    if [ "$field" == "number" ]; then checkPS=$value;
    else
      echo Check PS $checkPS: $value;
      if [[ "$checkPS" -gt "$ps" &amp;&amp; "$value" == "REWORK" ]]; then
        RunPhases=0
    fi; fi
  done &lt; /tmp/$change.txt

  if [[ "$RunPhases" -eq 1 ]]; then ps=$checkPS; fi

  echo Send failed message to Gerrit - $change,$ps
  ssh -p 29418  -i ~/.ssh/id_rsa_jenkins jenkins@test-gerrit gerrit review \
  --message "'$TestMode SANITY Failed - $BUILD_URL \
      CMP files: $url \
      Error message: $Output \
      SANITY results: $LinkToPage'" \
  --notify OWNER \
  --label $TestMode-Sanity=-1 \
  --tag "'autogenerated:sanity'" \
  $change,$ps

done      
</command>
                      </hudson.tasks.Shell>
                    </buildSteps>
                  </org.jenkinsci.plugins.postbuildscript.model.PostBuildStep>
                </buildSteps>
                <markBuildUnstable>false</markBuildUnstable>
              </config>
            </org.jenkinsci.plugins.postbuildscript.PostBuildScript>
          </publisherList>
          <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.3"/>
          <executionStrategy class="org.jenkins_ci.plugins.flexible_publish.strategy.FailAtEndExecutionStrategy"/>
        </org.jenkins__ci.plugins.flexible__publish.ConditionalPublisher>
        <org.jenkins__ci.plugins.flexible__publish.ConditionalPublisher>
          <condition class="org.jenkins_ci.plugins.run_condition.core.StatusCondition" plugin="run-condition@1.3">
            <worstResult>
              <name>ABORTED</name>
              <ordinal>4</ordinal>
              <color>ABORTED</color>
              <completeBuild>false</completeBuild>
            </worstResult>
            <bestResult>
              <name>ABORTED</name>
              <ordinal>4</ordinal>
              <color>ABORTED</color>
              <completeBuild>false</completeBuild>
            </bestResult>
          </condition>
          <publisherList>
            <org.jenkinsci.plugins.postbuildscript.PostBuildScript plugin="postbuildscript@2.5.1">
              <config>
                <scriptFiles/>
                <groovyScripts/>
                <buildSteps>
                  <org.jenkinsci.plugins.postbuildscript.model.PostBuildStep>
                    <results>
                      <string>SUCCESS</string>
                      <string>NOT_BUILT</string>
                      <string>ABORTED</string>
                      <string>FAILURE</string>
                      <string>UNSTABLE</string>
                    </results>
                    <role>BOTH</role>
                    <buildSteps>
                      <hudson.tasks.Shell>
                        <command>echo ----------------- Stop it after it was aborted --------------------
curl -s "http://BatchRunner/AnonymousUser/StopFeatureBatch.aspx?BtrId=$batchID" --user qasa:cpelab --ntlm
echo ----------------- Done ------------------------

for rep in $CHANGES; do

  change=`echo $rep | cut -d/ -f1`
  ps=`echo $rep | cut -d/ -f2`

  ssh -p 29418  -i ~/.ssh/id_rsa_jenkins jenkins@test-gerrit gerrit review \
  --message "'$TestMode SANITY was aborted'" \
  --notify OWNER \
  --tag "'autogenerated:sanity'" \
  $change,$ps

done
</command>
                      </hudson.tasks.Shell>
                    </buildSteps>
                  </org.jenkinsci.plugins.postbuildscript.model.PostBuildStep>
                </buildSteps>
                <markBuildUnstable>false</markBuildUnstable>
              </config>
            </org.jenkinsci.plugins.postbuildscript.PostBuildScript>
          </publisherList>
          <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.3"/>
          <executionStrategy class="org.jenkins_ci.plugins.flexible_publish.strategy.FailAtEndExecutionStrategy"/>
        </org.jenkins__ci.plugins.flexible__publish.ConditionalPublisher>
      </publishers>
    </org.jenkins__ci.plugins.flexible__publish.FlexiblePublisher>
    <com.chikli.hudson.plugin.naginator.NaginatorPublisher plugin="naginator@1.17.2">
      <regexpForRerun>BatchRunner Is Down For Maintenance</regexpForRerun>
      <rerunIfUnstable>false</rerunIfUnstable>
      <rerunMatrixPart>false</rerunMatrixPart>
      <checkRegexp>true</checkRegexp>
      <regexpForMatrixStrategy>TestParent</regexpForMatrixStrategy>
      <delay class="com.chikli.hudson.plugin.naginator.FixedDelay">
        <delay>1800</delay>
      </delay>
      <maxSchedule>1</maxSchedule>
    </com.chikli.hudson.plugin.naginator.NaginatorPublisher>
  </publishers>
  <buildWrappers>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@2.0.3">
      <template>#${BUILD_NUMBER} ${REFSPEC} $TestMode</template>
      <descriptionTemplate/>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>