<?xml version="1.0" encoding="UTF-8"?><flow-definition plugin="workflow-job@2.38">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.6.0"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.6.0">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>NEW_TAG</string>
        <string>DeployISO</string>
        <string>FullTesting</string>
      </parameters>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description/>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.0.10"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.27">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit/>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>NEW_TAG</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>DeployISO</name>
          <description/>
          <choices>
            <string>official_iso</string>
            <string>latest_iso</string>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>FullTesting</name>
          <description/>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.78">
    <script>def getLatest(branch) {
    println("--- Setting env.LATEST to latest official ISO in: " + branch)

    sh '''
        #LATEST=$(curl -O -k --user ${ARTI_CREDS_USR}:${ARTI_CREDS_PSW} -X POST -k https://artifactory/api/search/aql -H "content-type: text/plain" -d 'items.find({\"repo\": {\"\$eq\": \"ems-release\"},\"name\": {\"\$match\": \"*.iso\"}})' | jq -r '.results[] | select(.path == "com/ac/ems/ovoc_server/${branch}/official_iso") | .name' | sort | tail -n 1)
        curl -O -k --user ${ARTI_CREDS_USR}:${ARTI_CREDS_PSW} -X POST -k https://artifactory/api/search/aql -H "content-type: text/plain" -d 'items.find({\"repo\": {\"\$eq\": \"ems-release\"},\"name\": {\"\$match\": \"*.iso\"}})' | jq -r '.results[]'

        # If NEW_TAG is official version then it equals the resolved LATEST on the same branch.
        # We need to get one version before.
        if [[ "$LATEST" == "$NEW_TAG" ]]; then
            LATEST=$(curl -O -k --user ${ARTI_CREDS_USR}:${ARTI_CREDS_PSW} -X POST -k https://artifactory/api/search/aql -H "content-type: text/plain" -d 'items.find({\"repo\": {\"\$eq\": \"ems-release\"},\"name\": {\"\$match\": \"*.iso\"}})' | jq -r '.results[] | select(.path == "com/ac/ems/ovoc_server/${branch}/official_iso") | .name' | sort | tail -n 2 | head -n 1)
        fi
    '''

    println(env.LATEST)
}

pipeline {
    agent {
        node {
            label 'ems-build'
        }
    }
    environment {
        ARTI_CREDS = credentials('e7c58828-5cf7-40cb-9acd-00d9c7419212')
        LATEST = ""
    }
    parameters {
        string(name: 'NEW_TAG', defaultValue: '', description: '')
        choice(name: 'DeployISO', choices: ['official_iso', 'latest_iso'], description: '')
        booleanParam(name: 'FullTesting', defaultValue: false, description: '')
    }
    stages {
        stage('Build Properties') {
            steps {
                script {
                    currentBuild.displayName = "${BUILD_NUMBER}_${NEW_TAG}"
                    currentBuild.description = ""
                }
            }
        }
        stage('Get latest') {
            steps {
                script {
                    env.LATEST_7_6_2000 = "${getLatest('7.6.2000')}"
                    env.LATEST_7_8      = "${getLatest('7.8')}"
                    env.LATEST_7_8_1000 = "${getLatest('7.8.1000')}"
                    env.LATEST_7_8_2000 = "${getLatest('7.8.2000')}"
                }
            }
        }
//        stage('Run Test Senarios') {
//            parallel {
//                stage('Run Install New') {
//                    steps {
//                        build job: 'OVOC-Cluster-Install-New', parameters: [
//                            string(name: 'TAG', value: "${params.NEW_TAG}"),
//                            choice(name: 'DeployISO', value: "${params.DeployISO}"),
//                            booleanParam(name: 'FullTesting', value: "${params.FullTesting}")
//                        ]
//                    }
//                }
//                stage('Run Upgrade Single 7.6.2000') {
//                    steps {
//                        build job: 'OVOC-Cluster-Install-New', parameters: [
//                            string(name: 'NEW_TAG', value: "${params.NEW_TAG}"),
//                            string(name: 'OLD_TAG', value: "${env.LATEST_7_6_2000}"),
//                            choice(name: 'DeployISO', value: "${params.DeployISO}"),
//                            booleanParam(name: 'FullTesting', value: "${params.FullTesting}")
//                        ]
//                    }
//                }
//                stage('Run Upgrade Single 7.8') {
//                    steps {
//                        build job: 'OVOC-Cluster-Install-New', parameters: [
//                            string(name: 'NEW_TAG', value: "${params.NEW_TAG}"),
//                            string(name: 'OLD_TAG', value: "${env.LATEST_7_8}"),
//                            choice(name: 'DeployISO', value: "${params.DeployISO}"),
//                            booleanParam(name: 'FullTesting', value: "${params.FullTesting}")
//                        ]
//                    }
//                }
//                stage('Run Upgrade Single 7.8.1000') {
//                    steps {
//                        build job: 'OVOC-Cluster-Install-New', parameters: [
//                            string(name: 'NEW_TAG', value: "${params.NEW_TAG}"),
//                            string(name: 'OLD_TAG', value: "${env.LATEST_7_8_1000}"),
//                            choice(name: 'DeployISO', value: "${params.DeployISO}"),
//                            booleanParam(name: 'FullTesting', value: "${params.FullTesting}")
//                        ]
//                    }
//                }
//                stage('Run Upgrade Cluster 7.8.2000') {
//                    steps {
//                        build job: 'OVOC-Cluster-Install-New', parameters: [
//                            string(name: 'NEW_TAG', value: "${params.NEW_TAG}"),
//                            string(name: 'OLD_TAG', value: "${env.LATEST_7_8_2000}"),
//                            string(name: 'ServerIP', value: "${env.mgmtIP}"),
//                            choice(name: 'DeployISO', value: "${params.DeployISO}"),
//                            booleanParam(name: 'FullTesting', value: "${params.FullTesting}")
//                        ]
//                    }
//                }
//            }
//        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>