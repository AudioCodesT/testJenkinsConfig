<?xml version="1.1" encoding="UTF-8" standalone="no"?><project>
  <actions/>
  <description>Triggered by a finished ovoc_server night build and performs:&#13;
1. create a tested VM: launch new instance from sanity AMI and get its IP address&#13;
2. run python script which ssh to the tested VM and download the latest DVD3.iso&#13;
3. tests: install, integration tests&#13;
4. python script copies all logs from tested VM to the jenkins slave&#13;
5. archive the logs&#13;
6.if build passed then terminate the tested machine&#13;
</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.0.10"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>30</daysToKeep>
        <numToKeep>-1</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.27">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>NEW_TAG</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>ISO_DEPLOY_DESTINATION</name>
          <description/>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>latest_iso</string>
              <string>official_iso</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>FullTesting</name>
          <description>this param is inherited from ovoc build</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>1</string>
              <string>0</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit/>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@4.2.2">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>ssh://jenkins@test-gerrit:29418/EMS/ovoc_server.git</url>
        <credentialsId>fef9964a-ddb7-4ce6-a445-a99a9e9802c0</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>server_${NEW_TAG}</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.CleanBeforeCheckout>
        <deleteUntrackedNestedRepositories>false</deleteUntrackedNestedRepositories>
      </hudson.plugins.git.extensions.impl.CleanBeforeCheckout>
    </extensions>
  </scm>
  <assignedNode>ems_temp_slave</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>true</concurrentBuild>
  <builders>
    <org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <condition class="org.jenkins_ci.plugins.run_condition.contributed.ShellCondition" plugin="run-condition@1.3">
        <command>BRANCH=`git branch --no-color -r --contains HEAD | grep -v -e '-&gt;' | head -1 | awk -F'/' '{print $NF}'`
if [[ "$BRANCH" == "7.4.1000" ]]; then exit 0; else exit 1; fi
</command>
      </condition>
      <buildStep class="hudson.plugins.copyartifact.CopyArtifact" plugin="copyartifact@1.39">
        <project>emsBuild_ovoc_server_7.4.1000</project>
        <filter/>
        <target>EMS/target</target>
        <excludes>mkiso.log</excludes>
        <selector class="hudson.plugins.copyartifact.StatusBuildSelector">
          <stable>true</stable>
        </selector>
        <doNotFingerprintArtifacts>false</doNotFingerprintArtifacts>
      </buildStep>
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$DontRun" plugin="run-condition@1.3"/>
    </org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <condition class="org.jenkins_ci.plugins.run_condition.contributed.ShellCondition" plugin="run-condition@1.3">
        <command>BRANCH=`git branch --no-color -r --contains HEAD | grep -v -e '-&gt;' | head -1 | awk -F'/' '{print $NF}'`
if [[ "$BRANCH" == "7.4.2000" ]]; then exit 0; else exit 1; fi
</command>
      </condition>
      <buildStep class="hudson.plugins.copyartifact.CopyArtifact" plugin="copyartifact@1.39">
        <project>emsBuild_ovoc_server_7.4.2000</project>
        <filter/>
        <target>EMS/target</target>
        <excludes>mkiso.log</excludes>
        <selector class="hudson.plugins.copyartifact.StatusBuildSelector">
          <stable>true</stable>
        </selector>
        <doNotFingerprintArtifacts>false</doNotFingerprintArtifacts>
      </buildStep>
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$DontRun" plugin="run-condition@1.3"/>
    </org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <condition class="org.jenkins_ci.plugins.run_condition.contributed.ShellCondition" plugin="run-condition@1.3">
        <command>BRANCH=`git branch --no-color -r --contains HEAD | grep -v -e '-&gt;' | head -1 | awk -F'/' '{print $NF}'`
if [[ "$BRANCH" == "7.4.3000" ]]; then exit 0; else exit 1; fi
</command>
      </condition>
      <buildStep class="hudson.tasks.Shell">
        <command>cd ${WORKSPACE}/EMS
[[ -d target ]] &amp;&amp; rm -rf target
mkdir target
cd target
for f in common-7.4.3000-SNAPSHOT.jar \
server-7.4.3000-SNAPSHOT.jar \
rest-core-7.4.3000-SNAPSHOT.jar \
oracle_trigger-7.4.3000-SNAPSHOT.jar \
database-7.4.3000-SNAPSHOT.jar
do curl -O -k --user admin:$artiPass https://artifactory/ems-release/com/ac/ems/ovoc_server/Sanity_preReq/$NEW_TAG/$f; done</command>
      </buildStep>
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$DontRun" plugin="run-condition@1.3"/>
    </org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <condition class="org.jenkins_ci.plugins.run_condition.contributed.ShellCondition" plugin="run-condition@1.3">
        <command>BRANCH=`git branch --no-color -r --contains HEAD | grep -v -e '-&gt;' | head -1 | awk -F'/' '{print $NF}'`
if [[ "$BRANCH" == "7.6" ]]; then exit 0; else exit 1; fi
</command>
      </condition>
      <buildStep class="hudson.tasks.Shell">
        <command>cd ${WORKSPACE}/EMS
[[ -d target ]] &amp;&amp; rm -rf target
mkdir target
cd target
for f in common-7.6-SNAPSHOT.jar \
server-7.6-SNAPSHOT.jar \
rest-core-7.6-SNAPSHOT.jar \
oracle_trigger-7.6-SNAPSHOT.jar \
database-7.6-SNAPSHOT.jar
do curl -O -k --user admin:$artiPass https://artifactory/ems-release/com/ac/ems/ovoc_server/Sanity_preReq/$NEW_TAG/$f; done</command>
      </buildStep>
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.3"/>
    </org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <condition class="org.jenkins_ci.plugins.run_condition.contributed.ShellCondition" plugin="run-condition@1.3">
        <command>BRANCH=`git branch --no-color -r --contains HEAD | grep -v -e '-&gt;' | head -1 | awk -F'/' '{print $NF}'`
if [[ "$BRANCH" == "7.6.1000" ]]; then exit 0; else exit 1; fi
</command>
      </condition>
      <buildStep class="hudson.tasks.Shell">
        <command>cd ${WORKSPACE}/EMS
[[ -d target ]] &amp;&amp; rm -rf target
mkdir target
cd target
for f in common-7.6.1000-SNAPSHOT.jar \
server-7.6.1000-SNAPSHOT.jar \
rest-core-7.6.1000-SNAPSHOT.jar \
oracle_trigger-7.6.1000-SNAPSHOT.jar \
database-7.6.1000-SNAPSHOT.jar
do curl -O -k --user admin:$artiPass https://artifactory/ems-release/com/ac/ems/ovoc_server/Sanity_preReq/$NEW_TAG/$f; done</command>
      </buildStep>
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.3"/>
    </org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <condition class="org.jenkins_ci.plugins.run_condition.contributed.ShellCondition" plugin="run-condition@1.3">
        <command>BRANCH=`git branch --no-color -r --contains HEAD | grep -v -e '-&gt;' | head -1 | awk -F'/' '{print $NF}'`
if [[ "$BRANCH" == "7.8.2000" ]]; then exit 0; else exit 1; fi
</command>
      </condition>
      <buildStep class="hudson.tasks.Shell">
        <command>cd ${WORKSPACE}/EMS
[[ -d target ]] &amp;&amp; rm -rf target
mkdir target
cd target
for f in common-7.8.2000-SNAPSHOT.jar \
server-7.8.2000-SNAPSHOT.jar \
rest-core-7.8.2000-SNAPSHOT.jar \
oracle_trigger-7.8.2000-SNAPSHOT.jar \
database-7.8.2000-SNAPSHOT.jar
do curl -O -k --user admin:$artiPass https://artifactory/ems-release/com/ac/ems/ovoc_server/Sanity_preReq/$NEW_TAG/$f; done</command>
      </buildStep>
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.3"/>
    </org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <condition class="org.jenkins_ci.plugins.run_condition.contributed.ShellCondition" plugin="run-condition@1.3">
        <command>BRANCH=`git branch --no-color -r --contains HEAD | grep -v -e '-&gt;' | head -1 | awk -F'/' '{print $NF}'`
if [[ "$BRANCH" == "7.8" ]]; then exit 0; else exit 1; fi
</command>
      </condition>
      <buildStep class="hudson.tasks.Shell">
        <command>cd ${WORKSPACE}/EMS
[[ -d target ]] &amp;&amp; rm -rf target
mkdir target
cd target
for f in common-7.8-SNAPSHOT.jar \
server-7.8-SNAPSHOT.jar \
rest-core-7.8-SNAPSHOT.jar \
oracle_trigger-7.8-SNAPSHOT.jar \
database-7.8-SNAPSHOT.jar
do curl -O -k --user admin:$artiPass https://artifactory/ems-release/com/ac/ems/ovoc_server/Sanity_preReq/$NEW_TAG/$f; done</command>
      </buildStep>
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.3"/>
    </org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <condition class="org.jenkins_ci.plugins.run_condition.contributed.ShellCondition" plugin="run-condition@1.3">
        <command>BRANCH=`git branch --no-color -r --contains HEAD | grep -v -e '-&gt;' | head -1 | awk -F'/' '{print $NF}'`
if [[ "$BRANCH" == "7.8.1000" ]]; then exit 0; else exit 1; fi</command>
      </condition>
      <buildStep class="hudson.tasks.Shell">
        <command>cd ${WORKSPACE}/EMS
[[ -d target ]] &amp;&amp; rm -rf target
mkdir target
cd target
for f in common-7.8.1000-SNAPSHOT.jar \
server-7.8.1000-SNAPSHOT.jar \
rest-core-7.8.1000-SNAPSHOT.jar \
oracle_trigger-7.8.1000-SNAPSHOT.jar \
database-7.8.1000-SNAPSHOT.jar
do curl -O -k --user admin:$artiPass https://artifactory/ems-release/com/ac/ems/ovoc_server/Sanity_preReq/$NEW_TAG/$f; done</command>
      </buildStep>
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.3"/>
    </org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <condition class="org.jenkins_ci.plugins.run_condition.contributed.ShellCondition" plugin="run-condition@1.3">
        <command>BRANCH=`git branch --no-color -r --contains HEAD | grep -v -e '-&gt;' | head -1 | awk -F'/' '{print $NF}'`
if [[ "$BRANCH" == "7.4.1000" || "$BRANCH" == "7.4.2000" ]]; then
    echo "Pre-Req files retrieved from Jenkins job."
    exit 0
else
    echo "Prerequisite files retrieved from Artifactory (7.4.3000 and newer)\n or no prerequisites (7.4)"
    exit 1
fi
</command>
      </condition>
      <buildStep class="hudson.tasks.Shell">
        <command># if branch is 7.4 then we dont run this step
# in branch is higher than 7.4 then we need to arrange the directory EMS/target
# so it will contain only the 5 jar files we copied from build-ovoc job archive
# and all executables
cd EMS
chmod 0775 target
cp FKGenerator.ini target
cd target
cp common/target/common-7.*-SNAPSHOT.jar  .
cp database/target/database-7.*-SNAPSHOT.jar .
cp EMS/target/server-7.*-SNAPSHOT.jar .
cp oracle_triggers/target/oracle_trigger-7.*-SNAPSHOT.jar .
cp rest-core/target/rest-core-7.*-SNAPSHOT.jar .
rm -rf common
rm -rf EMS
rm -rf rest-core
rm -rf oracle_triggers
rm -rf database
rm -rf target
chmod 0775 *
</command>
      </buildStep>
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.3"/>
    </org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder>
    <hudson.tasks.Shell>
      <command># Copy FKGenerator.ini &amp; Change prerequisite files permissions
cd ${WORKSPACE}/EMS
chmod 0755 target
cp FKGenerator.ini target
chmod -R 0755 target
cd ${WORKSPACE}


# define a default GW - we need it to configure network of tested machine in case version in 7.4.3000 or older
DefaultGateway="172.16.132.1"
netMask="24"


#1. create a tested VM: launch new instance from sanity AMI and get its IP address
if [[ "$ISO_DEPLOY_DESTINATION" == "official_iso" ]]
then
	AMI_ID=ami-03b07cb67f9a8730b # &lt;-- without ENA support
    #AMI_ID=ami-0264e23c55ba36c29 # &lt;-- with ENA support
else
	AMI_ID=ami-097a30155f82688fb # &lt;-- without ENA support
    #AMI_ID=ami-035a9df9f78df3db1 # &lt;-- with ENA support
fi



#keep instance ID
INSTANCE_ID_1="i-009b610b9c24e01e7"
INSTANCE_ID_2="i-009d174ad878b4df4"
INSTANCE_ID_3="i-0555d0c42f3bda565"


#set to its delete volume when instance will be terminated
aws ec2 modify-instance-attribute --instance-id ${INSTANCE_ID_1} --block-device-mappings "{    \"DeviceName\": \"/dev/sda1\",    \"Ebs\": {      \"DeleteOnTermination\": false    }  } "
aws ec2 modify-instance-attribute --instance-id ${INSTANCE_ID_2} --block-device-mappings "{    \"DeviceName\": \"/dev/sda1\",    \"Ebs\": {      \"DeleteOnTermination\": false    }  } "
aws ec2 modify-instance-attribute --instance-id ${INSTANCE_ID_3} --block-device-mappings "{    \"DeviceName\": \"/dev/sda1\",    \"Ebs\": {      \"DeleteOnTermination\": false    }  } "
#keep ip address into "vmIP"
vmIP_1=$(aws ec2 describe-instances --instance-id ${INSTANCE_ID_1} --output text --query 'Reservations[*].Instances[*].PrivateIpAddress')
vmIP_1=$(aws ec2 describe-instances --instance-id ${INSTANCE_ID_2} --output text --query 'Reservations[*].Instances[*].PrivateIpAddress')
vmIP_1=$(aws ec2 describe-instances --instance-id ${INSTANCE_ID_3} --output text --query 'Reservations[*].Instances[*].PrivateIpAddress')
#find what is the current branch
BRANCH=`git branch --no-color -r --contains HEAD | grep -v -e '-&gt;' | head -1 | awk -F'/' '{print $NF}'`
if [ $BRANCH == master ]; then BRANCH="7.4"; fi




# if this is a build for QA then configure the tested machine with "ami" - means we set TimeZone London (GMT+0)
# but if this is a regular build then configure the tested machine with "sanity" - means we set TimeZone Israel
if [[ "$ISO_DEPLOY_DESTINATION" == "official_iso" ]]
then
	sanityOrAmi=ami
else
	sanityOrAmi=sanity
fi

#2. run python scripts: set network , install
cd EMS/VersionRelease
if [[ "$BRANCH" == "7.4" || "$BRANCH" == "7.4.1000" || "$BRANCH" == "7.4.2000" ]]
	# in old versions we send default gateway
	then	python2.7 setNetwork.py $vmIP_1 $DefaultGateway
elif [[ "$BRANCH" == "7.4.3000" ]]
    # setNetwork.py was changed to fit vmware - subnet is a parameter
    then python2.7 setNetwork.py $vmIP_1 $netMask $DefaultGateway
# from 7.6 and up we dont send default gateway because the script knows that this is AWS env and learn IP addresses from the machine
else python2.7 setNetwork.py $vmIP_1 $sanityOrAmi
fi

echo "Finish SetNetwork Configuration"

if [[ "$BRANCH" == "7.4.3000" || "$BRANCH" =~ "7.6" || "$BRANCH" =~ "7.8" ]]; then
    echo "Running 1 scripts for install"
    python2.7 SanityInstall.py $NEW_TAG $vmIP_1 $ISO_DEPLOY_DESTINATION
#    python2.7 SanityFK.py $vmIP_1 $NEW_TAG
#    python2.7 SanityReboot.py $vmIP_1
else
	#run sanityInstall and if sanity install fails then copy logs and exit with error
    echo "Running single script for install"
    python2.7 SanityInstall.py $NEW_TAG $vmIP_1 $ISO_DEPLOY_DESTINATION \
    || { python2.7 SanityCopyLogs.py $NEW_TAG $vmIP_1 ; exit 1; }
    
fi

echo "Finish SanityInstall"




if [[ "$BRANCH" == "7.4.3000" || "$BRANCH" =~ "7.6" || "$BRANCH" =~ "7.8" ]]; then
    echo "Running 2 scripts SanityFK and SanityReboot"
    python2.7 SanityFK.py $vmIP_1 $NEW_TAG
    python2.7 SanityReboot.py $vmIP_1 || { python2.7 SanityCopyLogs.py $NEW_TAG $vmIP ; }

fi

# run sanity tests and log collect
echo "Run sanity tests and log collect"
if [[ "$BRANCH" == "7.4" || "$BRANCH" == "7.4.1000" || "$BRANCH" == "7.4.2000" ]]
	then python2.7 SanityTest.py $NEW_TAG $vmIP
	# run sanity test and copy logs, and if sanity fails then copy logs and exit with error:
    else python2.7 SanityTest.py $NEW_TAG $vmIP_1 $FullTesting \
         &amp;&amp; python2.7 SanityCopyLogs.py $NEW_TAG $vmIP_1 \
         || { python2.7 SanityCopyLogs.py $NEW_TAG $vmIP_1 ;}
fi

if [[ "$BRANCH" == "7.8.1000" ]]; then 
	python2.7 ChangeOVOCModeToOneVoiceLive.py $NEW_TAG $vmIP
	python2.7 SanityTest.py $NEW_TAG $vmIP_1 $FullTesting

fi
#3. if tests pass then terminate the tested machine
#aws ec2 terminate-instances --instance-ids ${INSTANCE_ID}


</command>
    </hudson.tasks.Shell>
    <EnvInjectBuilder plugin="envinject@2.3.0">
      <info>
        <propertiesFilePath>sanity.properties</propertiesFilePath>
      </info>
    </EnvInjectBuilder>
  </builders>
  <publishers>
    <org.jenkinsci.plugins.postbuildscript.PostBuildScript plugin="postbuildscript@2.5.1">
      <config>
        <scriptFiles/>
        <groovyScripts/>
        <buildSteps>
          <org.jenkinsci.plugins.postbuildscript.model.PostBuildStep>
            <results>
              <string>SUCCESS</string>
              <string>NOT_BUILT</string>
              <string>ABORTED</string>
              <string>FAILURE</string>
              <string>UNSTABLE</string>
            </results>
            <role>SLAVE</role>
            <buildSteps>
              <hudson.tasks.Shell>
                <command>if [[ -d  ${WORKSPACE}/EMS/VersionRelease/logs/ems/tester/rest/PMTemplateTest ]]; then
    cd ${WORKSPACE}/EMS/VersionRelease/logs/ems/tester/rest
    tar zcfv PMTemplateTest.tgz PMTemplateTest &amp;&amp; rm -rf PMTemplateTest
fi</command>
              </hudson.tasks.Shell>
            </buildSteps>
          </org.jenkinsci.plugins.postbuildscript.model.PostBuildStep>
        </buildSteps>
        <markBuildUnstable>false</markBuildUnstable>
      </config>
    </org.jenkinsci.plugins.postbuildscript.PostBuildScript>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>EMS/VersionRelease/logs/**/*</artifacts>
      <allowEmptyArchive>true</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>false</defaultExcludes>
      <caseSensitive>false</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
    <hudson.plugins.postbuildtask.PostbuildTask plugin="postbuild-task@1.8">
      <tasks>
        <hudson.plugins.postbuildtask.TaskProperties>
          <logTexts>
            <hudson.plugins.postbuildtask.LogProperties>
              <logText>Build was aborted</logText>
              <operator>OR</operator>
            </hudson.plugins.postbuildtask.LogProperties>
            <hudson.plugins.postbuildtask.LogProperties>
              <logText>marked build as failure</logText>
              <operator>AND</operator>
            </hudson.plugins.postbuildtask.LogProperties>
          </logTexts>
          <EscalateStatus>false</EscalateStatus>
          <RunIfJobSuccessful>false</RunIfJobSuccessful>
          <script>#export "$(cat sanity.properties)"&#13;
#aws ec2 terminate-instances --instance-ids ${INSTANCE_ID}&#13;
</script>
        </hudson.plugins.postbuildtask.TaskProperties>
      </tasks>
    </hudson.plugins.postbuildtask.PostbuildTask>
  </publishers>
  <buildWrappers>
    <EnvInjectPasswordWrapper plugin="envinject@2.3.0">
      <injectGlobalPasswords>false</injectGlobalPasswords>
      <maskPasswordParameters>true</maskPasswordParameters>
      <passwordEntries>
        <EnvInjectPasswordEntry>
          <name>artiPass</name>
          <value>{AQAAABAAAAAQT0A5kGH1euKydYIrJF5K0a/ovUyKPCPsOeyQ4h01qC0=}</value>
        </EnvInjectPasswordEntry>
      </passwordEntries>
    </EnvInjectPasswordWrapper>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@2.0.3">
      <template>#${BUILD_NUMBER}__${NEW_TAG}</template>
      <descriptionTemplate/>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>