<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>This job add customer to the Jira and define it as a member of the &apos;Customers&apos; group.&#xd;
Should be executed automatically by the Oracle Service Cloud application:&#xd;
before OSC creates an issue it triggers this job with parameter &quot;Customer&quot; - if the &quot;Customer&quot; value does not exist then this job add it.</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>30</daysToKeep>
        <numToKeep>50</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.27">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>Customer</name>
          <description></description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>test-Sanjer</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <authToken>ORACLE</authToken>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>
# The enviroment variable $Jirapass include user and password: &lt;user&gt;:&lt;password&gt; 
JiraURL=https://test-acjira/rest/api/2

displayName=$(echo $Customer | sed &apos;s:,\|&quot;::g&apos;)
name=$(echo $displayName  | sed &apos;s: \|\.::g&apos;)
displayJiraName$(echo $displayName  | sed &apos;s: :%20:g&apos;)

# Check if this customer exist in the Jira database, the searce have to be with the &apos;user&apos; name (not the displayName)
echo Checking if user exist
if curl -ks -u $Jirapass -X GET $JiraURL/user?username=$name | grep -q &quot;does not exist&quot;; then

  # this REST API add it as a record into the &apos;user picker&apos; fields
  echo Found that user does not exist
  curl -ks -u $Jirapass -X POST \
    --header &apos;Accept: application/json&apos; \
    --header &apos;Content-Type: application/json&apos; \
    --data &quot;{\&quot;displayName\&quot;: \&quot;$displayJiraName\&quot;, \&quot;emailAddress\&quot;: \&quot;$name@rndcustomer.local\&quot;, \&quot;name\&quot;:\&quot;$name\&quot;, \&quot;applicationKeys\&quot;: []}&quot; \
    $JiraURL/user
    
  # And define it as a member of the &apos;customers&apos; group  
  echo Adding the new customer to the &apos;Customer&apos; group
  if curl -ks -u $Jirapass -X POST \
    --header &apos;Accept: application/json&apos; \
    --header &apos;Content-Type: application/json&apos; \
    --data &quot;{\&quot;name\&quot;: \&quot;$name\&quot;}&quot; \
    $JiraURL/group/user?groupname=Customers | grep -q &quot;Cannot add user&quot;; then
      echo  Adding the customer \&quot;$displayJiraName\&quot; to the &apos;Customer&apos; group was failed
      exit 1
  else
    echo New customer was added successfully to “Customers” group
  fi
  
else
  
  echo This customer exist already
fi
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.Mailer plugin="mailer@1.20">
      <recipients>yossim shuky.riechard</recipients>
      <dontNotifyEveryUnstableBuild>false</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
  </publishers>
  <buildWrappers>
    <EnvInjectPasswordWrapper plugin="envinject@2.1.5">
      <injectGlobalPasswords>false</injectGlobalPasswords>
      <maskPasswordParameters>true</maskPasswordParameters>
      <passwordEntries>
        <EnvInjectPasswordEntry>
          <name>Jirapass</name>
          <value>{AQAAABAAAAAgXD9hjiIgN8GXOm2RtjD/Ob5l7mWDFWM54np4btIzZhd0Qkh6US9kkc+7rxpz//NB}</value>
        </EnvInjectPasswordEntry>
      </passwordEntries>
    </EnvInjectPasswordWrapper>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@1.6.9">
      <template>#${BUILD_NUMBER} - $Customer</template>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>