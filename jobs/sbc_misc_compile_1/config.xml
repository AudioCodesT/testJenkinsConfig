<?xml version="1.1" encoding="UTF-8" standalone="no"?><project>
  <actions/>
  <description/>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.0.10"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>60</daysToKeep>
        <numToKeep>-1</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.27">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>GERRIT_REFNAME</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>GERRIT_PROJECT</name>
          <description/>
          <defaultValue>TP/GWApp</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit/>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    <EnvInjectJobProperty plugin="envinject@2.3.0">
      <info>
        <propertiesContent>BRDVERSION=TrunkPackRam/Bsps/Common/Include/BrdVersion.h
ARTIFACTORY=artifactory</propertiesContent>
        <secureGroovyScript plugin="script-security@1.71">
          <script/>
          <sandbox>false</sandbox>
        </secureGroovyScript>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
      <on>true</on>
      <keepJenkinsSystemVariables>true</keepJenkinsSystemVariables>
      <keepBuildVariables>true</keepBuildVariables>
      <overrideBuildParameters>false</overrideBuildParameters>
    </EnvInjectJobProperty>
    
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@4.2.2">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>ssh://jenkins@test-gerrit:29418/TP/GWApp</url>
        <credentialsId>fef9964a-ddb7-4ce6-a445-a99a9e9802c0</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>${GERRIT_REFNAME}</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.CleanBeforeCheckout>
        <deleteUntrackedNestedRepositories>false</deleteUntrackedNestedRepositories>
      </hudson.plugins.git.extensions.impl.CleanBeforeCheckout>
    </extensions>
  </scm>
  <assignedNode>sbc-linux-build</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash -x

artifactory_host=${ARTIFACTORY}
ArtUser="jenkins:$artifactory_password"
cd TrunkPackRam

NEWTAG=`echo $GERRIT_REFNAME | awk -F/ '{print $NF}'`

echo NEWTAG=${NEWTAG} &gt; ../generated_sbc_version.properties

GERRIT_BRANCH=$(git branch --no-color -r --contains HEAD | grep -v -e '-&gt;' | sed 's:.*origin/::')
if [ $(echo $GERRIT_BRANCH | wc -w) -gt 1 ]; then
    header=$(git log -1 --pretty=format:%d)
    if echo $header | grep -q origin/; then
      GERRIT_BRANCH=$(echo $header | sed 's:.* origin/::; s:\()\|,\).*::' | cut -d" " -f1)
    else
      GERRIT_BRANCH=$(echo $GERRIT_BRANCH | cut -d" " -f1)
    fi
fi
if [ -z $GERRIT_BRANCH ]; then
  echo Branch does not found, exit with error
  exit 1
fi

#TEST_GERRIT_BRANCH=$(git for-each-ref --format='%(objectname) %(refname:short)' refs/heads | awk "/^$(git rev-parse HEAD)/ {print \$2}")

echo GERRIT_BRANCH=${GERRIT_BRANCH} &gt;&gt; ../generated_sbc_version.properties

FixNum=`echo $NEWTAG | cut -d. -f4`
if [ $FixNum &gt; 1 ]; then
  echo List of MIBs that were changed in Tag $NEWTAG: &gt; ChangedMibs.txt
  OldFix=`expr $FixNum - 2`
  OLDTAG=`echo $NEWTAG | cut -d. -f1-3`.`printf "%03d" $OldFix`
  OLDTAGTest=`git describe --first-parent --tags --abbrev=0 HEAD^`
  if [[ "`git tag -l $OLDTAG`" == "" ]]; then
    echo Previous TAG was not found
    OLDTAG=`git describe --first-parent --tags --abbrev=0 HEAD^`
  fi
  git diff --name-only $OLDTAG $NEWTAG | grep .my &gt;&gt; ChangedMibs.txt
  zip -gj Mibs.zip ChangedMibs.txt
  User=`git log --first-parent --pretty=format:"%cN" $OLDTAG..$NEWTAG | head -1 | sed s/\ /_/g`
  git log --decorate --no-color $OLDTAG..$NEWTAG &gt; ${User}_ReleaseNote.txt
  echo User=${User} &gt;&gt; ../generated_sbc_version.properties
  AuthorCommitter=`git log --first-parent --pretty=format:"%aN%n%cN" $OLDTAG..$NEWTAG | sort -u | sed s/$/\;/g`
  # Commits in first parent should be in the commits list only
  firstParent=$(git log --oneline --first-parent --pretty=format:"%h" $OLDTAG..$NEWTAG)
  RN=""
  VI=""
  while read -r hash; do
    Jira=$(git log --pretty=format:"%B" $hash -n1 | grep ^Issue: | sed 's/Issue: \(VI\|\)//g')
    # Remove all unreadable characters
    Jira=$(echo $Jira | tr -dc '[:alnum:]- ')
    VI+=$Jira
    # Add all issues to the commit in the first parent, includes issues in all others commits
    if [[ $firstParent =~ $hash ]]; then
      subject=$(git log --pretty=format:"%s" $hash -n1 | sed 's/\"/`/g; s/---/_/g; s/::/;/g')
      if [[ $GERRIT_BRANCH =~ "feature/" &amp;&amp; $subject =~ "Merge remote-tracking" ]]; then VI=$Jira; fi
      RN+=---$subject::$hash::$VI
      VI=""
    else
      VI+=" "
    fi
  done &lt;&lt;&lt; "$(git log --reverse --pretty=format:"%h" $OLDTAG..$NEWTAG)"
  
  # Add to the last commit all issues that not in first parent
  if [ ! -z "$VI" ]; then RN+=" $VI"; fi
  
  echo GERRIT_HOST=${GERRIT_NAME} &gt;&gt; ../generated_sbc_version.properties

  #RN=`git log --first-parent --pretty=format:"&lt;a href='https://test-gerrit/r/%h'&gt;%h&lt;/a&gt; - %s" $OLDTAG..$NEWTAG | sed s/\"/\'/g`
  #VIS=`git log --pretty=format:"%B" $OLDTAG..$NEWTAG | grep ^Issue | sed 's/^Issue: \(VI\|\)//g; s/ .*//g' | sort -u`
  EMAIL=`git log --first-parent --pretty=format:"%ae%n%ce" $OLDTAG..$NEWTAG | sort -u`
  echo RN="${RN}" &gt;&gt; ../generated_sbc_version.properties
  #echo VIS=${VIS} &gt;&gt; ../generated_sbc_version.properties
  echo EMAIL=${EMAIL} &gt;&gt; ../generated_sbc_version.properties
  echo PROJECT=${GERRIT_PROJECT} &gt;&gt; ../generated_sbc_version.properties
  DATE=`git for-each-ref --format '%(taggerdate)' refs/tags/$NEWTAG`
  echo DATE=${DATE} &gt;&gt; ../generated_sbc_version.properties
  echo AuthorCommitter=${AuthorCommitter} &gt;&gt; ../generated_sbc_version.properties
fi


#replace backslash with space, because it is not a valid properties file if it includes a backslash char
#it save a "&lt;name&gt;.bak" backup file for debug if we will encounter problems
sed -i.bak 's/\\/ /g' ../generated_sbc_version.properties

</command>
    </hudson.tasks.Shell>
    <EnvInjectBuilder plugin="envinject@2.3.0">
      <info>
        <propertiesFilePath>generated_sbc_version.properties</propertiesFilePath>
      </info>
    </EnvInjectBuilder>
  </builders>
  <publishers>
    <hudson.plugins.parameterizedtrigger.BuildTrigger plugin="parameterized-trigger@2.35.2">
      <configs>
        <hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
          <configs>
            <hudson.plugins.parameterizedtrigger.FileBuildParameters>
              <propertiesFile>generated_sbc_version.properties</propertiesFile>
              <failTriggerOnMissing>false</failTriggerOnMissing>
              <textParamValueOnNewLine>false</textParamValueOnNewLine>
              <useMatrixChild>false</useMatrixChild>
              <onlyExactRuns>false</onlyExactRuns>
            </hudson.plugins.parameterizedtrigger.FileBuildParameters>
          </configs>
          <projects>Update-Jira</projects>
          <condition>UNSTABLE_OR_BETTER</condition>
          <triggerWithNoParameters>false</triggerWithNoParameters>
          <triggerFromChildProjects>false</triggerFromChildProjects>
        </hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
      </configs>
    </hudson.plugins.parameterizedtrigger.BuildTrigger>
  </publishers>
  <buildWrappers>
    <EnvInjectPasswordWrapper plugin="envinject@2.3.0">
      <injectGlobalPasswords>false</injectGlobalPasswords>
      <maskPasswordParameters>true</maskPasswordParameters>
      <passwordEntries>
        <EnvInjectPasswordEntry>
          <name>artifactory_password</name>
          <value>{AQAAABAAAAAQ+bVv/cUkbE3PE8uXSCmp4gfehH/6PsEaoaJJv2Kn0vg=}</value>
        </EnvInjectPasswordEntry>
      </passwordEntries>
    </EnvInjectPasswordWrapper>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@2.0.3">
      <template>#${BUILD_NUMBER} - ${NEWTAG}</template>
      <descriptionTemplate/>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>