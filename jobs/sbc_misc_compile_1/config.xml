<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.0.10"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>60</daysToKeep>
        <numToKeep>-1</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.27">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>GERRIT_REFNAME</name>
          <description></description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>GERRIT_PROJECT</name>
          <description></description>
          <defaultValue>TP/GWApp</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
      <configVersion>1</configVersion>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    <EnvInjectJobProperty plugin="envinject@2.3.0">
      <info>
        <propertiesContent>BRDVERSION=TrunkPackRam/Bsps/Common/Include/BrdVersion.h
ARTIFACTORY=artifactory</propertiesContent>
        <secureGroovyScript plugin="script-security@1.71">
          <script></script>
          <sandbox>false</sandbox>
        </secureGroovyScript>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
      <on>true</on>
      <keepJenkinsSystemVariables>true</keepJenkinsSystemVariables>
      <keepBuildVariables>true</keepBuildVariables>
      <overrideBuildParameters>false</overrideBuildParameters>
    </EnvInjectJobProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@4.2.2">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>ssh://jenkins@test-gerrit:29418/TP/GWApp</url>
        <credentialsId>fef9964a-ddb7-4ce6-a445-a99a9e9802c0</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>${GERRIT_REFNAME}</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.CleanBeforeCheckout>
        <deleteUntrackedNestedRepositories>false</deleteUntrackedNestedRepositories>
      </hudson.plugins.git.extensions.impl.CleanBeforeCheckout>
    </extensions>
  </scm>
  <assignedNode>sbc-linux-build</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTrigger plugin="gerrit-trigger@2.30.5">
      <spec></spec>
      <gerritProjects>
        <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
          <compareType>PLAIN</compareType>
          <pattern>TP/GWApp</pattern>
          <branches>
            <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
              <compareType>ANT</compareType>
              <pattern>refs/tags/7.4*.*</pattern>
            </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
            <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
              <compareType>ANT</compareType>
              <pattern>refs/tags/7.3*.*</pattern>
            </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
            <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
              <compareType>ANT</compareType>
              <pattern>refs/tags/7.2*.*</pattern>
            </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
          </branches>
          <disableStrictForbiddenFileVerification>false</disableStrictForbiddenFileVerification>
        </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
      </gerritProjects>
      <dynamicGerritProjects class="empty-list"/>
      <skipVote>
        <onSuccessful>false</onSuccessful>
        <onFailed>false</onFailed>
        <onUnstable>false</onUnstable>
        <onNotBuilt>false</onNotBuilt>
      </skipVote>
      <silentMode>false</silentMode>
      <notificationLevel></notificationLevel>
      <silentStartMode>false</silentStartMode>
      <escapeQuotes>true</escapeQuotes>
      <nameAndEmailParameterMode>PLAIN</nameAndEmailParameterMode>
      <dependencyJobsNames></dependencyJobsNames>
      <commitMessageParameterMode>BASE64</commitMessageParameterMode>
      <changeSubjectParameterMode>PLAIN</changeSubjectParameterMode>
      <commentTextParameterMode>BASE64</commentTextParameterMode>
      <buildStartMessage></buildStartMessage>
      <buildFailureMessage></buildFailureMessage>
      <buildSuccessfulMessage></buildSuccessfulMessage>
      <buildUnstableMessage></buildUnstableMessage>
      <buildNotBuiltMessage></buildNotBuiltMessage>
      <buildUnsuccessfulFilepath></buildUnsuccessfulFilepath>
      <customUrl></customUrl>
      <serverName>test-gerrit</serverName>
      <triggerOnEvents>
        <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.events.PluginRefUpdatedEvent/>
      </triggerOnEvents>
      <dynamicTriggerConfiguration>false</dynamicTriggerConfiguration>
      <triggerConfigURL></triggerConfigURL>
      <triggerInformationAction/>
    </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash -x

artifactory_host=${ARTIFACTORY}
ArtUser=&quot;jenkins:$artifactory_password&quot;
cd TrunkPackRam

NEWTAG=`echo $GERRIT_REFNAME | awk -F/ &apos;{print $NF}&apos;`

echo NEWTAG=${NEWTAG} &gt; ../generated_sbc_version.properties

GERRIT_BRANCH=$(git branch --no-color -r --contains HEAD | grep -v -e &apos;-&gt;&apos; | sed &apos;s:.*origin/::&apos;)
if [ $(echo $GERRIT_BRANCH | wc -w) -gt 1 ]; then
    header=$(git log -1 --pretty=format:%d)
    if echo $header | grep -q origin/; then
      GERRIT_BRANCH=$(echo $header | sed &apos;s:.* origin/::; s:\()\|,\).*::&apos; | cut -d&quot; &quot; -f1)
    else
      GERRIT_BRANCH=$(echo $GERRIT_BRANCH | cut -d&quot; &quot; -f1)
    fi
fi
if [ -z $GERRIT_BRANCH ]; then
  echo Branch does not found, exit with error
  exit 1
fi

#TEST_GERRIT_BRANCH=$(git for-each-ref --format=&apos;%(objectname) %(refname:short)&apos; refs/heads | awk &quot;/^$(git rev-parse HEAD)/ {print \$2}&quot;)

echo GERRIT_BRANCH=${GERRIT_BRANCH} &gt;&gt; ../generated_sbc_version.properties

if [ `curl -u $ArtUser -ks https://$artifactory_host/api/storage/sbc-release/com/ac/sbc/${GERRIT_BRANCH}/Firmware/${NEWTAG}/Mibs.zip | grep uri | wc -l` == 1 ]
then 
	echo ${NEWTAG}/Mibs.zip exist already!... Abort with error;
    exit 1
fi

echo Create ConfGenerator.zip
zip -j ConfGenerator.zip ExcelGenerators/ConfGenerator/* &gt; /dev/null
zip -gj ConfGenerator.zip ../Modules/GWApp/ExcelGenerators/ConfGenerator/GWApp_ParamTable.csv
zip -gj ConfGenerator.zip ../Modules/GWApp/ExcelGenerators/Matrix_Generator/GwApp_MatrixTable.csv
zip -gj ConfGenerator.zip ExcelGenerators/Matrix_Generator/Matrix_*.csv

echo Create Mibs.zip
zip -j Mibs.zip Management/SNMP/ACLMibs/Mibs/* &gt; /dev/null
FixNum=`echo $NEWTAG | cut -d. -f4`
if [ $FixNum &gt; 1 ]; then
  echo List of MIBs that were changed in Tag $NEWTAG: &gt; ChangedMibs.txt
  OldFix=`expr $FixNum - 1`
  OLDTAG=`echo $NEWTAG | cut -d. -f1-3`.`printf &quot;%03d&quot; $OldFix`
  OLDTAGTest=`git describe --first-parent --tags --abbrev=0 HEAD^`
  if [[ &quot;`git tag -l $OLDTAG`&quot; == &quot;&quot; ]]; then
    echo Previous TAG was not found
    OLDTAG=`git describe --first-parent --tags --abbrev=0 HEAD^`
  fi
  git diff --name-only $OLDTAG $NEWTAG | grep .my &gt;&gt; ChangedMibs.txt
  zip -gj Mibs.zip ChangedMibs.txt
  User=`git log --first-parent --pretty=format:&quot;%cN&quot; $OLDTAG..$NEWTAG | head -1 | sed s/\ /_/g`
  git log --decorate --no-color $OLDTAG..$NEWTAG &gt; ${User}_ReleaseNote.txt
  echo User=${User} &gt;&gt; ../generated_sbc_version.properties
  AuthorCommitter=`git log --first-parent --pretty=format:&quot;%aN%n%cN&quot; $OLDTAG..$NEWTAG | sort -u | sed s/$/\;/g`
  # Commits in first parent should be in the commits list only
  firstParent=$(git log --oneline --first-parent --pretty=format:&quot;%h&quot; $OLDTAG..$NEWTAG)
  RN=&quot;&quot;
  VI=&quot;&quot;
  while read -r hash; do
    Jira=$(git log --pretty=format:&quot;%B&quot; $hash -n1 | grep ^Issue: | sed &apos;s/Issue: \(VI\|\)//g&apos;)
    # Remove all unreadable characters
    Jira=$(echo $Jira | tr -dc &apos;[:alnum:]- &apos;)
    VI+=$Jira
    # Add all issues to the commit in the first parent, includes issues in all others commits
    if [[ $firstParent =~ $hash ]]; then
      subject=$(git log --pretty=format:&quot;%s&quot; $hash -n1 | sed &apos;s/\&quot;/`/g; s/---/_/g; s/::/;/g&apos;)
      if [[ $GERRIT_BRANCH =~ &quot;feature/&quot; &amp;&amp; $subject =~ &quot;Merge remote-tracking&quot; ]]; then VI=$Jira; fi
      RN+=---$subject::$hash::$VI
      VI=&quot;&quot;
    else
      VI+=&quot; &quot;
    fi
  done &lt;&lt;&lt; &quot;$(git log --reverse --pretty=format:&quot;%h&quot; $OLDTAG..$NEWTAG)&quot;
  
  # Add to the last commit all issues that not in first parent
  if [ ! -z &quot;$VI&quot; ]; then RN+=&quot; $VI&quot;; fi
  
  echo GERRIT_HOST=${GERRIT_NAME} &gt;&gt; ../generated_sbc_version.properties

  #RN=`git log --first-parent --pretty=format:&quot;&lt;a href=&apos;https://test-gerrit/r/%h&apos;&gt;%h&lt;/a&gt; - %s&quot; $OLDTAG..$NEWTAG | sed s/\&quot;/\&apos;/g`
  #VIS=`git log --pretty=format:&quot;%B&quot; $OLDTAG..$NEWTAG | grep ^Issue | sed &apos;s/^Issue: \(VI\|\)//g; s/ .*//g&apos; | sort -u`
  EMAIL=`git log --first-parent --pretty=format:&quot;%ae%n%ce&quot; $OLDTAG..$NEWTAG | sort -u`
  echo RN=&quot;${RN}&quot; &gt;&gt; ../generated_sbc_version.properties
  #echo VIS=${VIS} &gt;&gt; ../generated_sbc_version.properties
  echo EMAIL=${EMAIL} &gt;&gt; ../generated_sbc_version.properties
  echo PROJECT=${GERRIT_PROJECT} &gt;&gt; ../generated_sbc_version.properties
  DATE=`git for-each-ref --format &apos;%(taggerdate)&apos; refs/tags/$NEWTAG`
  echo DATE=${DATE} &gt;&gt; ../generated_sbc_version.properties
  echo AuthorCommitter=${AuthorCommitter} &gt;&gt; ../generated_sbc_version.properties
fi

git submodule--helper list | cut -d&apos; &apos; -f2 | \
while read -r sha1
do 
  SubComps=$(curl -u $ArtUser -ks &quot;https://$artifactory_host/api/search/prop?vcs.revision=$sha1&amp;repos=sbc-release&quot; | grep uri | cut -d&apos;&quot;&apos; -f4)
  if [[ $SubComps =~ .*/.* ]]; then 
    HttpsSubLoc=`echo $SubComps | cut -d&apos; &apos; -f1`
    HttpsSubLoc=`dirname $HttpsSubLoc`
    SubLoc=`echo $HttpsSubLoc | sed s/.*\\\/sbc\\\///`
    mkdir -p OpensourceVersions/$SubLoc
    downloadUri=`curl -u $ArtUser -ks $HttpsSubLoc/Versions.txt | grep &quot;downloadUri&quot; | cut -d&apos;&quot;&apos; -f4`
    if [[ $downloadUri =~ https.* ]]; then
       curl -u $ArtUser -ks $downloadUri --output OpensourceVersions/$SubLoc/Versions.txt
    fi
    echo -e &quot;$NEWTAG\n&quot; &gt;&gt; OpensourceVersions/$SubLoc/Versions.txt
  fi
done

commit_sha1=`git ls-files --stage ../OpenSource/VRX | cut -f2 -d &apos; &apos;`
curl -u $ArtUser -ks &quot;https://$artifactory_host/api/search/prop?vcs.revision=$commit_sha1&amp;repos=sbc-repo&quot; | grep uri | cut -d&apos;&quot;&apos; -f4 &gt; files.list
while read -r uri
do
   downloadUri=`curl -u $ArtUser -ks $uri | grep &quot;downloadUri&quot; | cut -d&apos;&quot;&apos; -f4`
   outputFile=${downloadUri##*/}
          
   if [[ &quot;fullimage_A.img&quot; == &quot;$outputFile&quot; ]]; then curl -u $ArtUser -ks $downloadUri --output ADSL_A_F${NEWTAG}.img; fi
   if [[ &quot;fullimage_B.img&quot; == &quot;$outputFile&quot; ]]; then curl -u $ArtUser -ks $downloadUri --output ADSL_B_F${NEWTAG}.img; fi
done &lt; &quot;files.list&quot;

#replace backslash with space, because it is not a valid properties file if it includes a backslash char
#it save a &quot;&lt;name&gt;.bak&quot; backup file for debug if we will encounter problems
sed -i.bak &apos;s/\\/ /g&apos; ../generated_sbc_version.properties

</command>
    </hudson.tasks.Shell>
    <EnvInjectBuilder plugin="envinject@2.3.0">
      <info>
        <propertiesFilePath>generated_sbc_version.properties</propertiesFilePath>
      </info>
    </EnvInjectBuilder>
  </builders>
  <publishers>
    <org.jenkins__ci.plugins.flexible__publish.FlexiblePublisher plugin="flexible-publish@0.15.2">
      <publishers>
        <org.jenkins__ci.plugins.flexible__publish.ConditionalPublisher>
          <condition class="org.jenkins_ci.plugins.run_condition.contributed.ShellCondition" plugin="run-condition@1.3">
            <command>if [[ &quot;$GERRIT_REFNAME&quot; == &quot;refs/tags/7.20N.&quot;* ]]; then exit 1; fi
</command>
          </condition>
          <publisherList>
            <hudson.plugins.parameterizedtrigger.BuildTrigger plugin="parameterized-trigger@2.35.2">
              <configs>
                <hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
                  <configs>
                    <hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
                      <properties>NEWTAG=${NEWTAG}
GERRIT_BRANCH=${GERRIT_BRANCH}</properties>
                      <textParamValueOnNewLine>false</textParamValueOnNewLine>
                    </hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
                  </configs>
                  <projects>sbc-compile</projects>
                  <condition>UNSTABLE_OR_BETTER</condition>
                  <triggerWithNoParameters>false</triggerWithNoParameters>
                  <triggerFromChildProjects>false</triggerFromChildProjects>
                </hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
              </configs>
            </hudson.plugins.parameterizedtrigger.BuildTrigger>
          </publisherList>
          <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.3"/>
          <executionStrategy class="org.jenkins_ci.plugins.flexible_publish.strategy.FailAtEndExecutionStrategy"/>
        </org.jenkins__ci.plugins.flexible__publish.ConditionalPublisher>
      </publishers>
    </org.jenkins__ci.plugins.flexible__publish.FlexiblePublisher>
    <hudson.plugins.parameterizedtrigger.BuildTrigger plugin="parameterized-trigger@2.35.2">
      <configs>
        <hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
          <configs>
            <hudson.plugins.parameterizedtrigger.FileBuildParameters>
              <propertiesFile>generated_sbc_version.properties</propertiesFile>
              <failTriggerOnMissing>false</failTriggerOnMissing>
              <textParamValueOnNewLine>false</textParamValueOnNewLine>
              <useMatrixChild>false</useMatrixChild>
              <onlyExactRuns>false</onlyExactRuns>
            </hudson.plugins.parameterizedtrigger.FileBuildParameters>
          </configs>
          <projects>Update-Jira</projects>
          <condition>UNSTABLE_OR_BETTER</condition>
          <triggerWithNoParameters>false</triggerWithNoParameters>
          <triggerFromChildProjects>false</triggerFromChildProjects>
        </hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
      </configs>
    </hudson.plugins.parameterizedtrigger.BuildTrigger>
    <hudson.tasks.Mailer plugin="mailer@1.32">
      <recipients>shuky.riechard@audiocodes.com yossim@audiocodes.com</recipients>
      <dontNotifyEveryUnstableBuild>false</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
    <com.chikli.hudson.plugin.naginator.NaginatorPublisher plugin="naginator@1.17.2">
      <regexpForRerun></regexpForRerun>
      <rerunIfUnstable>false</rerunIfUnstable>
      <rerunMatrixPart>false</rerunMatrixPart>
      <checkRegexp>false</checkRegexp>
      <regexpForMatrixStrategy>TestParent</regexpForMatrixStrategy>
      <delay class="com.chikli.hudson.plugin.naginator.FixedDelay">
        <delay>60</delay>
      </delay>
      <maxSchedule>1</maxSchedule>
    </com.chikli.hudson.plugin.naginator.NaginatorPublisher>
  </publishers>
  <buildWrappers>
    <org.jfrog.hudson.generic.ArtifactoryGenericConfigurator plugin="artifactory@3.6.1">
      <deployerDetails>
        <artifactoryName>artifactory2-pro</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <deployReleaseRepository>
          <keyFromText></keyFromText>
          <keyFromSelect>sbc-release</keyFromSelect>
          <dynamicMode>false</dynamicMode>
        </deployReleaseRepository>
        <stagingPlugin/>
      </deployerDetails>
      <resolverDetails>
        <artifactoryName>artifactory2-pro</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <stagingPlugin/>
      </resolverDetails>
      <deployerCredentialsConfig>
        <credentialsId></credentialsId>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </deployerCredentialsConfig>
      <resolverCredentialsConfig>
        <credentialsId></credentialsId>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </resolverCredentialsConfig>
      <useSpecs>false</useSpecs>
      <uploadSpec>
        <spec></spec>
      </uploadSpec>
      <downloadSpec>
        <spec></spec>
      </downloadSpec>
      <deployPattern>$WORKSPACE/${BRDVERSION}=&gt;com/ac/sbc/${GERRIT_BRANCH}/Firmware/${NEWTAG}
$WORKSPACE/TrunkPackRam/ADSL_*.img=&gt;com/ac/sbc/${GERRIT_BRANCH}/Firmware/${NEWTAG}
$WORKSPACE/TrunkPackRam/ConfGenerator.zip=&gt;com/ac/sbc/${GERRIT_BRANCH}/Firmware/${NEWTAG}
$WORKSPACE/TrunkPackRam/Mibs.zip=&gt;com/ac/sbc/${GERRIT_BRANCH}/Firmware/${NEWTAG}
$WORKSPACE/TrunkPackRam/*ReleaseNote.txt=&gt;com/ac/sbc/${GERRIT_BRANCH}/Firmware/${NEWTAG}
$WORKSPACE/TrunkPackRam/OpensourceVersions/**/Versions.txt=&gt;com/ac/sbc</deployPattern>
      <resolvePattern></resolvePattern>
      <deploymentProperties>User=$User;</deploymentProperties>
      <deployBuildInfo>true</deployBuildInfo>
      <includeEnvVars>false</includeEnvVars>
      <envVarsPatterns>
        <includePatterns></includePatterns>
        <excludePatterns>*password*,*secret*,*key*</excludePatterns>
      </envVarsPatterns>
      <discardOldBuilds>false</discardOldBuilds>
      <discardBuildArtifacts>true</discardBuildArtifacts>
      <asyncBuildRetention>false</asyncBuildRetention>
      <multiConfProject>false</multiConfProject>
      <customBuildName></customBuildName>
      <overrideBuildName>false</overrideBuildName>
    </org.jfrog.hudson.generic.ArtifactoryGenericConfigurator>
    <EnvInjectPasswordWrapper plugin="envinject@2.3.0">
      <injectGlobalPasswords>false</injectGlobalPasswords>
      <maskPasswordParameters>true</maskPasswordParameters>
      <passwordEntries>
        <EnvInjectPasswordEntry>
          <name>artifactory_password</name>
          <value>{AQAAABAAAAAQ+bVv/cUkbE3PE8uXSCmp4gfehH/6PsEaoaJJv2Kn0vg=}</value>
        </EnvInjectPasswordEntry>
      </passwordEntries>
    </EnvInjectPasswordWrapper>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@2.0.3">
      <template>#${BUILD_NUMBER} - ${NEWTAG}</template>
      <descriptionTemplate></descriptionTemplate>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>