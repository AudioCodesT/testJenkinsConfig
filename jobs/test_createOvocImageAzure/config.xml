<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.27">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>NEW_TAG</name>
          <description></description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>ISO_DEPLOY_DESTINATION</name>
          <description></description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>official_iso</string>
              <string>latest_iso</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@3.9.3">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>ssh://jenkins@test-gerrit:29418/EMS/ovoc_server.git</url>
        <credentialsId>fef9964a-ddb7-4ce6-a445-a99a9e9802c0</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>server_${NEW_TAG}</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.CleanBeforeCheckout/>
      <hudson.plugins.git.extensions.impl.CloneOption>
        <shallow>true</shallow>
        <noTags>false</noTags>
        <reference></reference>
        <depth>1</depth>
        <honorRefspec>false</honorRefspec>
      </hudson.plugins.git.extensions.impl.CloneOption>
    </extensions>
  </scm>
  <assignedNode>azure_ovoc_image</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>admin_username=acovoc
azure_username=benm@audiocodes.com
base_image=&quot;https://ciresourcegroupstorage.blob.core.windows.net/vhds/OVOC-Template.vhd&quot;
VmName=&quot;OVOC-Template-500GB&quot;
ResourceGroupName=&quot;CI_Resource_Group&quot;
VmSize=&quot;Standard_D4s_v3&quot;
vhd_storage_account=&quot;ciresourcegroupstorage&quot;
subnet=&quot;Net_172.16.100.0&quot;
vnet_name=&quot;CI_Resource_Group&quot;
security_group=&quot;None&quot;
echo &quot;ResourceGroupName=${ResourceGroupName}&quot; &gt; sanity.properties
echo &quot;VmName=${VmName}&quot; &gt;&gt; sanity.properties
#connect to azure cli
az login -u ${azure_username} -p ${azure_password}
#create new VM
az vm create \
    --resource-group ${ResourceGroupName} \
    --name ${VmName} \
    --image ${base_image} \
    --os-type linux \
    --admin-username ${admin_username} \
    --admin-password ${admin_password} \
    --size ${VmSize} \
	--public-ip-address &quot;&quot; \
    --use-unmanaged-disk \
	--storage-account &quot;${vhd_storage_account}&quot; \
    --subnet ${subnet} \
    --vnet-name ${vnet_name} \
    --nsg ${security_group} \
    --tags &apos;Name=AzureEmsSanityInstall&apos; &apos;Creator=Azure&apos;
#wait for VM will be created
az vm wait -g ${ResourceGroupName} -n ${VmName} --created

#get new VM IP
vmIP=$(az vm list-ip-addresses -g ${ResourceGroupName} -n ${VmName} --query &quot;[*].virtualMachine.network.privateIpAddresses[0]&quot; --output tsv)

#open ports 22,443,80 (temporary)
#az vm open-port -g ${ResourceGroupName} -n ${VmName} --port &apos;22&apos; --port &apos;80&apos; --port &apos;443&apos;



#wait for the vm to be running
#az vm wait -g ${ResourceGroupName} -n ${VmName} --custom &quot;instanceView.statuses[1].[?code==&apos;PowerState/running&apos;]&quot;
current_status=$(az vm get-instance-view --name ${VmName} --resource-group ${ResourceGroupName} --query instanceView.statuses[1].[code] --output tsv)
if [[ &quot;$current_status&quot; != &quot;PowerState/running&quot; ]]
then
	echo &quot;Wait until the VM is up&quot;
	sleep 20
    current_status=$(az vm get-instance-view --name ${VmName} --resource-group ${ResourceGroupName} --query instanceView.statuses[1].[code] --output tsv)
fi
echo &quot;Wait until VM is fully loaded&quot;
sleep 100


cd EMS/VersionRelease
#run script &quot;ovoc-Azure-image-update.py&quot; before installation to run  update-hosts-file script
python ovoc_azure_image_update.py $NEW_TAG $vmIP before_install
#run SanityInstall
python SanityInstall.py $NEW_TAG $vmIP $ISO_DEPLOY_DESTINATION

#run script &quot;ovoc-Azure-image-update.py&quot; before installation to run  update-hosts-file script
python ovoc_azure_image_update.py $NEW_TAG $vmIP after_install

#deallocate and generalize the VM
az vm deallocate --resource-group ${ResourceGroupName} --name ${VmName}
az vm generalize --resource-group ${ResourceGroupName} --name ${VmName}
#create Image
az image create --resource-group ${ResourceGroupName} --name ovoc_${NEW_TAG} --source ${VmName}


#delete VM
az vm delete -g ${ResourceGroupName} -n ${VmName} --yes

#put in post build task
#export &quot;$(cat sanity.properties)&quot;
#az vm delete -g ${ResourceGroupName} -n ${VmName} --yes</command>
    </hudson.tasks.Shell>
    <EnvInjectBuilder plugin="envinject@2.1.6">
      <info/>
    </EnvInjectBuilder>
  </builders>
  <publishers>
    <hudson.plugins.postbuildtask.PostbuildTask plugin="postbuild-task@1.8">
      <tasks>
        <hudson.plugins.postbuildtask.TaskProperties>
          <logTexts>
            <hudson.plugins.postbuildtask.LogProperties>
              <logText>Build was aborted</logText>
              <operator>OR</operator>
            </hudson.plugins.postbuildtask.LogProperties>
            <hudson.plugins.postbuildtask.LogProperties>
              <logText>marked build as failure</logText>
              <operator>AND</operator>
            </hudson.plugins.postbuildtask.LogProperties>
          </logTexts>
          <EscalateStatus>false</EscalateStatus>
          <RunIfJobSuccessful>false</RunIfJobSuccessful>
          <script></script>
        </hudson.plugins.postbuildtask.TaskProperties>
      </tasks>
    </hudson.plugins.postbuildtask.PostbuildTask>
    <hudson.tasks.Mailer plugin="mailer@1.20">
      <recipients>ben.magriso</recipients>
      <dontNotifyEveryUnstableBuild>false</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
  </publishers>
  <buildWrappers>
    <org.jfrog.hudson.generic.ArtifactoryGenericConfigurator plugin="artifactory@3.1.0">
      <deployerDetails>
        <artifactoryName>artifactory2-pro</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <stagingPlugin/>
      </deployerDetails>
      <resolverDetails>
        <artifactoryName>artifactory2-pro</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <stagingPlugin/>
      </resolverDetails>
      <deployerCredentialsConfig>
        <credentials>
          <username></username>
          <password></password>
        </credentials>
        <credentialsId></credentialsId>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </deployerCredentialsConfig>
      <resolverCredentialsConfig>
        <credentials>
          <username></username>
          <password></password>
        </credentials>
        <credentialsId></credentialsId>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </resolverCredentialsConfig>
      <useSpecs>true</useSpecs>
      <uploadSpec>
        <spec></spec>
      </uploadSpec>
      <downloadSpec>
        <spec>{
    &quot;files&quot;: [
        {

            &quot;pattern&quot;: &quot;Devops/Tools/Azure/ovoc/ovoc_azure_image_update.py&quot;,
            &quot;target&quot;: &quot;${workspace}/EMS/VersionRelease/&quot;,
            &quot;flat&quot;: &quot;true&quot;
        }
    ]
}</spec>
      </downloadSpec>
      <deployPattern></deployPattern>
      <resolvePattern></resolvePattern>
      <deploymentProperties></deploymentProperties>
      <deployBuildInfo>true</deployBuildInfo>
      <includeEnvVars>false</includeEnvVars>
      <envVarsPatterns>
        <includePatterns></includePatterns>
        <excludePatterns>*password*,*secret*,*key*</excludePatterns>
      </envVarsPatterns>
      <discardOldBuilds>false</discardOldBuilds>
      <discardBuildArtifacts>true</discardBuildArtifacts>
      <asyncBuildRetention>false</asyncBuildRetention>
      <multiConfProject>false</multiConfProject>
      <customBuildName></customBuildName>
      <overrideBuildName>false</overrideBuildName>
    </org.jfrog.hudson.generic.ArtifactoryGenericConfigurator>
    <EnvInjectPasswordWrapper plugin="envinject@2.1.6">
      <injectGlobalPasswords>false</injectGlobalPasswords>
      <maskPasswordParameters>true</maskPasswordParameters>
      <passwordEntries>
        <EnvInjectPasswordEntry>
          <name>admin_password</name>
          <value>{AQAAABAAAAAQofhnjB3Zz0pzciacF1ol8NCW/XK1eQsZWGj61evL1E0=}</value>
        </EnvInjectPasswordEntry>
        <EnvInjectPasswordEntry>
          <name>azure_password</name>
          <value>{AQAAABAAAAAQRjYFsb2TnmX10jmGEwViAfIacZe1PsUw8tsKyCOLVEk=}</value>
        </EnvInjectPasswordEntry>
      </passwordEntries>
    </EnvInjectPasswordWrapper>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@1.6.9">
      <template>#${BUILD_NUMBER}__${NEW_TAG}</template>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>