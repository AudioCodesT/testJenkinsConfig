<?xml version="1.1" encoding="UTF-8" standalone="no"?><project>
  <actions/>
  <description>This job go over all the folders in the Artifactory and move the old version to aclnas03.&#13;
Executed periodically every night.</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.0.10"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>15</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.27">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>OLD</name>
          <description>Delete all Artifacts OLD of this number of days </description>
          <defaultValue>30</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>DESTINATION</name>
          <description/>
          <defaultValue>\\aclnas03\Versions\CompilationResults</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit/>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>AclnasArtifactory-Update</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.TimerTrigger>
      <spec>H 22 * * *</spec>
    </hudson.triggers.TimerTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.BatchFile>
      <command>net use T: /delete&#13;
net use T: "%DESTINATION%"&#13;
&#13;
</command>
    </hudson.tasks.BatchFile>
    <hudson.tasks.Shell>
      <command>#!c:\cygwin64\bin\bash --login
###!c:\cygwin_aclnas03\bin\bash --login
User=$ARTIFACTORY_USER:$ARTIFACTORY_PASSWORD
curl=c:/curl/curl
# Calculate the date we are going to delete
oldThan=$(date +"%Y%m%d" -d "-$OLD days")
moveDone=0


cd $WORKSPACE

function RemoveEachFolder() {
  
  local RemoveFolder=$1
  local TargetPath=$2
  local copy_to_local_storage=True
  #iretate on all files from artifactory inside folder 
  $curl -ks -u $User -X GET https://$ARTIFACTORY/api/storage/$RemoveFolder | grep uri | grep -v https: | sort -V | while read line
  do
  	copy_to_local_storage=True
  	#uri = file/folder name
    uri=`echo $line | cut -d'"' -f4`
    DestSize=0; ArtSize=0
    ArtSize=`$curl -ks -u $User -X GET https://$ARTIFACTORY/api/storage/${RemoveFolder}$uri | grep \"size\" | cut -d: -f2 | cut -d'"' -f2`
    #check if there is size to the artifacts --- its a file to copy from artifactory to local storage
    if [ "$ArtSize" != "" ]; then
    	#check if file already exists in the destination path, if he exists delete him
        if [[ -e ${DESTINATION}/${TargetPath}$uri ]]
        then
        	echo "deleting ${DESTINATION}/${TargetPath}$uri before copy him from artifactory"
        	rm -rf "${DESTINATION}/${TargetPath}$uri"
        fi
        #check if its from SFB or Non-lync and not from "release" branch then copy only .csv and .img files to local storage
        if [[ "${RemoveFolder}$uri" == *"SFB"* || "${RemoveFolder}$uri" == *"non_lync"* ]]
        then
        	if [[ "${RemoveFolder}$uri" != *"SFB/release"* &amp;&amp; "${RemoveFolder}$uri" != *"non_lync/release"* ]]
            then
            	if [[ "${RemoveFolder}$uri" == *".csv"* || "${RemoveFolder}$uri" == *".img"* || "${RemoveFolder}$uri" == *"build.tgz"* ]]
                then
                	echo "The file is From SFB or non_lync and with .csv or .img type or build.tgz"
                elif [[ "${RemoveFolder}$uri" == *"C450HD"* ]]
                then
                    #if the model is C450HD copy also env.bin, logo_image, rootfs.ext4, phone.bin
                    if [[ "${RemoveFolder}$uri" == *"env.bin"* || "${RemoveFolder}$uri" == *"logo_image"* || "${RemoveFolder}$uri" == *"rootfs.ext4"* || "${RemoveFolder}$uri" == *"phone.bin"* ]]
                    then
                    	echo "The Model is C450HD, and the file is for dualBin (env.bin, logo_image, rootfs.ext4, phone.bin)"
                    else
                    	copy_to_local_storage=False
                		echo "Not downloading to local storage the file is not .csv or .img type, Deleting file from artifactory ${RemoveFolder}$uri..."
          				$curl -ks -u $User -X DELETE https://$ARTIFACTORY/${RemoveFolder}$uri
                    fi
                else
                	copy_to_local_storage=False
                	echo "Not downloading to local storage the file is not .csv or .img type, Deleting file from artifactory ${RemoveFolder}$uri..."
          			$curl -ks -u $User -X DELETE https://$ARTIFACTORY/${RemoveFolder}$uri
                fi
            fi
        fi
        if [[ "$copy_to_local_storage" == "True" ]]
        then       
          	#copy file from artifactory to aclnas03
      		echo Download file ${RemoveFolder}$uri to "${DESTINATION}/${TargetPath}$uri"...
        	$curl -R -ks -u $User -X GET https://$ARTIFACTORY/${RemoveFolder}$uri --output "${DESTINATION}/${TargetPath}$uri" || echo "failed to download ${RemoveFolder}$uri"
          	DestSize=`wc -c &lt;"${DESTINATION}/${TargetPath}$uri"`
            local_md5=$(md5sum "${DESTINATION}/${TargetPath}$uri" | cut -d' ' -f1)
            remote_md5=$($curl -ks -u $User -X GET -I https://$ARTIFACTORY/${RemoveFolder}$uri 2&gt;/dev/null | grep X-Checksum-Md5 | cut -d' ' -f2 | cut -c 1-32)
          	if [ "$local_md5" != "$remote_md5" ]; then
                echo local md5: $local_md5 and remote md5 $remote_md5: $uri is different - No delete and exit......
            	exit 1
          	else
            	echo md5 is equal - delete from Artifactory...
            	$curl -ks -u $User -X DELETE https://$ARTIFACTORY/${RemoveFolder}$uri
           	fi
         fi
    # because there is no size = its a folder (its creating a new folder in the local storage)     
    else
    	#check if already exists file with the same name of the directory that we will create (mkdir ${DESTINATION}/${TargetPath}$uri) delete the file 
    	if [[ -f "${DESTINATION}/${TargetPath}$uri" ]]
        then
        	echo "Deleting ${DESTINATION}/${TargetPath}$uri because its a file and we creating Folder with the same name"
        	rm -rf "${DESTINATION}/${TargetPath}$uri"
        fi
        echo -- mkdir "${DESTINATION}/${TargetPath}$uri"
        mkdir "${DESTINATION}/${TargetPath}$uri" || true
        RemoveEachFolder ${RemoveFolder}$uri "${TargetPath}$uri"
        if $curl -ks -u $User -X GET https://$ARTIFACTORY/api/storage/${RemoveFolder}$uri | grep -qF '"children" : [ ],'; then 
          echo ----- Delete the empty directory from Artifactory ${RemoveFolder}$uri...
          $curl -ks -u $User -X DELETE https://$ARTIFACTORY/${RemoveFolder}$uri
        fi
    fi
  done
}

# this is a recursive function - check the last modified date, if old or equel to $oldThan than remove this folder from the Artifactory
function CheckFolder() {
   set -e
  ((deep+=1))
  local Folder=$1
  local Target=$2
  # The date format is: YYYYMMDD (Y=the year, M=Month, D=Day  - Example: 8 Jan 2018 should be 20180108
  lastModified=$($curl -ks -u $User -X GET https://$ARTIFACTORY/api/storage/$Folder?lastModified | grep lastModified | cut -d'"' -f4 | cut -dT -f1 | sed s:-::g)

  if [ "$lastModified" == "" ]; then return 0; fi
  echo "$lastModified -le $oldThan"
  if [ "$lastModified" -le "$oldThan" ]; then
    echo move $Folder
    echo ---------------------
    echo "mkdir -p ${DESTINATION}/$Target"
    mkdir -p "${DESTINATION}/$Target" || true
    RemoveEachFolder $Folder "$Target"
    if $curl -ks -u $User -X GET https://$ARTIFACTORY/api/storage/$Folder | grep -qF '"children" : [ ],'; then 
      echo ----- Delete the empty directory from Artifactory $Folder...
      $curl -ks -u $User -X DELETE https://$ARTIFACTORY/$Folder
    fi
    set +e
    ((deep-=1))
    return 1
  else
    echo $Folder is not old - check its sub folders
    $curl -ks -u $User -X GET https://$ARTIFACTORY/api/storage/$Folder | grep -B 1 -E 'folder.*true' | grep uri | cut -d'"' -f4 | sort -V | while read uri
    do
      echo Execute this function again to check the following directory: ${Folder}$uri
      lastMovedone=$moveDone
      CheckFolder ${Folder}$uri "${Target}$uri"
      moveDone=$?
      echo Deep: $deep *******
      if [[ $moveDone -eq 0 &amp;&amp; $deep -gt 2 ]]
      then 
      	#check if the 2 next folders is older too before break
      	((countExtraFolderCheck[$deep]+=1))
        echo counter: ${countExtraFolderCheck[$deep]} ******
        if [[ ${countExtraFolderCheck[$deep]} -gt 6 ]]
        then
        	echo ---------- Probably all next folder are not older... break from this folder check ------------
            countExtraFolderCheck[$deep]=0
        	break
        fi
      fi
    done
    ((deep-=1))
    return 0
  fi
}

countExtraFolderCheck=(0 0 0 0 0 0 0 0 0 0)
DESTINATION=$(echo $DESTINATION | sed -e 's:\\:/:g')
deep=2

ARTIFACTORY=artifactory
# SBC 
CheckFolder sbc-release/com/ac/sbc/7.2.150/Firmware "7.2.150 Release/Firmware"
CheckFolder sbc-release/com/ac/sbc/7.2.154/Firmware "7.2.150 Release/7.2.154"
CheckFolder sbc-release/com/ac/sbc/7.2.156/Firmware "7.2.150 Release/7.2.156"
CheckFolder sbc-release/com/ac/sbc/7.2.158/Firmware "7.2.150 Release/7.2.158"
CheckFolder sbc-release/com/ac/sbc/7.2.162/Firmware "7.2.150 Release/7.2.162"
CheckFolder sbc-release/com/ac/sbc/7.2.170/Firmware "7.2.170 Release/7.2.170"
CheckFolder sbc-release/com/ac/sbc/7.2.200/Firmware "7.2.200 Release/Firmware"
CheckFolder sbc-release/com/ac/sbc/7.2.202/Firmware "7.2.200 Release/7.2.202"
CheckFolder sbc-release/com/ac/sbc/7.2.204/Firmware "7.2.200 Release/7.2.204"
CheckFolder sbc-release/com/ac/sbc/7.2.204_4jio/Firmware "7.2.200 Release/7.2.204_4jio"
CheckFolder sbc-release/com/ac/sbc/7.2.250/Firmware "7.2.250 Release/Firmware"
CheckFolder sbc-release/com/ac/sbc/7.2.250_MSBR/Firmware "7.2.250 Release/7.2.250_MSBR"
CheckFolder sbc-release/com/ac/sbc/7.2.252/Firmware "7.2.250 Release/7.2.252"
CheckFolder sbc-release/com/ac/sbc/7.2.252_MSBR/Firmware "7.2.250 Release/7.2.252_MSBR"
CheckFolder sbc-release/com/ac/sbc/7.2.254/Firmware "7.2.250 Release/7.2.254"
CheckFolder sbc-release/com/ac/sbc/7.2.254_MSBR/Firmware "7.2.250 Release/7.2.254_MSBR"
CheckFolder sbc-release/com/ac/sbc/7.2.254_MSBR_IKEV2/Firmwar "7.2.250 Release/7.2.254_MSBR_IKEV2" 
CheckFolder sbc-release/com/ac/sbc/7.2.256/Firmware "7.2.250 Release/7.2.256"
CheckFolder sbc-release/com/ac/sbc/7.2.256_2/Firmware "7.2.250 Release/7.2.256_2"
CheckFolder sbc-release/com/ac/sbc/7.2.256_MSBR/Firmware "7.2.250 Release/7.2.256_MSBR"
CheckFolder sbc-release/com/ac/sbc/NextGenCPE/Firmware "NextGenCPE Release/Firmware"
CheckFolder sbc-release/com/ac/sbc/NextGenCPE_R1/Firmware "NextGenCPE Release/NextGenCPE_R1"
CheckFolder sbc-release/com/ac/sbc/NextGenCPE_R3/Firmware "NextGenCPE Release/NextGenCPE_R3"
CheckFolder sbc-release/com/ac/sbc/7.2.258/Firmware "7.2.250 Release/7.2.258"
CheckFolder sbc-release/com/ac/sbc/7.2.260/Firmware "7.2.260 Release/7.2.260"
CheckFolder sbc-release/com/ac/sbc/7.4/Firmware "7.4 Release/7.4"
#All Feature branches
CheckFolder sbc-release/com/ac/sbc/feature/centos7/Firmware "feature/centos7/Firmware" 
CheckFolder sbc-release/com/ac/sbc/feature/fips/Firmware "feature/fips/Firmware" 
CheckFolder sbc-release/com/ac/sbc/feature/PM/Firmware "feature/PM/Firmware" 
CheckFolder sbc-release/com/ac/sbc/feature/voice-ai/Firmware "feature/voice-ai/Firmware" 
CheckFolder sbc-release/com/ac/sbc/feature/websocket/Firmware "feature/websocket/Firmware" 

CheckFolder sbc-release/com/ac/sbc/feature/GRXInternalDSP/Firmware "feature/GRXInternalDSP/Firmware" 
CheckFolder sbc-release/com/ac/sbc/feature/IndianArmyPOC/Firmware "feature/IndianArmyPOC/Firmware" 
CheckFolder sbc-release/com/ac/sbc/feature/JSUpgrades/Firmware "feature/JSUpgrades/Firmware" 
CheckFolder sbc-release/com/ac/sbc/feature/LI/Firmware "feature/LI/Firmware" 
CheckFolder sbc-release/com/ac/sbc/feature/centOS8-7.4/Firmware "feature/centOS8-7.4/Firmware" 
CheckFolder sbc-release/com/ac/sbc/feature/http-client/Firmware "feature/http-client/Firmware" 
#CheckFolder sbc-release/com/ac/sbc/feature/M3100/Firmware "feature/M3100/Firmware" 



#All ISO
CheckFolder sbc-release/com/ac/sbc/ISO/7.2.150 "ISO/7.2.150"
CheckFolder sbc-release/com/ac/sbc/ISO/7.2.152 "ISO/7.2.152"
CheckFolder sbc-release/com/ac/sbc/ISO/7.2.154 "ISO/7.2.154"
CheckFolder sbc-release/com/ac/sbc/ISO/7.2.156 "ISO/7.2.156" 
CheckFolder sbc-release/com/ac/sbc/ISO/7.2.158 "ISO/7.2.158"
CheckFolder sbc-release/com/ac/sbc/ISO/7.2.162 "ISO/7.2.162" 
CheckFolder sbc-release/com/ac/sbc/ISO/7.2.170 "ISO/7.2.170" 
CheckFolder sbc-release/com/ac/sbc/ISO/7.2.200 "ISO/7.2.200" 
CheckFolder sbc-release/com/ac/sbc/ISO/7.2.202 "ISO/7.2.202" 
CheckFolder sbc-release/com/ac/sbc/ISO/7.2.250 "ISO/7.2.250" 
CheckFolder sbc-release/com/ac/sbc/ISO/7.2.252_1 "ISO/7.2.252_1" 
CheckFolder sbc-release/com/ac/sbc/ISO/7.2.252_AWS "ISO/7.2.252_AWS"  
CheckFolder sbc-release/com/ac/sbc/ISO/7.2.252 "ISO/7.2.252" 
CheckFolder sbc-release/com/ac/sbc/ISO/7.2.254 "ISO/7.2.254" 
#All VSSBC
CheckFolder sbc-release/com/ac/sbc/VSSBC/7.2.156 "VSSBC/7.2.156" 
CheckFolder sbc-release/com/ac/sbc/VSSBC/7.2.204 "VSSBC/7.2.204"
CheckFolder sbc-release/com/ac/sbc/VSSBC/7.2.250 "VSSBC/7.2.250"
CheckFolder sbc-release/com/ac/sbc/VSSBC/7.2.252_1 "VSSBC/7.2.252_1" 
CheckFolder sbc-release/com/ac/sbc/VSSBC/7.2.252_AWS "VSSBC/7.2.252_AWS"  
CheckFolder sbc-release/com/ac/sbc/VSSBC/7.2.252 "VSSBC/7.2.252" 
CheckFolder sbc-release/com/ac/sbc/VSSBC/7.2.254 "VSSBC/7.2.254" 
# Other Projects
CheckFolder sbc-release/com/ac/sbc/VoiceAiConnector "VoiceAiConnector"
CheckFolder dsp-release/com/ac/dsp/Gen5/710 "DSP/Gen5/710"
CheckFolder dsp-release/com/ac/dsp/Gen5/722 "DSP/Gen5/722"
CheckFolder dsp-release/com/ac/dsp/Gen5/723 "DSP/Gen5/723"
# Calculate the date we are going to delete for IPPPhone (only 30 days)
countExtraFolderCheck=(0 0 0 0 0 0 0 0 0 0)
deep=1
OLD=30
oldThan=$(date +"%Y%m%d" -d "-$OLD days")
CheckFolder ipp-release/com/ac/ipp/non_lync "IPP/non_lync" 
CheckFolder ipp-release/com/ac/ipp/SFB "IPP/SFB" 
CheckFolder ipp-release/com/ac/ipp/Android/ "IPP/Android" 
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.Mailer plugin="mailer@1.32">
      <recipients>ben.magriso</recipients>
      <dontNotifyEveryUnstableBuild>false</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
  </publishers>
  <buildWrappers>
    <EnvInjectBuildWrapper plugin="envinject@2.3.0">
      <info>
        <propertiesContent>ARTIFACTORY_USER=jenkins</propertiesContent>
        <secureGroovyScript plugin="script-security@1.71">
          <script/>
          <sandbox>false</sandbox>
        </secureGroovyScript>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
    </EnvInjectBuildWrapper>
    <EnvInjectPasswordWrapper plugin="envinject@2.3.0">
      <injectGlobalPasswords>false</injectGlobalPasswords>
      <maskPasswordParameters>true</maskPasswordParameters>
      <passwordEntries>
        <EnvInjectPasswordEntry>
          <name>ARTIFACTORY_PASSWORD</name>
          <value>{AQAAABAAAAAQpsaYQTBiXD/Z9zz1QoupOisfS7yZIvZo+qlYu2q5f2U=}</value>
        </EnvInjectPasswordEntry>
      </passwordEntries>
    </EnvInjectPasswordWrapper>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@2.0.3">
      <template>#${BUILD_NUMBER}</template>
      <descriptionTemplate/>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>