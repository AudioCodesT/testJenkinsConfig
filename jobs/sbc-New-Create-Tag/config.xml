<?xml version="1.1" encoding="UTF-8" standalone="no"?><project>
  <actions/>
  <description/>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.0.10"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>60</daysToKeep>
        <numToKeep>200</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.27">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>Branch</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit/>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@4.2.2">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <refspec>+refs/heads/*:refs/remotes/origin/* +refs/tags/*:refs/tags/* +refs/notes/review:refs/notes/review</refspec>
        <url>ssh://jenkins@test-gerrit:29418/TP/GWApp</url>
        <credentialsId>fef9964a-ddb7-4ce6-a445-a99a9e9802c0</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>${GERRIT_BRANCH}</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.CloneOption>
        <shallow>false</shallow>
        <noTags>false</noTags>
        <reference/>
        <depth>20</depth>
        <honorRefspec>false</honorRefspec>
      </hudson.plugins.git.extensions.impl.CloneOption>
    </extensions>
  </scm>
  <assignedNode>test-Sanjer</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTrigger plugin="gerrit-trigger@2.30.5">
      <spec/>
      <gerritProjects>
        <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
          <compareType>PLAIN</compareType>
          <pattern>TP/GWApp</pattern>
          <branches>
            <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
              <compareType>ANT</compareType>
              <pattern>7.*</pattern>
            </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
            <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
              <compareType>ANT</compareType>
              <pattern>NextGenCPE*</pattern>
            </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
            <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
              <compareType>ANT</compareType>
              <pattern>feature/*</pattern>
            </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
          </branches>
          <disableStrictForbiddenFileVerification>false</disableStrictForbiddenFileVerification>
        </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
      </gerritProjects>
      <dynamicGerritProjects class="empty-list"/>
      <skipVote>
        <onSuccessful>false</onSuccessful>
        <onFailed>false</onFailed>
        <onUnstable>false</onUnstable>
        <onNotBuilt>false</onNotBuilt>
      </skipVote>
      <silentMode>false</silentMode>
      <notificationLevel/>
      <silentStartMode>false</silentStartMode>
      <escapeQuotes>true</escapeQuotes>
      <nameAndEmailParameterMode>PLAIN</nameAndEmailParameterMode>
      <dependencyJobsNames/>
      <commitMessageParameterMode>BASE64</commitMessageParameterMode>
      <changeSubjectParameterMode>PLAIN</changeSubjectParameterMode>
      <commentTextParameterMode>BASE64</commentTextParameterMode>
      <buildStartMessage/>
      <buildFailureMessage/>
      <buildSuccessfulMessage/>
      <buildUnstableMessage/>
      <buildNotBuiltMessage/>
      <buildUnsuccessfulFilepath/>
      <customUrl/>
      <serverName>test-gerrit</serverName>
      <triggerOnEvents>
        <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.events.PluginChangeMergedEvent/>
      </triggerOnEvents>
      <dynamicTriggerConfiguration>false</dynamicTriggerConfiguration>
      <triggerConfigURL/>
      <triggerInformationAction/>
    </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>git config --global user.name "Jenkins"
git config --global user.email devops@audiocodes.com
Artifact=artifactory
Repo=sbc-release

function createSubModuleTag() {
  echo create a new TAG for the $SubModule submodule too
  SubModule=$1
  NEWTAGsub=$2
  if [ `git submodule status OpenSource/$SubModule | wc -l` == 1 ]; then
    NEWTAG=$NEWTAGsub
    commit_sha1=`git ls-files --stage OpenSource/$SubModule | cut -f2 -d ' '`
    echo Check if this Images existing in the Artifactory already - if not, create a TAG
    if ! curl -ks "https://$Artifact/api/search/prop?vcs.revision=$commit_sha1&amp;repos=$Repo" | grep -q uri; then
      curl -nk --anyauth -X PUT --header "Content-Type: application/json;charset=UTF-8" \
        https://test-gerrit/a/projects/TP%2fOpenSource%2f$SubModule/tags/$NEWTAG \
        -d "
        {
          \"message\": \"Jenkins auto tag after $LastUser commit\",
          \"revision\": \"$commit_sha1\"
        }"
    fi
  fi
}

function createTag {
  if git log --pretty=format:%B -n1 $LastSha1 | grep "DevOps admin change"; then
    return
  fi
  
  RealLastTag=$LastTag
  # If this is a first TAG in Feature branch
  if [ ! -z $PreLastTag ]; then LastTag=$PreLastTag; PreLastTag=""; fi

  FixNum=`echo $LastTag | cut -d. -f4`
  if [ -z $FixNum ]; then FixNum=0; fi
  Fix=`expr 1 + $FixNum`
  NEWTAG=`echo $LastTag | cut -d. -f1-3`.`printf "%03d" $Fix`
  #NEWTAG=`echo $LastTag | sed -r 's/(.*)\.[^\d]+$/\1/'`.`echo $LastTag | awk -F. '{print $NF+1}'`
  ##git tag -a -m "Jenkins auto tag after $LastUser commit" $NEWTAG $LastSha1
  ##git push origin $NEWTAG
  ##curl -k "https://rebaser/build/job/GWApp-stats/buildWithParameters?delay=0sec&amp;token=stats&amp;Baseline=$NEWTAG" || echo Access Rebaser failed
  SubModules=`git diff --name-only $RealLastTag $LastSha1 -- OpenSource | sed 's:OpenSource/::; s:/.*::' | sort -u`
  LastTag=$NEWTAG
  ##for SubMod in `echo $SubModules`; do createSubModuleTag $SubMod $NEWTAG; done
}

if [ -z "$GERRIT_BRANCH" ]; then exit 0; fi
git clean -fdx
sleep 20
git log -4 --decorate --oneline origin/$GERRIT_BRANCH
if git log --decorate --oneline --no-color -1 origin/$GERRIT_BRANCH | grep -q tag:; then
  echo This change was done ... exit without error
  exit 0
fi

echo Wait 5 minutes before you create a TAG
sleep 300

git fetch --tags
errorFlag=0
# Check every branch if they are a new commit after the last created TAG

echo Check branch $GERRIT_BRANCH if exist a new commit after the last TAG...
if [ $(git describe --tags --first-parent origin/$GERRIT_BRANCH | grep - | wc -l) == 0 ]; then continue; fi
git checkout -f origin/$GERRIT_BRANCH
echo Find the last TAG name...
LastTag=`git tag --points-at $(git rev-list -n1 $(git describe --tags --abbrev=0 --first-parent origin/$GERRIT_BRANCH)) --sort=-taggerdate | head -1`
#LastTag=`git tag --points-at $(git describe --tags --abbrev=0 --first-parent origin/$GERRIT_BRANCH) --sort=-taggerdate`

PreLastTag=""

if [[ $GERRIT_BRANCH =~ "feature" ]]; then
  LastMergedTag=`git tag --points-at $(git log --merges -n1 --pretty=format:%H)^2 --sort=-taggerdate 2&gt;/dev/null | head -1`
  # If no last merged TAG exist, give the last TAG found in this branch
  if [ -z "$LastMergedTag" ]; then
    echo No last merged TAG exist ......
    LastMergedTag=$LastTag
  fi

  LastMergedMINOR=$(echo $LastMergedTag | cut -d. -f3)
  LastMINOR=$(echo $LastTag | cut -d. -f3)
  echo Last merged TAG is $LastMergedTag and last TAG is $LastTag 
  if [ "$LastMINOR" -gt "$LastMergedMINOR" ]; then LastMergedMINOR=$LastMINOR; fi
  echo Use this MINOR for the next TAG $LastMergedMINOR in case no TAG exist for this feature branch yet

  # Find the first 2 characters of the feature name - change them to uppercase
  IDs=$(echo ${GERRIT_BRANCH^^} | awk -F/ '{print $NF}' | cut -c1-2)
  LastMergedMAJOR=$(echo $LastMergedTag | cut -c1-4)
  LastMAJOR=$(echo $LastTag | cut -c1-4)
  if [[ (! "$LastTag" =~ $LastMergedMAJOR$IDs\. || "$LastMINOR" -ne "$LastMergedMINOR") ]]; then
    # If it is the first TAG in this feature branch or a newer branch was merged to
    # Example: 7.20A.252.123 --&gt; 7.20FI.252.001 (For Fips)
    if [[ "$LastMergedTag" =~  [0-9]\.[0-9][0-9].*\.[0-9]+\.[0-9]+ ]]; then
      if [ "$LastMAJOR" &gt; "$LastMergedMAJOR" ]; then
        PreLastTag=$LastMAJOR$IDs.$LastMINOR
        if [[ "$LastTag" =~ "$IDs" ]]; then PreLastTag=""; fi
      else
        PreLastTag=$LastMergedMAJOR$IDs.$LastMergedMINOR
      fi
      if [ -n "$PreLastTag" ]; then
        if git rev-parse $PreLastTag.001 &gt;/dev/null 2&gt;&amp;1; then
          echo TAG $PreLastTag.001 already exist, check this branch $GERRIT_BRANCH ... exit
          errorFlag=1
          continue
        fi
      fi
    else
      echo Found last merged TAG: $LastMergedTag, is not in the right format, check this branch $GERRIT_BRANCH ... exit
      errorFlag=1
      continue
    fi
  fi
fi

# Check every new commit - if the user was changed, create a new TAG by executing 'createTag'
LastUser=""
while IFS=_ read -r Sha1 User When
do
  LastSubmitter=$(git show refs/notes/review:${Sha1:0:2}/${Sha1:2} | sed -nE 's/^Submitted-by: (.*) &lt;.*$/\1/p')
  if [ "$LastSubmitter" != "$User" ]; then echo ----------------- $LastSubmitter not equel $User -----------------------; fi
  if [ "$LastSubmitter" != "" ]; then User=$LastSubmitter; fi
  if [ "$LastUser" != "" ] &amp;&amp; [ "$LastUser" != "$User" ]; then createTag; fi
  LastUser=$User
  LastSha1=$Sha1
  LastWhen=`echo $When | cut -d" " -f1`
done &lt;&lt;&lt; "$(git log --first-parent --reverse --date=raw --pretty=format:"%H_%cn_%cd" $LastTag..origin/$GERRIT_BRANCH)"

# If $LastWhen was not found, go to the next branch
if [[ -n $LastWhen &amp;&amp; -n $LastSha1 ]]; then createTag; fi

exit $errorFlag
</command>
      <unstableReturn>2</unstableReturn>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.plugins.emailext.ExtendedEmailPublisher plugin="email-ext@2.61">
      <recipientList>$DEFAULT_RECIPIENTS</recipientList>
      <configuredTriggers>
        <hudson.plugins.emailext.plugins.trigger.FailureTrigger>
          <email>
            <recipientList>yossim shuky.riechard</recipientList>
            <subject>$PROJECT_DEFAULT_SUBJECT</subject>
            <body>$PROJECT_DEFAULT_CONTENT</body>
            <recipientProviders/>
            <attachmentsPattern/>
            <attachBuildLog>true</attachBuildLog>
            <compressBuildLog>false</compressBuildLog>
            <replyTo>$PROJECT_DEFAULT_REPLYTO</replyTo>
            <contentType>project</contentType>
          </email>
        </hudson.plugins.emailext.plugins.trigger.FailureTrigger>
      </configuredTriggers>
      <contentType>default</contentType>
      <defaultSubject>$DEFAULT_SUBJECT</defaultSubject>
      <defaultContent>$DEFAULT_CONTENT</defaultContent>
      <attachmentsPattern/>
      <presendScript>$DEFAULT_PRESEND_SCRIPT</presendScript>
      <postsendScript>$DEFAULT_POSTSEND_SCRIPT</postsendScript>
      <attachBuildLog>false</attachBuildLog>
      <compressBuildLog>false</compressBuildLog>
      <replyTo>$DEFAULT_REPLYTO</replyTo>
      <saveOutput>false</saveOutput>
      <disabled>false</disabled>
    </hudson.plugins.emailext.ExtendedEmailPublisher>
    <com.chikli.hudson.plugin.naginator.NaginatorPublisher plugin="naginator@1.17.2">
      <regexpForRerun>Try again later after 300 seconds</regexpForRerun>
      <rerunIfUnstable>true</rerunIfUnstable>
      <rerunMatrixPart>false</rerunMatrixPart>
      <checkRegexp>true</checkRegexp>
      <regexpForMatrixStrategy>TestParent</regexpForMatrixStrategy>
      <delay class="com.chikli.hudson.plugin.naginator.FixedDelay">
        <delay>300</delay>
      </delay>
      <maxSchedule>4</maxSchedule>
    </com.chikli.hudson.plugin.naginator.NaginatorPublisher>
  </publishers>
  <buildWrappers>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@2.0.3">
      <template>#${BUILD_NUMBER}, ${BUILD_LOG_REGEX, regex="^.*NEWTAG=(\S*)",substText="$1",showTruncatedLines=false}</template>
      <descriptionTemplate/>
      <runAtStart>false</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>