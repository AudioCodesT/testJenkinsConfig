<?xml version="1.1" encoding="UTF-8" standalone="no"?><project>
  <actions/>
  <description>trigger by new tag&#13;
run and publish eslint&#13;
add version number to UI and to Session-manager (and to MongoDB)&#13;
git archive 3 folders and upload to artifactory under tag folder</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.0.10"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>60</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.27">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>GERRIT_REFNAME</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit/>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@4.2.2">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <refspec>${GERRIT_REFNAME}</refspec>
        <url>ssh://jenkins@test-gerrit:29418/TP/Tools/VoiceAIConnector</url>
        <credentialsId>fef9964a-ddb7-4ce6-a445-a99a9e9802c0</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>${GERRIT_REFNAME}</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.CleanBeforeCheckout>
        <deleteUntrackedNestedRepositories>false</deleteUntrackedNestedRepositories>
      </hudson.plugins.git.extensions.impl.CleanBeforeCheckout>
      <hudson.plugins.git.extensions.impl.BuildChooserSetting>
        <buildChooser class="com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTriggerBuildChooser" plugin="gerrit-trigger@2.30.5">
          <separator>#</separator>
        </buildChooser>
      </hudson.plugins.git.extensions.impl.BuildChooserSetting>
    </extensions>
  </scm>
  <assignedNode>VoiceAI-build</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTrigger plugin="gerrit-trigger@2.30.5">
      <spec/>
      <gerritProjects>
        <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
          <compareType>PLAIN</compareType>
          <pattern>TP/Tools/VoiceAIConnector</pattern>
          <branches>
            <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
              <compareType>ANT</compareType>
              <pattern>refs/tags/**</pattern>
            </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
          </branches>
          <disableStrictForbiddenFileVerification>false</disableStrictForbiddenFileVerification>
        </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
      </gerritProjects>
      <dynamicGerritProjects class="empty-list"/>
      <skipVote>
        <onSuccessful>false</onSuccessful>
        <onFailed>false</onFailed>
        <onUnstable>false</onUnstable>
        <onNotBuilt>false</onNotBuilt>
      </skipVote>
      <silentMode>false</silentMode>
      <notificationLevel/>
      <silentStartMode>false</silentStartMode>
      <escapeQuotes>true</escapeQuotes>
      <nameAndEmailParameterMode>PLAIN</nameAndEmailParameterMode>
      <dependencyJobsNames/>
      <commitMessageParameterMode>BASE64</commitMessageParameterMode>
      <changeSubjectParameterMode>PLAIN</changeSubjectParameterMode>
      <commentTextParameterMode>BASE64</commentTextParameterMode>
      <buildStartMessage/>
      <buildFailureMessage/>
      <buildSuccessfulMessage/>
      <buildUnstableMessage/>
      <buildNotBuiltMessage/>
      <buildUnsuccessfulFilepath/>
      <customUrl/>
      <serverName>test-gerrit</serverName>
      <triggerOnEvents>
        <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.events.PluginRefUpdatedEvent/>
      </triggerOnEvents>
      <dynamicTriggerConfiguration>false</dynamicTriggerConfiguration>
      <triggerConfigURL/>
      <triggerInformationAction/>
    </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTrigger>
  </triggers>
  <concurrentBuild>true</concurrentBuild>
  <customWorkspace>/home/centos/jenkinsslave/workspace/VoiceAI</customWorkspace>
  <builders>
    <hudson.tasks.Shell>
      <command>## Create .netrc
[[ -f ~/.netrc ]] &amp;&amp; rm ~/.netrc
echo "machine docker-voice-ai.artifactory.corp.audiocodes.com" &gt;&gt; ~/.netrc
echo "login jenkins" &gt;&gt; ~/.netrc
echo "password ${jenkinsPass}" &gt;&gt; ~/.netrc
echo "machine docker-voice-ai.test-artifactory.corp.audiocodes.com" &gt;&gt; ~/.netrc
echo "login jenkins" &gt;&gt; ~/.netrc
echo "password ${jenkinsPass}" &gt;&gt; ~/.netrc
</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>## Runtime vars

#git fetch --tags

OLDTAG=$(git describe --first-parent --tags --abbrev=0 HEAD^)
#BRANCH=$(git branch -r --contains  ${OLDTAG} | grep -v "HEAD" | awk -F/ '{print $NF}' | sort | tail -n 1)
NEWTAG=$(echo $GERRIT_REFNAME | awk -F/ '{print $NF}')
TAGVER=${NEWTAG::3}

## Set branch by $version
case $NEWTAG in
    1.1*|1.2*)
    	BRANCH="1.2"
        ;;
    1.3*|1.4*)
    	BRANCH="1.4"
        ;;
    1.5*|1.6*)
        BRANCH="1.6"
        ;;
    1.7*|1.8*)
        BRANCH="1.8"
        ;;
esac

AuthorCommitter=$(git log --first-parent --pretty=format:"%aN%n%cN" $OLDTAG..HEAD | sort -u | sed s/$/\;/g)

## change in some files some parameters to build number
cd ${WORKSPACE}
echo "{\"version\": \"${NEWTAG}\"}" &gt; version.json
#sed -i -- "s/%version%/${BUILD_NUMBER}/g" ${WORKSPACE}/session-manager/config.ts
#sed -i -- "s/%version%/${BUILD_NUMBER}/g" ${WORKSPACE}/ui/config.ts

### Build the project
## Set docker vars
DOCKER_URL="docker-voice-ai.artifactory.corp.audiocodes.com"
DOCKER_REG="${DOCKER_URL}"
# Used in build.sh
export DOCKER_REG_PREFIX="${DOCKER_URL}/"
export GIT_BRANCH=$BRANCH

## Login to docker registry on Artifactory
echo ${jenkinsPass} | docker login -u jenkins --password-stdin ${DOCKER_REG}

## Pull latest images from Artifactory &amp; get their hashes
echo "Pull latest images from Artifactory (those that are tagged with \${BRANCH})."
remoteImgs=$(curl -u jenkins:${jenkinsPass} -k https://${DOCKER_URL}/v2/_catalog | jq -r '.[][]')

## If there is no BRANCH tag yet on artifactory - use previous branch
ARTITAG=$(curl -k -u jenkins:${jenkinsPass} https://docker-voice-ai.artifactory.corp.audiocodes.com/v2/vag-version/tags/list | jq -r '.tags[]')
LATESTTAG=$( echo $ARTITAGS | sort | tail -n 1)

[[ "$(echo $ARTITAGS | grep -q $BRANCH)" == "" ]] &amp;&amp; PULLBRANCH="${LATESTTAG}" || PULLBRANCH="${BRANCH}"

#if [[ $( "${BRANCH}" != "${LATESTTAG}" ) ]]; then
#    PULLBRANCH="${LATESTTAG}"
#else
#    PULLBRANCH="${BRANCH}"
#fi

HASHES=""

for ri in ${remoteImgs}; do
    docker pull ${DOCKER_REG}/${ri}:${PULLBRANCH}
    docker tag ${DOCKER_REG}/${ri}:${PULLBRANCH} ${ri}:${BRANCH}

    hash=$(docker images ${ri}:${BRANCH} --format "{{.ID}}")
    HASHES="${HASHES}${hash} "
done

## Run build script
cd ${WORKSPACE}
sh build.sh
ret_value=$?

echo "script Return Value: $ret_value"

if [[ "$ret_value" -ne "0" ]]
then
	exit 1
fi

### Pushing docker images to Artifactory
echo "Pushing Docker images to Artifactory."

## Login to docker registry
echo "Step 1 - Login to docker registry."
echo ${jenkinsPass} | docker login -u jenkins --password-stdin ${DOCKER_URL}

echo "Step 2 - Tagging &amp; pushing images to Artifactory."
# only push images that are new (Were not pulled from Artifactory)
## Also push image with ${BRANCH} tag
# Check if need to push with tag ${BRANCH} to Artifactory:
# If highest tag on Artifactory is lower then ${NEWTAG},
# we also push docker images with tag ${BRANCH}
for outcomeImage in $(docker images vag-* --format "{{.Repository}}:{{.Tag}}:{{.ID}}" | grep ${BRANCH} | grep -v vag-common); do
    imageName=$(echo $outcomeImage | gawk -F: '{print $1}')
    imageID=$(echo $outcomeImage | gawk -F: '{print $3}')
    echo "***************************************************"
    #docker images vag-*
    #imageID=$(docker images vag-* | grep "${BRANCH}" | grep "$dockerImage" | gawk '{print $3}')

    if [[ "$(echo $HASHES | grep -q ${imageID})" == "" ]]; then
        docker tag ${imageID} ${DOCKER_REG}/${imageName}:${NEWTAG}
        docker push ${DOCKER_REG}/${imageName}:${NEWTAG}

        allTags=$(curl -u jenkins:$jenkinsPass -k https://$DOCKER_URL/v2/$imageName/tags/list | jq '.tags[]')
        highTag=$(echo "$allTags" | grep -F ${TAGVER} | grep -v -e "\-g.*" | sort -t'.' -n -k3 | tail -n 1)
        highTag=${highTag:1:-1}
        higherTag=$(echo -e "$highTag\n${NEWTAG}" | sort -t'.' -n -k3 | tail -n 1)
        if [[ "$higherTag" == "${NEWTAG}" ]]; then
            docker tag ${imageID} ${DOCKER_REG}/${imageName}:${BRANCH}
            docker push ${DOCKER_REG}/${imageName}:${BRANCH}
        fi
    else
        echo "*** No change in docker image \"${imageName}\". Image not pushed to repository. ***"
    fi
done

# Clean ALL docker objects
#echo "Step 3 - Removing ALL Docker objects."
#docker rm --force $(docker ps -a -q) &gt; /dev/null 2&gt;&amp;1 || true
#docker system prune --all --volumes --force

echo "Finished docker push to Artifactory."


## Export env vars
echo NEWTAG=${NEWTAG} &gt; VoiceAI.env
echo BRANCH=${BRANCH} &gt;&gt; VoiceAI.env</command>
    </hudson.tasks.Shell>
    <EnvInjectBuilder plugin="envinject@2.3.0">
      <info>
        <propertiesFilePath>VoiceAI.env</propertiesFilePath>
      </info>
    </EnvInjectBuilder>
  </builders>
  <publishers>
    <io.jenkins.plugins.analysis.core.steps.IssuesRecorder plugin="warnings-ng@7.3.0">
      <analysisTools>
        <io.jenkins.plugins.analysis.warnings.EsLint>
          <id/>
          <name/>
          <pattern>eslint.xml</pattern>
          <reportEncoding/>
          <skipSymbolicLinks>false</skipSymbolicLinks>
        </io.jenkins.plugins.analysis.warnings.EsLint>
      </analysisTools>
      <sourceCodeEncoding/>
      <sourceDirectory/>
      <ignoreQualityGate>false</ignoreQualityGate>
      <ignoreFailedBuilds>true</ignoreFailedBuilds>
      <referenceJobName>-</referenceJobName>
      <failOnError>false</failOnError>
      <healthy>0</healthy>
      <unhealthy>0</unhealthy>
      <minimumSeverity plugin="analysis-model-api@7.0.4">
        <name>LOW</name>
      </minimumSeverity>
      <filters/>
      <isEnabledForFailure>false</isEnabledForFailure>
      <isAggregatingResults>false</isAggregatingResults>
      <isBlameDisabled>false</isBlameDisabled>
      <isForensicsDisabled>false</isForensicsDisabled>
      <qualityGates/>
      <trendChartType>AGGREGATION_TOOLS</trendChartType>
    </io.jenkins.plugins.analysis.core.steps.IssuesRecorder>
    <com.chikli.hudson.plugin.naginator.NaginatorPublisher plugin="naginator@1.17.2">
      <regexpForRerun/>
      <rerunIfUnstable>false</rerunIfUnstable>
      <rerunMatrixPart>false</rerunMatrixPart>
      <checkRegexp>false</checkRegexp>
      <regexpForMatrixStrategy>TestParent</regexpForMatrixStrategy>
      <delay class="com.chikli.hudson.plugin.naginator.FixedDelay">
        <delay>5</delay>
      </delay>
      <maxSchedule>1</maxSchedule>
    </com.chikli.hudson.plugin.naginator.NaginatorPublisher>
    <hudson.plugins.parameterizedtrigger.BuildTrigger plugin="parameterized-trigger@2.35.2">
      <configs>
        <hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
          <configs>
            <hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
              <properties>NEWTAG=${NEWTAG}
BRANCH=${BRANCH}</properties>
              <textParamValueOnNewLine>false</textParamValueOnNewLine>
            </hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
          </configs>
          <projects>VAG-copy-to-NetApp</projects>
          <condition>UNSTABLE_OR_BETTER</condition>
          <triggerWithNoParameters>false</triggerWithNoParameters>
          <triggerFromChildProjects>false</triggerFromChildProjects>
        </hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
        <hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
          <configs>
            <hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
              <properties>version=${NEWTAG}</properties>
              <textParamValueOnNewLine>false</textParamValueOnNewLine>
            </hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
          </configs>
          <projects>VAG-push-to-ECR</projects>
          <condition>SUCCESS</condition>
          <triggerWithNoParameters>false</triggerWithNoParameters>
          <triggerFromChildProjects>false</triggerFromChildProjects>
        </hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
        <hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
          <configs>
            <hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
              <properties>version=${BRANCH}</properties>
              <textParamValueOnNewLine>false</textParamValueOnNewLine>
            </hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
          </configs>
          <projects>VAG-push-to-ECR</projects>
          <condition>SUCCESS</condition>
          <triggerWithNoParameters>false</triggerWithNoParameters>
          <triggerFromChildProjects>false</triggerFromChildProjects>
        </hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
      </configs>
    </hudson.plugins.parameterizedtrigger.BuildTrigger>
    <hudson.tasks.Mailer plugin="mailer@1.32">
      <recipients>ben.magriso yuvaly orgad.shaneh</recipients>
      <dontNotifyEveryUnstableBuild>false</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
  </publishers>
  <buildWrappers>
    <org.jenkinsci.plugins.credentialsbinding.impl.SecretBuildWrapper plugin="credentials-binding@1.22">
      <bindings class="empty-list"/>
    </org.jenkinsci.plugins.credentialsbinding.impl.SecretBuildWrapper>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.9"/>
    <hudson.plugins.ansicolor.AnsiColorBuildWrapper plugin="ansicolor@0.6.2">
      <colorMapName>xterm</colorMapName>
    </hudson.plugins.ansicolor.AnsiColorBuildWrapper>
    <org.jfrog.hudson.generic.ArtifactoryGenericConfigurator plugin="artifactory@3.6.1">
      <deployerDetails>
        <artifactoryName>artifactory2-pro</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <stagingPlugin/>
      </deployerDetails>
      <resolverDetails>
        <artifactoryName>artifactory2-pro</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <stagingPlugin/>
      </resolverDetails>
      <deployerCredentialsConfig>
        <credentialsId/>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </deployerCredentialsConfig>
      <resolverCredentialsConfig>
        <credentialsId/>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </resolverCredentialsConfig>
      <useSpecs>true</useSpecs>
      <uploadSpec>
        <spec>{
    "files": [
        {
            "pattern": "common/setup-cert.sh",
            "target": "docker-voice-ai-files/"
        },
        {
            "pattern": "docker-compose-*.yml",
            "target": "docker-voice-ai-files/"
        },
        {
            "pattern": "docker/setup-machine.sh",
            "target": "docker-voice-ai-files/"
        },
        {
            "pattern": "utils/configLoader/config.sample.json",
            "target": "docker-voice-ai-files/"
        }
    ]
}</spec>
      </uploadSpec>
      <downloadSpec>
        <spec/>
      </downloadSpec>
      <deployPattern>${WORKSPACE}/common/setup-cert.sh
${WORKSPACE}/docker-compose-*.yml
${WORKSPACE}/docker/setup-machine.sh
${WORKSPACE}/docker/config.json.sample
</deployPattern>
      <resolvePattern/>
      <deploymentProperties/>
      <deployBuildInfo>true</deployBuildInfo>
      <includeEnvVars>false</includeEnvVars>
      <envVarsPatterns>
        <includePatterns/>
        <excludePatterns>*password*,*secret*,*key*</excludePatterns>
      </envVarsPatterns>
      <discardOldBuilds>false</discardOldBuilds>
      <discardBuildArtifacts>true</discardBuildArtifacts>
      <asyncBuildRetention>false</asyncBuildRetention>
      <multiConfProject>false</multiConfProject>
      <customBuildName/>
      <overrideBuildName>false</overrideBuildName>
    </org.jfrog.hudson.generic.ArtifactoryGenericConfigurator>
    <EnvInjectPasswordWrapper plugin="envinject@2.3.0">
      <injectGlobalPasswords>true</injectGlobalPasswords>
      <maskPasswordParameters>true</maskPasswordParameters>
      <passwordEntries>
        <EnvInjectPasswordEntry>
          <name>jenkinsPass</name>
          <value>{AQAAABAAAAAQ++kJRV5maC2YJoCuRtXyswO7XT//+YXz+Ce2rMAV+JQ=}</value>
        </EnvInjectPasswordEntry>
      </passwordEntries>
    </EnvInjectPasswordWrapper>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@2.0.3">
      <template>#${BUILD_NUMBER}__${NEWTAG}</template>
      <descriptionTemplate/>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>