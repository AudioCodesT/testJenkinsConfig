<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>trigger by new tag&#xd;
run and publish eslint&#xd;
add version number to UI and to Session-manager (and to MongoDB)&#xd;
git archive 3 folders and upload to artifactory under tag folder</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.0.10"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>60</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.27">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>GERRIT_REFNAME</name>
          <description></description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@4.0.0">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>ssh://jenkins@test-gerrit:29418/TP/Tools/VoiceAIConnector</url>
        <credentialsId>fef9964a-ddb7-4ce6-a445-a99a9e9802c0</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>${GERRIT_REFNAME}</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.CleanBeforeCheckout/>
      <hudson.plugins.git.extensions.impl.BuildChooserSetting>
        <buildChooser class="com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTriggerBuildChooser" plugin="gerrit-trigger@2.27.5">
          <separator>#</separator>
        </buildChooser>
      </hudson.plugins.git.extensions.impl.BuildChooserSetting>
    </extensions>
  </scm>
  <assignedNode>VoiceAI-build</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTrigger plugin="gerrit-trigger@2.27.5">
      <spec></spec>
      <gerritProjects>
        <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
          <compareType>PLAIN</compareType>
          <pattern>TP/Tools/VoiceAIConnector</pattern>
          <branches>
            <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
              <compareType>ANT</compareType>
              <pattern>refs/tags/**</pattern>
            </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
          </branches>
          <disableStrictForbiddenFileVerification>false</disableStrictForbiddenFileVerification>
        </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
      </gerritProjects>
      <dynamicGerritProjects class="empty-list"/>
      <skipVote>
        <onSuccessful>false</onSuccessful>
        <onFailed>false</onFailed>
        <onUnstable>false</onUnstable>
        <onNotBuilt>false</onNotBuilt>
      </skipVote>
      <silentMode>false</silentMode>
      <notificationLevel></notificationLevel>
      <silentStartMode>false</silentStartMode>
      <escapeQuotes>true</escapeQuotes>
      <nameAndEmailParameterMode>PLAIN</nameAndEmailParameterMode>
      <dependencyJobsNames></dependencyJobsNames>
      <commitMessageParameterMode>BASE64</commitMessageParameterMode>
      <changeSubjectParameterMode>PLAIN</changeSubjectParameterMode>
      <commentTextParameterMode>BASE64</commentTextParameterMode>
      <buildStartMessage></buildStartMessage>
      <buildFailureMessage></buildFailureMessage>
      <buildSuccessfulMessage></buildSuccessfulMessage>
      <buildUnstableMessage></buildUnstableMessage>
      <buildNotBuiltMessage></buildNotBuiltMessage>
      <buildUnsuccessfulFilepath></buildUnsuccessfulFilepath>
      <customUrl></customUrl>
      <serverName>test-gerrit</serverName>
      <triggerOnEvents>
        <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.events.PluginRefUpdatedEvent/>
      </triggerOnEvents>
      <dynamicTriggerConfiguration>false</dynamicTriggerConfiguration>
      <triggerConfigURL></triggerConfigURL>
      <triggerInformationAction/>
    </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>## Prepare docker login to unsecure registry

# Set vars
DOCKER_URL=&quot;docker-voice-ai.artifactory.corp.audiocodes.com&quot;
DOCKER_REG=&quot;${DOCKER_URL}&quot;

if [[ -f /etc/docker/daemon.json ]]; then
    if [[ $(grep -e ${DOCKER_URL} /etc/docker/daemon.json) ]]; then
        echo &quot;Insecure registries already configured&quot;
    else
        echo &quot;Found docker deamon config&quot;
        if [[ ! $(grep -e &quot;insecure-registries&quot; /etc/default/docker) ]]; then
            echo &quot;Inserting line for insecure registries&quot;
            sudo sed -i $&apos;/^{$/a \\\t&quot;insecure-registries&quot; : [&quot;docker-voice-ai.test-artifactory&quot;, &quot;docker-voice-ai.artifactory&quot;, &quot;docker-voice-ai.test-artifactory.corp.audiocodes.com&quot;, &quot;docker-voice-ai.artifactory.corp.audiocodes.com&quot;]&apos; /etc/docker/daemon.json
        else
            echo &quot;Updating line for insecure registries&quot;
            regs=$(cat /etc/docker/daemon.json | jq &apos;.[]&apos;)
            regs=${regs:3:-2}
            sudo sed -i &quot;s/.*insecure-registries.*/\\\t\&quot;insecure-registries\&quot; : [$regs, \&quot;docker-voice-ai.test-artifactory\&quot;, \&quot;docker-voice-ai.artifactory\&quot;, \&quot;docker-voice-ai.test-artifactory.corp.audiocodes.com\&quot;, \&quot;docker-voice-ai.artifactory.corp.audiocodes.com\&quot;]\&quot;&quot; /etc/docker/daemon.json
        fi
    fi
else
    sudo echo -e &quot;{\n\t\&quot;insecure-registries\&quot; : [\&quot;docker-voice-ai.test-artifactory\&quot;, \&quot;docker-voice-ai.artifactory\&quot;, \&quot;docker-voice-ai.test-artifactory.corp.audiocodes.com\&quot;, \&quot;docker-voice-ai.artifactory.corp.audiocodes.com\&quot;]\n}&quot; &gt; /etc/docker/daemon.json
fi


echo &quot;Restarting docker&quot; &amp;&amp; sudo systemctl restart docker
sleep 3

echo ${jenkinsPass} | docker login -u jenkins --password-stdin ${DOCKER_URL}
ret_value=$?

echo &quot;Docker login Return Value: $ret_value&quot;

if [[ ! &quot;$ret_value&quot; =~ &quot;Login Succeeded&quot; ]]
then
        exit 1
fi
</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>## Runtime vars
BRANCH=`git branch --no-color -r --contains HEAD | grep -v -e &apos;-&gt;&apos; | head -1 | awk -F&apos;/&apos; &apos;{print $NF}&apos;`
OLDTAG=`git describe --first-parent --tags --abbrev=0 HEAD^`
NEWTAG=`echo $GERRIT_REFNAME | awk -F/ &apos;{print $NF}&apos;`
AuthorCommitter=`git log --first-parent --pretty=format:&quot;%aN%n%cN&quot; $OLDTAG..HEAD | sort -u | sed s/$/\;/g`

## run eslint
git ls-files session-manager/\*js | grep -v grpc | xargs eslint -f checkstyle &gt; eslint.xml || echo &quot;ESLint command failed&quot;

## change in some files some parameters to build number
cd ${WORKSPACE}
echo &quot;{\&quot;version\&quot;: \&quot;${NEWTAG}\&quot;}&quot; &gt; version.json
#sed -i -- &quot;s/%version%/${BUILD_NUMBER}/g&quot; ${WORKSPACE}/session-manager/config.ts
#sed -i -- &quot;s/%version%/${BUILD_NUMBER}/g&quot; ${WORKSPACE}/ui/config.ts

### Build the project
# Clean ALL docker objects
echo &quot;Removing ALL Docker objects.&quot;
docker rm --force $(docker ps -a -q) &gt; /dev/null 2&gt;&amp;1 || true
docker system prune --all --volumes --force

DOCKER_URL=&quot;docker-voice-ai.test-artifactory&quot;
DOCKER_REG=&quot;${DOCKER_URL}&quot;
# Used in build.sh
export DOCKER_REG_PREFIX=&quot;docker-voice-ai.test-artifactory.corp.audiocodes.com/&quot;
export GIT_BRANCH=$BRANCH

sh build.sh
ret_value=$?

echo &quot;script Return Value: $ret_value&quot;

if [[ &quot;$ret_value&quot; -ne &quot;0&quot; ]]
then
	exit 1
fi

### Pushing docker images to Artifactory
echo &quot;Pushing Docker images to Artifactory.&quot;

echo &quot;Step 2 - Tagging &amp; pushing images to Artifactory.&quot;
for outcomeImage in $(docker images *vag-* --format &quot;{{.Repository}}&quot; | grep -v vag-common); do
    dockerImage=$(echo $outcomeImage | sed &apos;s/^.*_//&apos;)
    imageID=$(docker images *vag-* | grep &quot;$dockerImage&quot; | gawk &apos;{print $3}&apos;)
    docker tag ${imageID} ${DOCKER_REG}/${dockerImage}:${NEWTAG}
    docker push ${DOCKER_REG}/${dockerImage}:${NEWTAG}
    ## Also push image with ${BRANCH} tag
    # Check if need to push with tag ${BRANCH} to Artifactory:
    # If highest tag on Artifactory is lower then ${NEWTAG},
    # we also push docker images with tag ${BRANCH}
    allTags=$(curl -u jenkins:$jenkinsPass -k https://$DOCKER_URL/v2/$dockerImage/tags/list | jq &apos;.&quot;tags&quot;[]&apos;)
    filterTags=$(echo $allTags | tr &quot; &quot; &quot;\n&quot; | grep -v -e latest -e ${BRANCH})
    highTag=$(echo $filterTags | tr &quot; &quot; &quot;\n&quot; | sort -t&apos;.&apos; -n -k3 | tail -n 1)
    highTag=${highTag:1:-1}
    higherTag=$(echo -e &quot;$highTag\n${NEWTAG}&quot; | sort -t&apos;.&apos; -n -k3 | tail -n 1)
    if [[ &quot;$higherTag&quot; == &quot;${NEWTAG}&quot; ]]; then
        docker tag ${imageID} ${DOCKER_REG}/${dockerImage}:${BRANCH};
        docker push ${DOCKER_REG}/${dockerImage}:${BRANCH};
    fi
done

# Clean ALL docker objects
echo &quot;Step 3 - Removing ALL Docker objects.&quot;
docker rm --force $(docker ps -a -q) &gt; /dev/null 2&gt;&amp;1 || true
docker system prune --all --volumes --force

echo &quot;Finished docker push to Artifactory.&quot;


### For UpdateVI job
# BRANCH OLDTAG AuthorCommitter moved to top of script
DATE=`date`
RN=&quot;&quot;
while read -r hash; do
  if [ &quot;$hash&quot; != &quot;&quot; ]; then
    subject=$(git log --pretty=format:&quot;%s&quot; $hash -n1 | sed &apos;s/\&quot;/`/g; s/---/_/g; s/::/;/g&apos;)
    VI=$(git log --pretty=format:&quot;%B&quot; $hash -n1 | grep Issue | sed &apos;s/.*: \(VI\|\)//gi; s/ .*//g&apos;)
    RN+=---$subject::$hash::$VI
  fi
done &lt;&lt;&lt; &quot;$(git log --first-parent --reverse --pretty=format:&quot;%h&quot; $OLDTAG..HEAD)&quot;
EMAIL=`git log --pretty=format:&quot;%ae%n%ce&quot; $OLDTAG..HEAD | sort -u`
echo NEWTAG=${NEWTAG} &gt; voiceAI.properties
echo RN=${RN} &gt;&gt; voiceAI.properties
echo GERRIT_HOST=$(echo $GIT_URL | cut -d@ -f2 | cut -d: -f1) &gt;&gt; voiceAI.properties
echo EMAIL=${EMAIL} &gt;&gt; voiceAI.properties
echo BRANCH=$BRANCH&gt;&gt; voiceAI.properties
echo PROJECT=`git config --get remote.origin.url | sed &apos;s:.*29418/::&apos;` &gt;&gt; voiceAI.properties
echo DATE=${DATE} &gt;&gt; voiceAI.properties
echo AuthorCommitter=${AuthorCommitter} &gt;&gt; voiceAI.properties
echo folder_name=${folder_name} &gt;&gt; voiceAI.properties
cat voiceAI.properties</command>
    </hudson.tasks.Shell>
    <EnvInjectBuilder plugin="envinject@2.1.6">
      <info>
        <propertiesFilePath>voiceAI.properties</propertiesFilePath>
      </info>
    </EnvInjectBuilder>
  </builders>
  <publishers>
    <io.jenkins.plugins.analysis.core.steps.IssuesRecorder plugin="warnings-ng@4.0.0">
      <analysisTools>
        <io.jenkins.plugins.analysis.warnings.EsLint>
          <id></id>
          <name></name>
          <pattern>eslint.xml</pattern>
          <reportEncoding></reportEncoding>
          <skipSymbolicLinks>false</skipSymbolicLinks>
        </io.jenkins.plugins.analysis.warnings.EsLint>
      </analysisTools>
      <sourceCodeEncoding></sourceCodeEncoding>
      <ignoreQualityGate>false</ignoreQualityGate>
      <ignoreFailedBuilds>true</ignoreFailedBuilds>
      <referenceJobName>-</referenceJobName>
      <healthy>0</healthy>
      <unhealthy>0</unhealthy>
      <minimumSeverity plugin="analysis-model-api@7.0.1">
        <name>LOW</name>
      </minimumSeverity>
      <filters/>
      <isEnabledForFailure>false</isEnabledForFailure>
      <isAggregatingResults>false</isAggregatingResults>
      <isBlameDisabled>false</isBlameDisabled>
      <qualityGates/>
    </io.jenkins.plugins.analysis.core.steps.IssuesRecorder>
    <hudson.tasks.Mailer plugin="mailer@1.29">
      <recipients>ben.magriso</recipients>
      <dontNotifyEveryUnstableBuild>false</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
    <com.chikli.hudson.plugin.naginator.NaginatorPublisher plugin="naginator@1.17.2">
      <regexpForRerun></regexpForRerun>
      <rerunIfUnstable>false</rerunIfUnstable>
      <rerunMatrixPart>false</rerunMatrixPart>
      <checkRegexp>false</checkRegexp>
      <regexpForMatrixStrategy>TestParent</regexpForMatrixStrategy>
      <delay class="com.chikli.hudson.plugin.naginator.FixedDelay">
        <delay>5</delay>
      </delay>
      <maxSchedule>2</maxSchedule>
    </com.chikli.hudson.plugin.naginator.NaginatorPublisher>
  </publishers>
  <buildWrappers>
    <org.jenkinsci.plugins.credentialsbinding.impl.SecretBuildWrapper plugin="credentials-binding@1.16">
      <bindings>
        <org.jenkinsci.plugins.credentialsbinding.impl.UsernamePasswordMultiBinding>
          <credentialsId>centos</credentialsId>
          <usernameVariable></usernameVariable>
          <passwordVariable></passwordVariable>
        </org.jenkinsci.plugins.credentialsbinding.impl.UsernamePasswordMultiBinding>
      </bindings>
    </org.jenkinsci.plugins.credentialsbinding.impl.SecretBuildWrapper>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.9"/>
    <hudson.plugins.ansicolor.AnsiColorBuildWrapper plugin="ansicolor@0.6.2">
      <colorMapName>xterm</colorMapName>
    </hudson.plugins.ansicolor.AnsiColorBuildWrapper>
    <org.jfrog.hudson.generic.ArtifactoryGenericConfigurator plugin="artifactory@3.4.1">
      <deployerDetails>
        <artifactoryName>artifactory2-pro</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <stagingPlugin/>
      </deployerDetails>
      <resolverDetails>
        <artifactoryName>artifactory2-pro</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <stagingPlugin/>
      </resolverDetails>
      <deployerCredentialsConfig>
        <credentialsId></credentialsId>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </deployerCredentialsConfig>
      <resolverCredentialsConfig>
        <credentialsId></credentialsId>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </resolverCredentialsConfig>
      <useSpecs>true</useSpecs>
      <uploadSpec>
        <spec></spec>
      </uploadSpec>
      <downloadSpec>
        <spec></spec>
      </downloadSpec>
      <deployPattern></deployPattern>
      <resolvePattern></resolvePattern>
      <deploymentProperties></deploymentProperties>
      <deployBuildInfo>true</deployBuildInfo>
      <includeEnvVars>false</includeEnvVars>
      <envVarsPatterns>
        <includePatterns></includePatterns>
        <excludePatterns>*password*,*secret*,*key*</excludePatterns>
      </envVarsPatterns>
      <discardOldBuilds>false</discardOldBuilds>
      <discardBuildArtifacts>true</discardBuildArtifacts>
      <asyncBuildRetention>false</asyncBuildRetention>
      <multiConfProject>false</multiConfProject>
      <customBuildName></customBuildName>
      <overrideBuildName>false</overrideBuildName>
    </org.jfrog.hudson.generic.ArtifactoryGenericConfigurator>
    <EnvInjectPasswordWrapper plugin="envinject@2.1.6">
      <injectGlobalPasswords>true</injectGlobalPasswords>
      <maskPasswordParameters>true</maskPasswordParameters>
      <passwordEntries>
        <EnvInjectPasswordEntry>
          <name>jenkinsPass</name>
          <value>{AQAAABAAAAAQOeD+AbXDOo0B0GhQbwBlinW2va2qC7PNuTqkFLsoh0w=}</value>
        </EnvInjectPasswordEntry>
      </passwordEntries>
    </EnvInjectPasswordWrapper>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@2.0.3">
      <template>#${BUILD_NUMBER}__${NEWTAG}</template>
      <descriptionTemplate></descriptionTemplate>
      <runAtStart>false</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>