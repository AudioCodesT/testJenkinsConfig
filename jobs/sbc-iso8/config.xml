<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>1. triggered manually   -   inputs: 1. tag of TP/GWAPP.  2.customer (optional)&#xd;
2. download  HostedTP_CENTOS8   of this tag&#xd;
3. use private labeling if customer != empty&#xd;
4. compile and deploy to artifactory&#xd;
</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.0.10"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.27">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>Tag</name>
          <description>TP/GWApp tag</description>
          <defaultValue>7.20CE.255.067</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>Customer</name>
          <description>This param should be filled only for a private label ISO.
Search the customer name on the following path: https://artifactory/sbc-release/com/ac/sbc/ISO/private-labels
If exist, all files under this customer folder will be copied from artifactory to compilation workspace before compilation (should changed the icon image etc...)</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    <EnvInjectJobProperty plugin="envinject@2.1.6">
      <info>
        <secureGroovyScript plugin="script-security@1.68">
          <script></script>
          <sandbox>false</sandbox>
        </secureGroovyScript>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
      <on>true</on>
      <keepJenkinsSystemVariables>true</keepJenkinsSystemVariables>
      <keepBuildVariables>true</keepBuildVariables>
      <overrideBuildParameters>false</overrideBuildParameters>
    </EnvInjectJobProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@4.0.0">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <refspec>$Tag</refspec>
        <url>ssh://jenkins@test-gerrit:29418/TP/GWApp</url>
        <credentialsId>fef9964a-ddb7-4ce6-a445-a99a9e9802c0</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>$Tag</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.CleanBeforeCheckout/>
    </extensions>
  </scm>
  <assignedNode>sbc-linux-build</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <authToken>sbcCreateISO8</authToken>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>BL=`git describe --tags --first-parent | sed s/-/_/g`
echo BL ver is: ${BL}
# Use NEWTAG as the name in the Artifactory - add $Customer in case it is exist
if [[ $Customer != &quot;&quot; ]]; then NEWTAG=${Tag}-$Customer; else NEWTAG=$Tag; fi

echo NEWTAG=${NEWTAG} &gt; generated_version.properties
echo GERRIT_BRANCH=`git branch --no-color -r --contains HEAD | grep -v -e &apos;-&gt;&apos; | head -1 | awk -F&apos;/&apos; &apos;{print $NF}&apos;` &gt;&gt; generated_version.properties
</command>
    </hudson.tasks.Shell>
    <EnvInjectBuilder plugin="envinject@2.1.6">
      <info>
        <propertiesFilePath>generated_version.properties</propertiesFilePath>
      </info>
    </EnvInjectBuilder>
    <hudson.tasks.Shell>
      <command>

rev=$(git rev-parse --verify $Tag^{commit})
#rev=$(git rev-parse HEAD)

#Bring &apos;HostedTP_CENTOS8&apos; the needed cmp for this compilation
User=&quot;admin:$artifactory_password&quot;
uri=$(curl -ks -u $User &quot;https://artifactory/api/search/prop?vcs.revision=$rev&amp;repos=sbc-repo&quot; | grep uri | \
      cut -d&apos;&quot;&apos; -f4 | grep HostedTP_CENTOS8 | grep -v LAB | grep .cmp  | head -1)
if [ &quot;$uri&quot; == &quot;&quot; ]; then
  echo Need waiting to HostedTP CENTOS8 compilation...
  if [ &quot;$NAGINATOR_COUNT&quot; == 3 ]; then
    echo Exit, no HostedTP was found
    exit 1
  else
    echo Try again, HostedTP is not ready
    exit 2
  fi
fi

downloadUri=$(curl -ks -u $User $uri | grep &quot;downloadUri&quot; | cut -d&apos;&quot;&apos; -f4)

# Bring the Centos8-ISO repository - you must it to build the ISO
commit_sha1=`git ls-files --stage OpenSource/Centos8-ISO | cut -f2 -d &apos; &apos;`
cd ..
if [ ! -e Centos8-ISO/.git ]; then
  git -c http.sslverify=false clone -n https://test-gerrit/TP/OpenSource/Centos8-ISO OpenSource/Centos8-ISO 
fi

cd OpenSource/Centos8-ISO
git checkout -f $commit_sha1
sudo chmod -R 755 .
sudo chown -R centos:centos .

#Copy HostedTP_SIP_CENTOS8.cmp to centos8/isofiles/sbc.install
rm -f centos8/isofiles/sbc.install
curl -ks -u $User $downloadUri --output centos8/isofiles/sbc.install
cp centos8/isofiles/sbc.install ./

ls -l centos8/isofiles

# should we use private labeling in this ISO ?
echo &quot;Check if need to change files for a specific customer&quot;
if [[ $Customer != &quot;&quot; ]]; then

    cd ../..
	echo &quot;*******    START PRIVATE LABALING    ************&quot;
	PRIVATE=https://artifactory/api/storage/sbc-release/com/ac/sbc/ISO/private-labels
	DOWNLOAD=$(echo $PRIVATE | sed &apos;s|api/storage/||&apos;)
	echo &quot;download from artifactory all files under $Customer&quot;
	for f in $(curl -ks -u $User &quot;$PRIVATE/$Customer&quot; | grep -B1 false | grep uri | cut -d&apos;&quot;&apos; -f4); do
        if [ ! -d $Customer ]; then mkdir $Customer; fi
		curl -ks -u $User -X GET &quot;${DOWNLOAD}/${Customer}$f&quot; --output ${Customer}$f;
	done
    echo Download copyFiles_master.sh
    curl -ks -u $User -X GET &quot;${DOWNLOAD}/copyFiles_master.sh&quot; --output copyFiles_master.sh
	echo &quot;Check if copyFiles_master.sh exist&quot;
	if [[ -f ./copyFiles_master.sh &amp;&amp; -d $Customer ]]; then
        # Dos2unix
    	tr -d &apos;\r&apos; &lt; copyFiles_master.sh &gt; copyFiles_unix.sh
		chmod +x copyFiles_unix.sh
        # The two following new variables are needed for the copyFiles_master.sh script
        CENTOS_VERSION=8
        LABEL_SRC=$Customer
		source ./copyFiles_unix.sh
        cat copyFiles_unix.sh
		echo &quot;$Customer files were copied to the right path&quot;
        echo &quot;*******    END PRIVATE LABALING    ***********&quot;
        cd OpenSource/Centos8-ISO
	else
		echo &quot;The file copyFiles_master.sh is missing or the $Customer directory was not created, no files were copied&quot;
        exit 1
	fi
else
	echo &quot;No private labaling is needed in this ISO&quot;
    echo &quot;Continuing to build&quot;
fi

./build_centos8_iso.sh

ls -l 

imageFile=sbc8.iso
if [ ! -f $imageFile ] || [ &quot;`du $imageFile | cut -f1`&quot; -lt 900000 ]; then
  echo &quot;$imageFile Image too small.. exit with error&quot;
  exit -1
fi

mv $imageFile $WORKSPACE/sbc-c8-F$NEWTAG.iso
</command>
      <unstableReturn>2</unstableReturn>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.Mailer plugin="mailer@1.30">
      <recipients>yossim</recipients>
      <dontNotifyEveryUnstableBuild>false</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
    <hudson.plugins.emailext.ExtendedEmailPublisher plugin="email-ext@2.61">
      <recipientList>$DEFAULT_RECIPIENTS</recipientList>
      <configuredTriggers>
        <hudson.plugins.emailext.plugins.trigger.AlwaysTrigger>
          <email>
            <subject>$PROJECT_DEFAULT_SUBJECT</subject>
            <body>$PROJECT_DEFAULT_CONTENT</body>
            <recipientProviders>
              <hudson.plugins.emailext.plugins.recipients.RequesterRecipientProvider/>
            </recipientProviders>
            <attachmentsPattern></attachmentsPattern>
            <attachBuildLog>false</attachBuildLog>
            <compressBuildLog>false</compressBuildLog>
            <replyTo>$PROJECT_DEFAULT_REPLYTO</replyTo>
            <contentType>project</contentType>
          </email>
        </hudson.plugins.emailext.plugins.trigger.AlwaysTrigger>
      </configuredTriggers>
      <contentType>default</contentType>
      <defaultSubject>$DEFAULT_SUBJECT</defaultSubject>
      <defaultContent>$DEFAULT_CONTENT</defaultContent>
      <attachmentsPattern></attachmentsPattern>
      <presendScript>$DEFAULT_PRESEND_SCRIPT</presendScript>
      <postsendScript>$DEFAULT_POSTSEND_SCRIPT</postsendScript>
      <attachBuildLog>false</attachBuildLog>
      <compressBuildLog>false</compressBuildLog>
      <replyTo>$DEFAULT_REPLYTO</replyTo>
      <saveOutput>false</saveOutput>
      <disabled>false</disabled>
    </hudson.plugins.emailext.ExtendedEmailPublisher>
    <com.chikli.hudson.plugin.naginator.NaginatorPublisher plugin="naginator@1.17.2">
      <regexpForRerun>HostedTP is not ready</regexpForRerun>
      <rerunIfUnstable>true</rerunIfUnstable>
      <rerunMatrixPart>false</rerunMatrixPart>
      <checkRegexp>true</checkRegexp>
      <regexpForMatrixStrategy>TestParent</regexpForMatrixStrategy>
      <delay class="com.chikli.hudson.plugin.naginator.FixedDelay">
        <delay>600</delay>
      </delay>
      <maxSchedule>3</maxSchedule>
    </com.chikli.hudson.plugin.naginator.NaginatorPublisher>
  </publishers>
  <buildWrappers>
    <org.jfrog.hudson.generic.ArtifactoryGenericConfigurator plugin="artifactory@3.5.0">
      <deployerDetails>
        <artifactoryName>artifactory2-pro</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <deployReleaseRepository>
          <keyFromText></keyFromText>
          <keyFromSelect>sbc-release</keyFromSelect>
          <dynamicMode>false</dynamicMode>
        </deployReleaseRepository>
        <stagingPlugin/>
      </deployerDetails>
      <resolverDetails>
        <artifactoryName>artifactory2-pro</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <stagingPlugin/>
      </resolverDetails>
      <deployerCredentialsConfig>
        <credentialsId></credentialsId>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </deployerCredentialsConfig>
      <resolverCredentialsConfig>
        <credentialsId></credentialsId>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </resolverCredentialsConfig>
      <useSpecs>false</useSpecs>
      <uploadSpec>
        <spec></spec>
      </uploadSpec>
      <downloadSpec>
        <spec></spec>
      </downloadSpec>
      <deployPattern>${WORKSPACE}/sbc-c8-F$NEWTAG.iso=&gt;com/ac/sbc/ISO/Centos8/${GERRIT_BRANCH}/${NEWTAG}
${WORKSPACE}/copyFiles.sh=&gt;com/ac/sbc/ISO/Centos8/${GERRIT_BRANCH}/${NEWTAG}</deployPattern>
      <resolvePattern></resolvePattern>
      <deploymentProperties></deploymentProperties>
      <deployBuildInfo>true</deployBuildInfo>
      <includeEnvVars>true</includeEnvVars>
      <envVarsPatterns>
        <includePatterns></includePatterns>
        <excludePatterns>*password*,*secret*,*key*</excludePatterns>
      </envVarsPatterns>
      <discardOldBuilds>false</discardOldBuilds>
      <discardBuildArtifacts>true</discardBuildArtifacts>
      <asyncBuildRetention>false</asyncBuildRetention>
      <multiConfProject>false</multiConfProject>
      <customBuildName></customBuildName>
      <overrideBuildName>false</overrideBuildName>
    </org.jfrog.hudson.generic.ArtifactoryGenericConfigurator>
    <EnvInjectPasswordWrapper plugin="envinject@2.1.6">
      <injectGlobalPasswords>false</injectGlobalPasswords>
      <maskPasswordParameters>true</maskPasswordParameters>
      <passwordEntries>
        <EnvInjectPasswordEntry>
          <name>artifactory_password</name>
          <value>{AQAAABAAAAAQPRyh9PDNLAqHbUYVPWA1zqJtQygRaSOnGC6aa75OZys=}</value>
        </EnvInjectPasswordEntry>
      </passwordEntries>
    </EnvInjectPasswordWrapper>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@2.0.3">
      <template>#${BUILD_NUMBER}_$Tag $Customer</template>
      <descriptionTemplate></descriptionTemplate>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>